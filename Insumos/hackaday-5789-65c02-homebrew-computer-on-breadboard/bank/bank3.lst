AS65 Assembler for R6502 [1.42].                                     Page    1
-------------------------------- bank\bank3.s --------------------------------

2740 lines read, no errors in pass 1.
                             	include "kernel\kernel.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	The 'kernel' routine includes code and data wh
                             ;* 	be in every ROM bank.  In the auto-generated 
                             ;*  files, the kernel is added before the bank sp
                             ;*	code.  See bank0.s as an example.
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc\includes.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  VDP registers, ACIA registers.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
0400 =                       IO_0		= 0x0400
0480 =                       IO_1		= 0x0480
0500 =                       IO_2		= 0x0500
0580 =                       IO_3		= 0x0580
0600 =                       IO_4		= 0x0600
0680 =                       IO_5		= 0x0680
0700 =                       IO_6		= 0x0700
0780 =                       IO_7		= 0x0780
                             
                             ;* VDP is accessed through IO_2
0500 =                       VDP_MODE0		= IO_2
0501 =                       VDP_MODE1		= IO_2+1
0501 =                       VDP_STATUS		= IO_2+1
0501 =                       VDP_ADDR		= IO_2+1
0500 =                       VDP_VRAM		= IO_2
0001 =                       VDP_SHORTDELAY	= 1
0002 =                       VDP_LONGDELAY 	= 2
0010 =                       VDP_FLASH		= 0x10				;* Must be a power of 2 *
AS65 Assembler for R6502 [1.42].                                     Page    2
-------------------------------- bank\bank3.s --------------------------------

                             
                             ;* This structure defines the key information
                             ;* kept about the VDP current mode
0000 =                       	struct vdp_addr_struct
0000 =                       	dw vdp_addr_nme				;* Address of name table
0002 =                       	dw vdp_addr_col				;* Address of colour table
0004 =                       	dw vdp_addr_pat				;* Address of pattern table
0006 =                       	dw vdp_addr_spa				;* Address of sprite pattern 
0008 =                       	dw vdp_addr_spp				;* Address of sprite position
000a =                       	db vdp_bord_col				;* Value of border colour
                             	end struct
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD			= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
AS65 Assembler for R6502 [1.42].                                     Page    3
-------------------------------- bank\bank3.s --------------------------------

                             ;* 6551 ACIA definitions
                             ;* As found in the datasheets
0580 =                       SER_DATA	= (IO_3+0)
0581 =                       SER_STATUS	= (IO_3+1)
0581 =                       SER_RESET	= (IO_3+1)
0582 =                       SER_CMD		= (IO_3+2)
0583 =                       SER_CTL		= (IO_3+3)
                             
0080 =                       SER_IRQ		= 0x80
0040 =                       SER_DSRB	= 0x40
0020 =                       SER_DCDB	= 0x20
0010 =                       SER_TDRE	= 0x10
0008 =                       SER_RDRF	= 0x08
0004 =                       SER_OVRN	= 0x04
0002 =                       SER_FE		= 0x02
0001 =                       SER_PE		= 0x01
0080 =                       SER_SBN		= 0x80
0040 =                       SER_WL1		= 0x40
0020 =                       SER_WL0		= 0x20
0060 =                       SER_WL		= (SER_WL1|SER_WL0)
0010 =                       SER_RCS		= 0x10
0008 =                       SER_SBR3	= 0x08
0004 =                       SER_SBR2	= 0x04
0002 =                       SER_SBR1	= 0x02
0001 =                       SER_SBR0	= 0x01
000f =                       SER_SBR		= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0)
000f =                       SER_19200B	= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0
000e =                       SER_9600B	= (SER_SBR3|SER_SBR2|SER_SBR1)
0080 =                       SER_PMC1	= 0x80
0040 =                       SER_PMC0	= 0x40
00c0 =                       SER_PMC		= (SER_PMC1|SER_PMC0)
0020 =                       SER_PME		= 0x20
0010 =                       SER_REM		= 0x10
0008 =                       SER_TIC1	= 0x08
0004 =                       SER_TIC0	= 0x04
000c =                       SER_TIC		= (SER_TIC1|SER_TIC0)
0002 =                       SER_IRD		= 0x02
0001 =                       SER_DTR		= 0x01
                             
                             ;* BBC keyboard definitions
                             ;* The keyboard is accessed through VIA 1
                             ;* Port A - all output
0001 =                       KB_ROWA		= 0x01
0002 =                       KB_ROWB		= 0x02
0004 =                       KB_ROWC		= 0x04
0008 =                       KB_COLA		= 0x08
0010 =                       KB_COLB		= 0x10
0020 =                       KB_COLC		= 0x20
0040 =                       KB_COLD		= 0x40
0080 =                       KB_EN		= 0x80
                             ;* Port B
0001 =                       KB_W		= 0x01			; Input - BBC keyboard hardware se
0002 =                       KB_LED0		= 0x02			; Output - led 0
0004 =                       KB_LED1		= 0x04			; Output - led 1
0008 =                       KB_LED2		= 0x08			; Output - led 2
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
0002 =                       KB_SHIFTLK	= 0x02			; Id of Shift lock - maps to 
                             
0005 =                       KB_REP_TIM	= 5				; Number of VB periods for the 
001e =                       KB_REP_DEL	= 30			; Number of VB periods before r
0003 =                       KB_DEBOUNCE	= 3				; Number of VB periods before 
                             
AS65 Assembler for R6502 [1.42].                                     Page    4
-------------------------------- bank\bank3.s --------------------------------

0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0006 =                       UTF_ACK		= 0x06			; Used for the copy key in this
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
                             ;* SD Card interface definitions
                             ;* The card is accessed through port B of VIA 2
0001 =                       SD_CLK		= 0x01			; Clock output to SD card
0004 =                       SD_CD		= 0x04			; Card detect input
0008 =                       SD_CS		= 0x08			; Card select output
0010 =                       SD_DI		= 0x10			; Data output from VIA to SD Card
0080 =                       SD_DO		= 0x80			; Data input to VIA from SD card
                             
0010 =                       SD_MOSI		= SD_DI
0080 =                       SD_MISO		= SD_DO
0480 =                       SD_REG		= IO_1+PRB
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Memory management definitions
                             ;* Y1,Y0 = ROM bank selection CIA1 PORTB
0080 =                       MM_Y1					= 0x80
0040 =                       MM_Y0					= 0x40
                             ;* X1,X0 = RAM bank selection CIA1 PORTB
0020 =                       MM_X1					= 0x20
0010 =                       MM_X0					= 0x10
                             ;* DIS = ROM disable *CIA2* PORTB
0020 =                       MM_DIS					= 0x20
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             ;* SD Card Master Boot Record (MBR) definitions
                             ;* The MBR contains the essential information
                             ;* needed to access the data on the card
                             ;* MBR is usually sector 0, but not always
                             ;* however the card I am using does work ok.
0000 =                       MBR_Code				=	0x0000
0003 =                       MBR_OEMName				=	0x0003
000b =                       MBR_BytesPerSect		=	0x000b
000d =                       MBR_SectPerClust		=	0x000d
000e =                       MBR_ResvSect			=	0x000e
0010 =                       MBR_FATCopies			=	0x0010
0011 =                       MBR_RootEntries			=	0x0011
0013 =                       MBR_SmlSect				=	0x0013
0015 =                       MBR_MediaDesc			=	0x0015
0016 =                       MBR_SectPerFAT			=	0x0016
AS65 Assembler for R6502 [1.42].                                     Page    5
-------------------------------- bank\bank3.s --------------------------------

0018 =                       MBR_SectPerTrk			=	0x0018
001a =                       MBR_NumHeads			=	0x001a
001c =                       MBR_NumHidSect			=	0x001c
0020 =                       MBR_NumSect				=	0x0020
0024 =                       MBR_DrvNum				=	0x0024
0026 =                       MBR_ExtSig				=	0x0026
0027 =                       MBR_SerNo				=	0x0027
002b =                       MBR_VolName				=	0x002b
0036 =                       MBR_FATName				=	0x0036
003e =                       MBR_ExeCode				=	0x003e
01c6 =                       MBR_BootPart1			=	(0x01be+0x08)
01fe =                       MBR_ExeMark				=	0x01fe
                             
                             ;* FAT16 definitions - these are offsets
                             ;* in to a FAT table entry which is
                             ;* 32 bytes in length.
0000 =                       FAT_Name				= 	0x00
0008 =                       FAT_Ext					=	0x08
000b =                       FAT_Attr				=	0x0b
000c =                       FAT_Resv				=	0x0c
000d =                       FAT_Createms			=	0x0d
000e =                       FAT_CreateTime			=	0x0e
0010 =                       FAT_CreateDate			=	0x10
0012 =                       FAT_AccessDate			=	0x12
0014 =                       FAT_EAIndex				=	0x14
0016 =                       FAT_ModTime				=	0x16
0018 =                       FAT_ModDate				=	0x18
001a =                       FAT_FirstClust			=	0x1a
001c =                       FAT_FileSize			=	0x1c
                             
                             ;* The FileHandle stucture is key to
                             ;* accessing the file system
0000 =                       	struct FileHandle
0000 =                       	ds FH_Name, 13			; 8 name, 3 extension, 1 separa
000d =                       	ds FH_Size, 4
0011 =                       	ds FH_Attr, 1
0012 =                       	ds FH_CurrClust, 2
0014 =                       	ds FH_SectCounter, 1
0015 =                       	ds FH_CurrSec, 4
0019 =                        	ds FH_Pointer, 4
001d =                       	ds FH_DirSect, 4
0021 =                       	ds FH_DirOffset, 2
0023 =                       	ds FH_FirstClust, 2
0025 =                       	ds FH_LastClust, 2
0027 =                       	ds FH_FileMode, 1
                             	end struct
                             
0001 =                       FS_BLK_FLG_LOAD		 	= 	0x01		; On next byte, load 
0002 =                       FS_BLK_FLG_FLUSH		=	0x02		; Block has changed, ne
                             	
0001 =                       FS_ERR_EOF				=	0x01
                             
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
AS65 Assembler for R6502 [1.42].                                     Page    6
-------------------------------- bank\bank3.s --------------------------------

                             
                             _pushAXY macro
                             	pha
                             	phx
                             	phy
                             	endm
                             
                             _pullAXY macro
                             	ply
                             	plx
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _printmsgA macro msg
                             	phx
                             	phy
                             	pha
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printA macro
                             	phx
                             	phy
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
AS65 Assembler for R6502 [1.42].                                     Page    7
-------------------------------- bank\bank3.s --------------------------------

                             	pha
                             	lda #ch
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
AS65 Assembler for R6502 [1.42].                                     Page    8
-------------------------------- bank\bank3.s --------------------------------

                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             
                             
                             	include "inc\graph.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*  Needed because there is both a 40 and 32 colu
                             ;*  supported by the VDP, and the screens are not
                             ;*  same location.
                             ;*
                             ;************************************************
                             
0000 =                       	struct gr_screen
0000 =                       	dw gr_screen_start			; Start of screen memory in
0002 =                       	dw gr_screen_size			; Number of bytes screen occ
0004 =                       	db gr_screen_w				; Number of columns
0005 =                       	db gr_screen_h				; Number of rows
0006 =                       	db gr_cur_off				; Y offset of cursor image from
0007 =                       	db gr_cur_x					; Current X position of cursor
0008 =                       	db gr_cur_y					; Current Y position of cursor
0009 =                       	dw gr_cur_ptr				; VDP address of cursor
000b =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000c =                       	db gr_pixmask				; Pixel plot mask
000d =                       	db gr_pixcol				; Pixel colour
000e =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	include "io\io.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page    9
-------------------------------- bank\bank3.s --------------------------------

                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0cbb =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
AS65 Assembler for R6502 [1.42].                                     Page   10
-------------------------------- bank\bank3.s --------------------------------

0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
AS65 Assembler for R6502 [1.42].                                     Page   11
-------------------------------- bank\bank3.s --------------------------------

0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "kernel\zeropage.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  Basically, this module defines:
                             ;*  - All zero page variables for system and dfla
                             ;*  - Page 1 is stack so no need to worry about t
                             ;*  - Page 2 is the serial IO buffer for the 6551
                             ;*  - Page 3 and 4 is a 512 buffer for SD card se
                             ;*  - Page 5 onwards is mainly for dflat working 
                             ;*    but also non-zero page storage for general 
                             ;*    system and scratch usage.
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
AS65 Assembler for R6502 [1.42].                                     Page   12
-------------------------------- bank\bank3.s --------------------------------

                             ;*  have multiple used across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
                             ; Interrupt routine addresses
0002 =                       int_irq		 ds	2		; Master IRQ handler
0004 =                       int_brk		 ds	2		; Master BRK handler
0006 =                       int_uservdp	 ds	2		; Where to jump for VDP interr
0008 =                       int_usercia0 ds	2		; Where to jump for CIA0 inter
000a =                       int_usercia1 ds	2		; Where to jump for CIA1 inter
                             
                             ; VDP parameters
000c =                       vdp_cnt		ds	1		; VDP interrupt counter
000d =                       vdp_cnt_hi 	ds	1		; VDP counter high
000e =                       vdp_cnt_hi2	ds	1		; VDP counter high 2
000f =                       vdp_curoff	ds	1		; Cursor off (0 = On)
0010 =                       vdp_curstat	ds	1		; Cursor status
0011 =                       vdp_curval	ds	1		; Cursor value on screen
0012 =                       vdp_blank	ds	1		; Screen blank value normally 32
0013 =                       vdp_delay	ds	1		; Delay counter for VRAM access
                             
                             ; vdp settings
0014 =                       vdp_base	ds	vdp_addr_struct
                             
                             ; Screen geometry
001f =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
002f =                       kb_raw  	ds	1		; Raw keyboard code
0030 =                       kb_last		ds	1		; Raw code of last key
0031 =                       kb_code 	ds	1		; Converted keyboard code
0032 =                       kb_stat		ds	1		; Keyboard status for caps and shi
0033 =                       kb_deb		ds	1		; VB periods since last KB spike
0034 =                       kb_rep		ds	1		; Keyboard repeat timer
0035 =                       kb_rep_tim 	ds	1		; Default repeat speed
0036 =                       kb_rep_del 	ds	1		; Default repeat delay timing
0037 =                       kb_debounce ds	1		; Default repeat debounce
0038 =                       kb_pressed	ds	1		; Set by the interrupt handler i
                             
0039 =                       tmp_alo 	ds	1		; VDP addresses lo
003a =                       tmp_ahi 	ds	1		; VDP addresses hi
003b =                       tmp_blo 	ds	1		; Temp address lo
003c =                       tmp_bhi		ds	1		; Temp address hi
003d =                       tmp_clo		ds	1		; Temp address lo
003e =                       tmp_chi		ds	1		; Temp address hi
003f =                       tmp_a		ds	1		; Temp storage a
                             
                             ; Raw input/output parameters
0040 =                       buf_lo		ds	1		; Line buffer address low
0041 =                       buf_hi		ds	1		; Line buffer address high
0042 =                       buf_sz		ds	1		; Buffer size
0043 =                       buf_ef		ds	1		; End file / line marker
                             
                             ; SD card driver parameters
0044 =                       sd_slo		ds	1		; Sector pointer low
AS65 Assembler for R6502 [1.42].                                     Page   13
-------------------------------- bank\bank3.s --------------------------------

0045 =                       sd_shi		ds	1		; Sector pointer high
0046 =                       sd_sect		ds	4		; SD Card sector address
004a =                       sd_addr		ds	4		; SD Card byte address
                             
                             ; File system parameters
004e =                       fs_bootsect	ds	4		; Start of partition (usually 0
0052 =                       fs_fatsect	ds	4		; Start of FAT tables
0056 =                       fs_rootsect	ds	4		; Start of Root Directory
005a =                       fs_datasect	ds	4		; Start of Data Area
005e =                       fs_dirsect	ds	4		; Current directory
0062 =                       fh_temp		ds	4		; File handling temporary storage
0066 =                       fh_handle	ds	FileHandle ; File handle parameters
                             
                             
                             ; ** Integer function storage **
008e =                       ztmp_16					; Start of 16 byte scratch area (all 
008e =                       num_a		ds	4		; 4 byte primary accumulator
0092 =                       num_b		ds	4		; 4 byte secondary accumulator
0096 =                       num_x		ds	4		; 4 byte x register
009a =                       num_tmp		ds	4		; 4 byte temp space
009e =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
00a6 =                       errno		ds	1		; General error condition status
00a7 =                       df_immed	ds	1		; Immediate mode (0 = not immediat
00a8 =                       df_sp		ds	1		; Stack pointer after error to resto
00a9 =                       df_pc		ds	2		; PC after error to return to
00ab =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
00ad =                       df_brkval	ds	1		; Byte after BRK instruction
00ae =                       df_prgstrt	ds	2		; Start of program code
00b0 =                       df_prgend	ds	2		; End of program code
00b2 =                       df_vntstrt	ds	2		; Variable name table start
00b4 =                       df_vntend	ds	2		; Variable name table end
00b6 =                       df_vvtstrt	ds	2		; Variable value table start
00b8 =                       df_vvtend	ds	2		; Variable value table end
00ba =                       df_varcnt	ds	1		; Variable counter
00bb =                       df_starstrt	ds	2		; String and array table start
00bd =                       df_starend	ds	2		; String and array table end
00bf =                       df_rtstop	ds	1		; Runtime stack pointer
00c0 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
00c1 =                       df_strbuff	ds	1		; String expression buffer
00c2 =                       df_stridx	ds	1		; Top of string buffer (grows dow
00c3 =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
00c5 =                       df_linoff	ds	1		; Offset in to line buffer
00c6 =                       df_tokoff	ds	1		; Offset in to tokenised buffer
00c7 =                       df_eolidx	ds	1		; End of line index (i.e length)
00c8 =                       df_nxtstidx	ds	1		; Offset to the next statement 
00c9 =                       df_curstidx	ds	1		; Offset to the start of curren
00ca =                       df_symtab	ds	2		; Pointer to next free symtab ent
00cc =                       df_symoff	ds	1		; Offset in to token table
00cd =                       df_symini	ds	2		; Start of symtab
00cf =                       df_currlin	ds	2		; Execution current line pointer
00d1 =                       df_exeoff	ds	1		; Execution line buffer offset
00d2 =                       df_nextlin	ds	2		; Next line to execute
00d4 =                       df_tmpptra	ds	2		; Temp pointer a
00d6 =                       df_tmpptrb	ds	2		; Temp pointer b
00d8 =                       df_tmpptrc	ds	2		; Temp pointer c
00da =                       df_tmpptrd	ds	2		; Temp pointer d
00dc =                       df_tmpptre	ds	2		; Temp pointer e
AS65 Assembler for R6502 [1.42].                                     Page   14
-------------------------------- bank\bank3.s --------------------------------

00de =                       df_procmode	ds	1		; Only used during tokenisation
00df =                       df_procargs	ds	1		; Only used during tokenisation
00e0 =                       df_procloc	ds	1		; Counts the number of local par
00e1 =                       df_procptr	ds	2		; Pointer to proc vvt slot
00e3 =                       df_lineptr	ds	2		; Pointer to line during searche
00e5 =                       df_lineidx	ds	1		; Pointer to line index during s
00e6 =                       df_ifnest	ds	1		; Global nested if counter
00e7 =                       df_currdat	ds	2		; Data current line pointer
00e9 =                       df_datoff	ds	1		; Data line buffer offset
00ea =                       df_rnd		ds	2		; Random number seed
                             
00ec =                       df_asmpc	ds	2		; Assembler program counter
00ee =                       df_asmopt	ds	1		; Assembler current option
00ef =                       df_asmadmd	ds	1		; Addressing mode
00f0 =                       df_asmopcde	ds	1		; Current opcode
00f1 =                       df_asmoprnd	ds	2		; Current operand
00f3 =                       df_asmlen	ds	1		; Instruction length
                             
                             
                             
                             ;***** END OF ZERO PAGE *****
00f4 =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 and 3 is SD card buffer
0200 =                       	org 0x0200			; SD Card data buffer 512 bytes
0200 =                       sd_buf		ds	512
                             
                             ;***** Page 4,5,6,7 is IO space
0400 =                       	org 0x0400
0400 =                       			ds	1024	; 1 k area divided in to 8x128 byte de
                             
                             
                             ;***** Page 8 is serial buffer *****
0800 =                       	org 0x0800
0800 =                       ser_buf		ds	256		; Serial input / output line buf
                             
0900 =                       	org 0x0900			; Page 9 = dflat space
0900 =                       df_linbuff
0900 =                       df_raw		ds	128		; untokenised input line
0980 =                       df_tokbuff
0980 =                       df_tok		ds 	128		; tokenised output line
                             
0a00 =                       	org 0x0a00			; Page 10 = fixed space for runtime
0a00 =                       df_rtstck
0a00 =                       df_rtspace	ds	256
                             
0b00 =                       	org 0x0b00			; Page 11 = 1/2 page fixed space fo
0b00 =                       df_opstck
0b00 =                       df_opspace	ds	128
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Acticve IO device settings
0b80 =                       io_default	ds	1		; The default device number
0b81 =                       io_block	ds	io_struct
                             
                             ; File entry current dir entry
AS65 Assembler for R6502 [1.42].                                     Page   15
-------------------------------- bank\bank3.s --------------------------------

0b91 =                       fh_dir		ds	FileHandle
                             
                             ; Dflat top of memory+1 - normally initialised to
0bb9 =                       df_memtop	ds	2
                             
                             ; Scratch area e.g. string and numeric expression
0bbb =                       scratch		ds	256
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0cbb =                       mem_start
                             
                             
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0cbb =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
AS65 Assembler for R6502 [1.42].                                     Page   16
-------------------------------- bank\bank3.s --------------------------------

000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
AS65 Assembler for R6502 [1.42].                                     Page   17
-------------------------------- bank\bank3.s --------------------------------

                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_st_pushInt
                             	endm
                             
                             	include "dflat\error.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  it issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_ERROR		=	1
0002 =                       DFERR_SYNTAX	=	2
0003 =                       DFERR_RUNTIME	=	3
0004 =                       DFERR_TYPEMISM	=	4
0005 =                       DFERR_DIM		=	5
0006 =                       DFERR_UNTIL		=	6
0007 =                       DFERR_NOPROC	=	7
AS65 Assembler for R6502 [1.42].                                     Page   18
-------------------------------- bank\bank3.s --------------------------------

0008 =                       DFERR_PROCPARM	=	8
0009 =                       DFERR_IMMEDIATE	=	9
000a =                       DFERR_UNCLOSEDIF=	10
000b =                       DFERR_NOIF		=	11
000c =                       DFERR_NEXTFOR	=	12
000d =                       DFERR_FNAME		=	13
000e =                       DFERR_STRLONG	=	14
000f =                       DFERR_BREAK		=	15
0010 =                       DFERR_NODATA	=	16
0011 =                       DFERR_WEND		=	17
0012 =                       DFERR_NOLINE	=	18
0013 =                       DFERR_RETURN	=	19
0014 =                       DFERR_ABORT		=	20
0015 =                       DFERR_QUANTITY	=	21
0016 =                       DFERR_NOORG		=	22
0017 =                       DFERR_ADDRMODE	=	23
                             
                             
                             
                             	include "bank\bank.i"
c000 =                       bankjsr_nul_addr	=	0xc000
0000 =                       bankjsr_nul_bank	=	0x00
003f =                       ROM_ZMASK			=	0x3f
00cf =                       RAM_ZMASK			=	0xcf
                             
                             _bankjsr	macro	addr,bank
                             	; Save A
                             	sta tmp_bank1
                             	
                             	; Save current bank
                             	lda bank_num
                             	pha
                             	
                             	; Switch to new bank
                             	lda IO_0+PRB
                             	and #ROM_ZMASK
                             	ora #(bank^3) << 6			; Shift left 6 bits
                             	sta IO_0+PRB
                             
                             	; Restore A
                             	lda tmp_bank1
                             	; JSR to the routine
                             	jsr addr
                             	
                             	jmp _restore_bank
                             	; 62 clock cycles inc restore vs 6 for a near js
                             
                             	endm
                             	
                             _bankram macro bank
                             	pha
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	pla
                             	endm
                             	
                             _bankram_fast macro bank
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
AS65 Assembler for R6502 [1.42].                                     Page   19
-------------------------------- bank\bank3.s --------------------------------

                             	sta IO_0+PRB
                             	endm
                             	
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors lie at addresses
fffa : f7c9                  	fcw nmi				; 0xfffa : NMI Vector
fffc : 98c9                  	fcw init			; 0xfffc : Reset Vector
fffe : 20c6                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             	
                             	; ROM code
                             	code				;  
c000 =                       	org 0xc000			; Start of ROM
                             
                             	; The bank number is hardwired and aligned to PB
c000 :                       bank_num
                             	if BANK0
                             	  db 192
                             	endif
                             	if BANK1
                             	  db 128
                             	endif
                             	if BANK2
                             	  db 64
                             	endif
                             	if BANK3
c000 : 00                    	  db 0
                             	endif
                             
c001 :                       _code_start
                             	; Restore current bank always at address c001
c001 :                       _OSVectors
                             	include "kernel\osvec.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  OSVEC.S
                             ;*  Simply this is a bunch of JMP XXXX the order 
                             ;*  will always be maintained.  This is to allow 
                             ;*  code programs to be able to rely on fixed loc
                             ;*  some key low-level functions.
                             ;*  Only low level functions are needed, the idea
                             ;*  as the assembler is part of the BASIC, one ca
                             ;*  level slow stuff using BASIC then switch to M
                             ;*  speed up.
                             ;*  This code goes straight after the bank number
                             ;*  Each JMP is at 0xc001+3*(vector #)
                             ;*
                             ;************************************************
                             
c001 : 4c49c4           [ 3] 	jmp	io_put_ch			; Vec 0
c004 : 4c46c4           [ 3] 	jmp io_get_ch			; Vec 1
AS65 Assembler for R6502 [1.42].                                     Page   20
-------------------------------- bank\bank3.s --------------------------------

c007 : 4cd6c4           [ 3] 	jmp vdp_wr_reg			; Vec 2
c00a : 4c0ec5           [ 3] 	jmp vdp_poke			; Vec 3
c00d : 4c1ac5           [ 3] 	jmp vdp_peek			; Vec 4
c010 : 4c7bc5           [ 3] 	jmp snd_get_joy0		; Vec 5
c013 : 4c23c5           [ 3] 	jmp snd_set				; Vec 6
c016 : 4ce3c4           [ 3] 	jmp vdp_wr_addr			; Vec 7
c019 : 4cfac4           [ 3] 	jmp	vdp_rd_addr			; Vec 8
c01c :                       _restore_bank
                             	; Save A
c01c : 8500             [ 3] 	sta tmp_bank1
                             	; Get old bank from stack
c01e : 68               [ 4] 	pla
c01f : 8501             [ 3] 	sta tmp_bank2
c021 : ad0004           [ 4] 	lda IO_0+PRB
c024 : 293f             [ 2] 	and #ROM_ZMASK
c026 : 0501             [ 3] 	ora tmp_bank2
c028 : 8d0004           [ 4] 	sta IO_0+PRB
                             	
                             	; Restore A
c02b : a500             [ 3] 	lda tmp_bank1
                             
c02d : 60               [ 6] 	rts
                             
                             	; include cross-bank functions (see extern.mak)
                             	include "bank\autogen.s"	
                             ; 
c02e :                       mod_sz_autogen_s 
c02e :                       _df_init 
                               _bankjsr $ef9a, 1 
                             
c046 :                       _df_pg_dflat 
                               _bankjsr $d677, 1 
                             
c05e :                       _fs_chdir 
                               _bankjsr $d1e3, 2 
                             
c076 :                       _fs_delete 
                               _bankjsr $d1a9, 2 
                             
c08e :                       _fs_close 
                               _bankjsr $d188, 2 
                             
c0a6 :                       _fs_get_next_byte 
                               _bankjsr $cf13, 2 
                             
c0be :                       _fs_open_read 
                               _bankjsr $d126, 2 
                             
c0d6 :                       _fs_open_write 
                               _bankjsr $d14f, 2 
                             
c0ee :                       _fs_put_byte 
                               _bankjsr $d044, 2 
                             
c106 :                       _get_byte 
                               _bankjsr $ca78, 0 
                             
c11e :                       _put_byte 
                               _bankjsr $ca88, 0 
                             
c136 :                       _gr_get_key 
                               _bankjsr $d996, 0 
AS65 Assembler for R6502 [1.42].                                     Page   21
-------------------------------- bank\bank3.s --------------------------------

                             
c14e :                       _gr_put_byte 
                               _bankjsr $d9a3, 0 
                             
c166 :                       _gr_init_screen 
                               _bankjsr $d455, 0 
                             
c17e :                       _init_acia 
                               _bankjsr $ca95, 0 
                             
c196 :                       _init_cia0 
                               _bankjsr $ca25, 0 
                             
c1ae :                       _init_cia1 
                               _bankjsr $ca56, 0 
                             
c1c6 :                       _init_fs 
                               _bankjsr $ccc3, 2 
                             
c1de :                       _init_sdcard 
                               _bankjsr $c9f8, 2 
                             
c1f6 :                       _init_snd 
                               _bankjsr $cc6c, 0 
                             
c20e :                       _init_keyboard 
                               _bankjsr $caa3, 0 
                             
c226 :                       _kb_read_raw 
                               _bankjsr $cab2, 0 
                             
c23e :                       _command_line 
                               _bankjsr $d23e, 2 
                             
c256 :                       _fs_dir_find_entry 
                               _bankjsr $cdc4, 2 
                             
c26e :                       _fs_dir_root_start 
                               _bankjsr $cdab, 2 
                             
c286 :                       _gr_cls 
                               _bankjsr $d45f, 0 
                             
c29e :                       _gr_init_hires 
                               _bankjsr $d412, 0 
                             
c2b6 :                       _gr_line 
                               _bankjsr $d7d0, 0 
                             
c2ce :                       _gr_box 
                               _bankjsr $d610, 0 
                             
c2e6 :                       _gr_circle 
                               _bankjsr $d71b, 0 
                             
c2fe :                       _gr_plot 
                               _bankjsr $d4ca, 0 
                             
c316 :                       _gr_hchar 
                               _bankjsr $d504, 0 
                             
c32e :                       _gr_point 
AS65 Assembler for R6502 [1.42].                                     Page   22
-------------------------------- bank\bank3.s --------------------------------

                               _bankjsr $d5c5, 0 
                             
c346 :                       _gr_get 
                               _bankjsr $d4e1, 0 
                             
c35e :                       _gr_set_cur 
                               _bankjsr $d4e9, 0 
                             
c376 :                       _snd_get_note 
                               _bankjsr $cc65, 0 
                             
c38e :                       _snd_get_joy0 
                               _bankjsr $c57b, 0 
                             
c3a6 :                       _snd_set 
                               _bankjsr $c523, 0 
                             
c3be :                       _vdp_peek 
                               _bankjsr $c51a, 0 
                             
c3d6 :                       _vdp_poke 
                               _bankjsr $c50e, 0 
                             
c3ee :                       _vdp_init 
                               _bankjsr $d200, 0 
                             
c406 :                       mod_sz_autogen_e 
                             
                             	
c406 :                       mod_sz_kernel_s
                             
                             ;* Include all common code in the right order
                             	include "io\io.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.  On startup, t
                             ;*  examines the BBC DIP switch to decide whether
                             ;*  initialise the IO to serial through the ACIA 
                             ;*  the BBC keyboard for input with the VDP for o
                             ;*  Loading and saving files from the SD card is 
                             ;*  achieved by pointing to SD card get and put b
                             ;*  routines.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c406 :                       mod_sz_io_s
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   23
-------------------------------- bank\bank3.s --------------------------------

                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c406 :                       io_init
c406 : 2026c2           [ 6] 	jsr _kb_read_raw	; Check pressed key
c409 : a900             [ 2] 	lda #0				; Default = Serial
c40b : e080             [ 2] 	cpx #0x80			; f0 key pressed?
c40d : d004             [ 3] 	bne io_init_skip_f0
c40f : a901             [ 2] 	lda #1				; Default = KB/VDP
c411 : 8006             [ 3] 	bra io_init_done
c413 :                       io_init_skip_f0
c413 : e081             [ 2] 	cpx #0x81			; f1 key pressed?
c415 : d002             [ 3] 	bne io_init_done
c417 : a900             [ 2] 	lda #0				; f1 pressed = serial
c419 :                       io_init_done
c419 : 8d800b           [ 4] 	sta io_default
c41c : 4c22c4           [ 3] 	jmp io_active_device; Activate the device
                             
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c41f :                       io_set_default			; Entry point for default
c41f : ad800b           [ 4] 	lda io_default
c422 :                       io_active_device		; Entry point for A set
c422 : 0a               [ 2] 	asl	a				; x16 the Block number
c423 : 0a               [ 2] 	asl a
c424 : 0a               [ 2] 	asl a
c425 : 0a               [ 2] 	asl a
c426 : a8               [ 2] 	tay
c427 : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c429 :                       io_copy_data
c429 : b9a6c4           [ 4] 	lda io_devices,y
c42c : 9d810b           [ 5] 	sta io_block,x
c42f : c8               [ 2] 	iny
c430 : e8               [ 2] 	inx
c431 : e010             [ 2] 	cpx #16
c433 : d0f4             [ 3] 	bne io_copy_data
                             	
c435 : a900             [ 2] 	lda #lo(ser_buf)	; Initialise buffer and size
c437 : 8540             [ 3] 	sta buf_lo
c439 : a908             [ 2] 	lda #hi(ser_buf)
c43b : 8541             [ 3] 	sta buf_hi
c43d : a9ff             [ 2] 	lda #255
c43f : 8542             [ 3] 	sta buf_sz
c441 : a90d             [ 2] 	lda #UTF_CR		; Line terminator is CR
c443 : 8543             [ 3] 	sta buf_ef
c445 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
AS65 Assembler for R6502 [1.42].                                     Page   24
-------------------------------- bank\bank3.s --------------------------------

                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c446 :                       io_get_ch
c446 : 6c810b           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c449 :                       io_put_ch
c449 : 6c830b           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c44c :                       io_open_read
c44c : 6c850b           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c44f :                       io_open_write
c44f : 6c870b           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c452 :                       io_close
c452 : 6c890b           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c455 :                       io_delete
c455 : 6c8b0b           [ 6] 	jmp (io_block+io_del_f)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(lo/hi/sz/ef) : Address, Max size,
AS65 Assembler for R6502 [1.42].                                     Page   25
-------------------------------- bank\bank3.s --------------------------------

                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c458 :                       io_read_line
c458 : 48               [ 3] 	pha
                             
c459 : 08               [ 3] 	php					; Save echo state
                             	
c45a : a000             [ 2] 	ldy #0x00			; Starting at first byte
c45c :                       io_get_line_byte
c45c : 38               [ 2] 	sec					; Getting bytes synchronously
c45d : 2046c4           [ 6] 	jsr io_get_ch		; Get a byte
c460 : b027             [ 3] 	bcs io_get_line_done; Got nothing then finish
c462 : 28               [ 4] 	plp					; Get echo state
c463 : 08               [ 3] 	php					; Instantly save it back
c464 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c466 : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c468 : d005             [ 3] 	bne io_do_echo
c46a : c000             [ 2] 	cpy #0				; Already at beginning?
c46c : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c46e : 88               [ 2] 	dey					; Else decrement length
c46f :                       io_do_echo
c46f : 2049c4           [ 6] 	jsr io_put_ch		; Echo it
c472 :                       io_skip_echo
c472 : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c474 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c476 : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c478 : f003             [ 3] 	beq io_skip_special
c47a : 9140             [ 5] 	sta (buf_lo),y		; Save it
c47c : c8               [ 2] 	iny					; Increase length
c47d :                       io_skip_special
c47d : c543             [ 3] 	cmp buf_ef			; Is it the terminating char?
c47f : f008             [ 3] 	beq io_get_line_done	; If yes then done
c481 : c442             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c483 : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c485 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c486 : 38               [ 2] 	sec					; Yes, set carry flag
c487 : 68               [ 4] 	pla
c488 : 60               [ 6] 	rts					; And done
c489 :                       io_get_line_done
c489 : a900             [ 2] 	lda #0
c48b : 9140             [ 5] 	sta (buf_lo),y		; Terminate with 0
c48d : 28               [ 4] 	plp					; Remember to pull echo state off stack
c48e : 18               [ 2] 	clc					; Clear carry flag
c48f : 68               [ 4] 	pla
c490 : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c491 :                       io_print_line
c491 : 48               [ 3] 	pha
                             
c492 : 863d             [ 3] 	stx tmp_clo					; Store the string pointer
c494 : 853e             [ 3] 	sta tmp_chi					; lo and hi
c496 : a000             [ 2] 	ldy #0						; Start at the beginning!
c498 :                       io_print_line_byte
c498 : b13d             [ 5] 	lda (tmp_clo),y				; Copy byte to
AS65 Assembler for R6502 [1.42].                                     Page   26
-------------------------------- bank\bank3.s --------------------------------

c49a : f006             [ 3] 	beq io_print_done			; If zero then done - print
c49c : 2049c4           [ 6] 	jsr io_put_ch				; Transmit
c49f : c8               [ 2] 	iny
c4a0 : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c4a2 :                       io_print_done
c4a2 : 68               [ 4] 	pla
c4a3 : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c4a4 :                       io_null_op
c4a4 : 18               [ 2] 	clc
c4a5 : 60               [ 6] 	rts
                             	
                             ;* IO devices defined here
c4a6 :                       io_devices
                             ;* Device zero is the serial port
                             ;* only offers get and put
c4a6 :                       io_device0					; Serial device, input = Ser, outp
c4a6 : 06c1                  	dw	_get_byte			; io_get_ch
c4a8 : 1ec1                  	dw	_put_byte			; io_put_ch
c4aa : a4c4                  	dw	io_null_op			; io_open_r
c4ac : a4c4                  	dw	io_null_op			; io_open_w
c4ae : a4c4                  	dw	io_null_op			; io_close_f
c4b0 : a4c4                  	dw	io_null_op			; io_del_f
c4b2 : a4c4                  	dw	io_null_op			; io_ext1
c4b4 : a4c4                  	dw	io_null_op			; io_ext2
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
c4b6 :                       io_device1					; Default device, input = screen e
c4b6 : 36c1                  	dw	_gr_get_key			; io_get_ch
c4b8 : 4ec1                  	dw	_gr_put_byte		; io_put_ch
c4ba : a4c4                  	dw	io_null_op			; io_open_r
c4bc : a4c4                  	dw	io_null_op			; io_open_w
c4be : a4c4                  	dw	io_null_op			; io_close_f
c4c0 : a4c4                  	dw	io_null_op			; io_del_f
c4c2 : a4c4                  	dw	io_null_op			; io_ext1
c4c4 : a4c4                  	dw	io_null_op			; io_ext2
                             ;* Device two is the file system on SD card
                             ;* Offers all IO functions
c4c6 :                       io_device2					; SD device, input = SD, output = 
c4c6 : a6c0                  	dw	_fs_get_next_byte	; io_get_ch
c4c8 : eec0                  	dw	_fs_put_byte		; io_put_ch
c4ca : bec0                  	dw	_fs_open_read		; io_open_r
c4cc : d6c0                  	dw	_fs_open_write		; io_open_w
c4ce : 8ec0                  	dw	_fs_close			; io_close_f
c4d0 : 76c0                  	dw	_fs_delete			; io_del_f
c4d2 : a4c4                  	dw	io_null_op			; io_ext1
c4d4 : a4c4                  	dw	io_null_op			; io_ext2
                             
c4d6 :                       mod_sz_io_e
                             
                             
                             	include "kernel\vdp-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   27
-------------------------------- bank\bank3.s --------------------------------

                             ;*  VDP-LOW.S
                             ;*  Low level VDP routines which will always be p
                             ;*  every ROM bank.  This is to ensure if IRQ nee
                             ;*  no slow bank switching is needed, but also to
                             ;*	OS vectored access to VDP routines for M/C fro
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* vdp_wr_reg
                             ;* Write to Register A the value X
                             ;* Input : A - Register Number, X - Data
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c4d6 :                       vdp_wr_reg
c4d6 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c4d9 : ea               [ 2] 	nop
c4da : ea               [ 2] 	nop
c4db : 0980             [ 2] 	ora #0x80
c4dd : 8d0105           [ 4] 	sta VDP_MODE1
c4e0 : 4980             [ 2] 	eor #0x80
c4e2 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* vdp_wr_addr
                             ;* Write to address in X (low) and A (high) - for
                             ;* Input : A - Address high byte, X - Address low
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c4e3 :                       vdp_wr_addr
c4e3 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c4e6 : ea               [ 2] 	nop
c4e7 : ea               [ 2] 	nop
c4e8 : 0940             [ 2] 	ora #0x40		; Required by VDP
c4ea : 8d0105           [ 4] 	sta VDP_MODE1
c4ed : 4940             [ 2] 	eor #0x40		; Undo that bit
c4ef : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* vdp_mem_wait
                             ;* Delay some time before a memory access,
                             ;* taking in to account mode 9918 needs up
                             ;* to 3.1uS for text mode, 8uS for graphics
                             ;* I and II
                             ;* @ 5.35Mhz	= 16 cycles for 3.1uS
                             ;*				= 43 cycles for 8uS
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c4f0 :                       vdp_mem_wait
c4f0 : da               [ 3] 	phx								; 3
c4f1 : a613             [ 3] 	ldx vdp_delay					; 3
c4f3 : f003             [ 3] 	beq vdp_mem_wait_end			; 3
c4f5 :                       vdp_mem_wait_loop
c4f5 : ca               [ 2] 	dex								; 2
c4f6 : d0fd             [ 3] 	bne	vdp_mem_wait_loop			; 3
AS65 Assembler for R6502 [1.42].                                     Page   28
-------------------------------- bank\bank3.s --------------------------------

c4f8 :                       vdp_mem_wait_end
c4f8 : fa               [ 4] 	plx								; 3
c4f9 : 60               [ 6] 	rts								; 6
                             	
                             ;****************************************
                             ;* vdp_rd_addr
                             ;* Set read address 
                             ;* Input : A - high, X - low 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c4fa :                       vdp_rd_addr
c4fa : 8e0105           [ 4] 	stx VDP_MODE1
                             ; These nops are needed for fast CPU
c4fd : ea               [ 2] 	nop
c4fe : ea               [ 2] 	nop
c4ff : 8d0105           [ 4] 	sta VDP_MODE1
c502 : 80ec             [ 4] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_rd_vram
                             ;* Read VRAM byte, result in A
                             ;* Input : None
                             ;* Output : A - Byte from VRAM
                             ;* Regs affected : P
                             ;****************************************
c504 :                       vdp_rd_vram
c504 : ad0005           [ 4] 	lda VDP_VRAM
c507 : 80e7             [ 4] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_wr_vram
                             ;* Write VRAM byte in A
                             ;* Input : A - Byte to write
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c509 :                       vdp_wr_vram
c509 : 8d0005           [ 4] 	sta VDP_VRAM
c50c : 80e2             [ 4] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_poke
                             ;* Write VRAM byte in A, (YX)
                             ;* Input : A - Byte to write
                             ;*		   X = Low Address
                             ;*		   Y = High Address
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c50e :                       vdp_poke
c50e : 48               [ 3] 	pha
c50f : 98               [ 2] 	tya
c510 : 78               [ 2] 	sei
c511 : 20e3c4           [ 6] 	jsr vdp_wr_addr
c514 : 68               [ 4] 	pla
c515 : 2009c5           [ 6] 	jsr vdp_wr_vram
c518 : 58               [ 2] 	cli
c519 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_peek
AS65 Assembler for R6502 [1.42].                                     Page   29
-------------------------------- bank\bank3.s --------------------------------

                             ;* Get VRAM byte in (AX)
                             ;*		   X = Low Address
                             ;*		   A = High Address
                             ;* Output : A = byte read
                             ;* Regs affected : None
                             ;****************************************
c51a :                       vdp_peek
c51a : 78               [ 2] 	sei
c51b : 20fac4           [ 6] 	jsr vdp_rd_addr
c51e : 2004c5           [ 6] 	jsr vdp_rd_vram
c521 : 58               [ 2] 	cli
c522 : 60               [ 6] 	rts
                             
                             	include "kernel\snd-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*  Low level sound routines which will always be
                             ;*  in every ROM bank.  Mainly to provide fast OS
                             ;*	access to VDP routines for M/C from BASIC
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value Y
                             ;* Input : X = Reg no, Y = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c523 :                       snd_set
c523 : 48               [ 3] 	pha
                             
c524 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c526 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c529 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c52c : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c52f : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c531 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c533 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c536 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c538 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
c53b : 8c8104           [ 4] 	sty SND_ADBUS			; Put Y on the sound bus (Y = va
c53e : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
c540 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
c543 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c545 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c548 : 68               [ 4] 	pla
                             	
c549 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   30
-------------------------------- bank\bank3.s --------------------------------

                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X to Y
                             ;* Input : X = Reg no
                             ;* Output : Y = Value
                             ;* Regs affected : None
                             ;****************************************
c54a :                       snd_get
c54a : 48               [ 3] 	pha
                             
c54b : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c54d : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c550 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c553 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c556 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c558 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c55a : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c55d : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c55f : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c562 : a900             [ 2] 	lda #0x00				; Set Port A to input
c564 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c567 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c56a : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c56c : 0940             [ 2] 	ora #SND_SELREAD		; Select mode for reading data
c56e : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c571 : ac8104           [ 4] 	ldy SND_ADBUS			; Get value in to Y
                             	
c574 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c576 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c579 : 68               [ 4] 	pla
                             	
c57a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get_joy0
                             ;* Return value of joystick 0
                             ;* Input : None
                             ;* Output : Y = Value
                             ;* Regs affected : X
                             ;****************************************
c57b :                       snd_get_joy0
c57b : a20f             [ 2] 	ldx #SND_REG_IOB		; Joystick is plugged in to IO
c57d : 204ac5           [ 6] 	jsr snd_get				; Get IOB, result in Y
c580 : 60               [ 6] 	rts
                             
                             	include "kernel\main.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   31
-------------------------------- bank\bank3.s --------------------------------

                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
c581 :                       main
                             	_println msg_hello_world
                             
                             
c58e :                       infinity
c58e : 2046c0           [ 6] 	jsr _df_pg_dflat
c591 : 4c8ec5           [ 3] 	jmp infinity
                             
c594 :                       msg_hello_world
                             	;* build.s is generate by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel\build.s"
c594 : 4275696c64203a..       db "Build : 25/10/2020\r" 
c5a7 : 424243202d2031..       db "BBC - 128K Breadboard Computer\r" 
c5c6 : 42792040363530..       db "By @6502Nerd (Dolo Miah)\r" 
c5df : 436f7079726967..       db "Copyright (c) 2015-20\r\r",0 
                             
                             
                             	include "kernel\irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler - handles both the ver
                             ;*  blank interrupt from the VDP as well as softw
                             ;*  
                             ;*  As the handler has to be in every bank and it
                             ;*  accesses the VDP, then low level VDP routines
                             ;*  bundled in this file to ensure they are alway
                             ;*  without a bank switch being needed (which is 
                             ;************************************************
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c5f7 :                       init_irq
                             	; Core IRQ handler
c5f7 : a931             [ 2] 	lda #lo(irq)
c5f9 : 8502             [ 3] 	sta int_irq
c5fb : a9c6             [ 2] 	lda #hi(irq)
c5fd : 8503             [ 3] 	sta int_irq+1
                             	
                             	; Core BRK handler
c5ff : a95f             [ 2] 	lda #lo(irq_brk)
c601 : 8504             [ 3] 	sta int_brk
AS65 Assembler for R6502 [1.42].                                     Page   32
-------------------------------- bank\bank3.s --------------------------------

c603 : a9c6             [ 2] 	lda #hi(irq_brk)
c605 : 8505             [ 3] 	sta int_brk+1
                             
                             	; User handlers for VDP, PIA0, PIA1 interrupts
c607 : a930             [ 2] 	lda #lo(null_handler)
c609 : 8506             [ 3] 	sta int_uservdp
c60b : a9c6             [ 2] 	lda #hi(null_handler)
c60d : 8507             [ 3] 	sta int_uservdp+1
                             
c60f : a930             [ 2] 	lda #lo(null_handler)
c611 : 8508             [ 3] 	sta int_usercia0
c613 : a9c6             [ 2] 	lda #hi(null_handler)
c615 : 8509             [ 3] 	sta int_usercia0+1
                             
c617 : a930             [ 2] 	lda #lo(null_handler)
c619 : 850a             [ 3] 	sta int_usercia1
c61b : a9c6             [ 2] 	lda #hi(null_handler)
c61d : 850b             [ 3] 	sta int_usercia1+1
                             
c61f : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c620 :                       call_irq_master
c620 : 6c0200           [ 6] 	jmp (int_irq)
                             	
                             ;* Calls the BRK handler
c623 :                       call_irq_brk
c623 : 6c0400           [ 6] 	jmp (int_brk)
                             
                             ;* Call the userVDP handler
c626 :                       call_irq_uservdp
c626 : 6c0600           [ 6] 	jmp (int_uservdp)
                             	
                             ;* Call the user CIA0 handler
c629 :                       call_irq_usercia0
c629 : 6c0800           [ 6] 	jmp (int_usercia0)
                             
                             ;* Call the user CIA1 handler
c62c :                       call_irq_usercia1
c62c : 6c0a00           [ 6] 	jmp (int_usercia1)
                             	
                             ;* null interrupt
c62f :                       null_irq
c62f : 40               [ 6] 	rti
                             
                             ;* null handler
c630 :                       null_handler
c630 : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c631 :                       irq
                             	_pushAXY
                             
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c634 : ba               [ 2] 	tsx
c635 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c638 : 2910             [ 2] 	and #0x10
c63a : d0e7             [ 3] 	bne call_irq_brk
AS65 Assembler for R6502 [1.42].                                     Page   33
-------------------------------- bank\bank3.s --------------------------------

                             	
c63c : 18               [ 2] 	clc						; Standard behaviour
                             	
                             	;* Try PIA1 first for rapid Timer handling
c63d : ad8d04           [ 4] 	lda IO_1 + IFR
c640 : 1003             [ 3] 	bpl irq_check_vdp
c642 : 202cc6           [ 6] 	jsr call_irq_usercia1	; Call user cia1 handler
                             
                             	;* Try VDP next
c645 :                       irq_check_vdp	
c645 : ad0105           [ 4] 	lda VDP_STATUS			; Read status register
c648 : 1009             [ 3] 	bpl	irq_check_cia0		; Skip if not VBLANK
c64a : 2026c6           [ 6] 	jsr call_irq_uservdp	; Call use VDP handler
c64d : 20acc6           [ 6] 	jsr int_vdp_handler		; Call  OS VDP handler
c650 : 208ac6           [ 6] 	jsr int_kb_handler		; Call OS cia0 handler (keyb
                             
                             	;* Try VIA0 last as it's keyboard (low speed)
c653 :                       irq_check_cia0
c653 : ad0d04           [ 4] 	lda IO_0 + IFR
c656 : 1003             [ 3] 	bpl irq_fin
c658 : 2029c6           [ 6] 	jsr call_irq_usercia0	; Call user cia0 handler
                             
c65b :                       irq_fin
                             	_pullAXY
                             
c65e : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c65f :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c65f : 38               [ 2] 	sec
c660 : bd0501           [ 4] 	lda 0x0105,x
c663 : e902             [ 2] 	sbc #2
c665 : 85ab             [ 3] 	sta df_brkpc
c667 : bd0601           [ 4] 	lda 0x0106,x
c66a : e900             [ 2] 	sbc #0
c66c : 85ac             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c66e : a001             [ 2] 	ldy #1
c670 : b1ab             [ 5] 	lda (df_brkpc),y
c672 : 85ad             [ 3] 	sta df_brkval
c674 : 85a6             [ 3] 	sta errno
                             	; now update the return address
c676 : a5a9             [ 3] 	lda df_pc
c678 : 9d0501           [ 5] 	sta 0x105,x
c67b : a5aa             [ 3] 	lda df_pc+1
c67d : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c683 : 858e             [ 3] 	sta num_a
c685 : 868f             [ 3] 	stx num_a+1
c687 : 8490             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c689 : 40               [ 6] 	rti
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   34
-------------------------------- bank\bank3.s --------------------------------

                             ;* int_kb_handler
                             ;* Keyboard interrupt handler
                             ;****************************************
c68a :                       int_kb_handler	
c68a : a533             [ 3] 	lda kb_deb				; If keyboard pressed is debounce 
c68c : d00d             [ 3] 	bne int_skip_scan		; If not zero, then don't che
c68e : ad0d04           [ 4] 	lda IO_0 + IFR			; Check status register CIA0
c691 : 2901             [ 2] 	and #IFR_CA2			; Keyboard pressed?
c693 : f00c             [ 3] 	beq int_keys_up
c695 :                       int_do_read
c695 : 8538             [ 3] 	sta kb_pressed			; Put non-zero in to this flag
c697 : a537             [ 3] 	lda kb_debounce			; Set debounce
c699 : 8533             [ 3] 	sta kb_deb
c69b :                       int_skip_scan
c69b : a901             [ 2] 	lda #IFR_CA2			; Clear CA2
c69d : 8d0d04           [ 4] 	sta IO_0 + IFR
c6a0 : 60               [ 6] 	rts
c6a1 :                       int_keys_up					; No key pressed
c6a1 : 642f             [ 3] 	stz kb_raw				; Using 65c02 stz opcode
c6a3 : 6430             [ 3] 	stz kb_last
c6a5 : 6431             [ 3] 	stz kb_code
c6a7 : 6433             [ 3] 	stz kb_deb
c6a9 : 6434             [ 3] 	stz kb_rep
c6ab : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c6ac :                       int_vdp_handler
c6ac : 20d7c6           [ 6] 	jsr update_timers	; If it is then update system 
c6af : a50f             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c6b1 : d023             [ 3] 	bne int_vdp_fin		; Skip if so
c6b3 : a910             [ 2] 	lda #VDP_FLASH		; Check bit 5 of low timer
c6b5 : 250c             [ 3] 	and vdp_cnt
c6b7 : c510             [ 3] 	cmp vdp_curstat		; Same as curent state?
c6b9 : f01b             [ 3] 	beq int_vdp_fin		; If so no change required
c6bb : 8510             [ 3] 	sta vdp_curstat		; Save new state
                             
c6bd : 18               [ 2] 	clc					; Add offset for cursor address in vram
c6be : a528             [ 3] 	lda gr_scrngeom+gr_cur_ptr
c6c0 : 6525             [ 3] 	adc gr_scrngeom+gr_cur_off
c6c2 : aa               [ 2] 	tax
c6c3 : a529             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
c6c5 : 6900             [ 2] 	adc #0
                             
c6c7 : 20e3c4           [ 6] 	jsr vdp_wr_addr
                             	
c6ca : a50c             [ 3] 	lda vdp_cnt			; Use counter to determine normal/
c6cc : 0a               [ 2] 	asl a				; Move bit 4 to bit 7 to create inverse
c6cd : 0a               [ 2] 	asl a
c6ce : 0a               [ 2] 	asl a
c6cf : 2980             [ 2] 	and #0x80			; Only top bit is what we want
c6d1 : 4511             [ 3] 	eor vdp_curval		; EOR top bit with what is under
c6d3 : 2009c5           [ 6] 	jsr vdp_wr_vram
c6d6 :                       int_vdp_fin	
c6d6 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
AS65 Assembler for R6502 [1.42].                                     Page   35
-------------------------------- bank\bank3.s --------------------------------

                             ;****************************************
c6d7 :                       update_timers
c6d7 : e60c             [ 5] 	inc vdp_cnt
c6d9 : d006             [ 3] 	bne inc_kb_timers
c6db : e60d             [ 5] 	inc vdp_cnt_hi
c6dd : d002             [ 3] 	bne inc_kb_timers
c6df : e60e             [ 5] 	inc vdp_cnt_hi2
c6e1 :                       inc_kb_timers
c6e1 : a633             [ 3] 	ldx kb_deb			; Is debounce 0?
c6e3 : f002             [ 3] 	beq skip_kb_deb
c6e5 : c633             [ 5] 	dec kb_deb
c6e7 :                       skip_kb_deb
c6e7 : a634             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c6e9 : f002             [ 3] 	beq skip_kb_rep
c6eb : c634             [ 5] 	dec kb_rep
c6ed :                       skip_kb_rep
c6ed : 60               [ 6] 	rts
                             	
                             
                             	include "utils\misc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MISC.S
                             ;*  Miscellaneous module for commmon utility func
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* long_delay
                             ;* Long delay (X decremented every 0.125ms)
                             ;* Input : X = number of 0.125ms ticks to wait (m
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c6ee :                       long_delay
c6ee : 08               [ 3] 	php
                             	_pushAXY
                             
                             	
c6f2 : a000             [ 2] 	ldy #0x00
c6f4 :                       long_delay_1
c6f4 : ea               [ 2] 	nop
c6f5 : ea               [ 2] 	nop
c6f6 : ea               [ 2] 	nop
c6f7 : ea               [ 2] 	nop
c6f8 : 88               [ 2] 	dey
c6f9 : d0f9             [ 3] 	bne long_delay_1
c6fb : ca               [ 2] 	dex
c6fc : d0f6             [ 3] 	bne long_delay_1
                             
                             	_pullAXY
                             
c701 : 28               [ 4] 	plp
AS65 Assembler for R6502 [1.42].                                     Page   36
-------------------------------- bank\bank3.s --------------------------------

                             	
c702 : 60               [ 6] 	rts
                             
                             
                             	include "utils\utils.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c703 :                       jsrPrintA
c703 : 48               [ 3] 	pha
c704 : da               [ 3] 	phx
c705 : 2022c7           [ 6] 	jsr str_a_to_x
c708 : 2049c4           [ 6] 	jsr io_put_ch
c70b : 8a               [ 2] 	txa
c70c : 2049c4           [ 6] 	jsr io_put_ch
c70f : fa               [ 4] 	plx
c710 : 68               [ 4] 	pla
c711 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* util_clr_mem
                             ;* Clear a block of main ram
                             ;* Input : X, A = Block start, Y = Block size
                             ;* Regs affected : P
                             ;****************************************
c712 :                       util_clr_mem
c712 : 48               [ 3] 	pha
c713 : 5a               [ 3] 	phy
c714 : 8639             [ 3] 	stx tmp_alo
c716 : 853a             [ 3] 	sta tmp_ahi
c718 : a900             [ 2] 	lda #0
c71a :                       mem_clr_byte
c71a : 88               [ 2] 	dey
c71b : 9139             [ 5] 	sta (tmp_alo),y
c71d : d0fb             [ 3] 	bne mem_clr_byte
c71f : 7a               [ 4] 	ply
c720 : 68               [ 4] 	pla
c721 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   37
-------------------------------- bank\bank3.s --------------------------------

c722 :                       str_a_to_x
c722 : 48               [ 3] 	pha					; Save the byte using later on
c723 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c725 : 18               [ 2] 	clc
c726 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c728 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c72a : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c72c : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c72e :                       skip_a_f_1
c72e : aa               [ 2] 	tax					; Low char is in X
c72f : 68               [ 4] 	pla					; Get byte back
c730 : 4a               [ 2] 	lsr a				; Make high nibble low
c731 : 4a               [ 2] 	lsr a
c732 : 4a               [ 2] 	lsr a
c733 : 4a               [ 2] 	lsr a
c734 : 18               [ 2] 	clc
c735 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c737 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c739 : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c73b : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c73d :                       skip_a_f_2
                             
c73d : 18               [ 2] 	clc					; No error
c73e : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c73f :                       str_x_to_a
c73f : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c741 : 38               [ 2] 	sec					; Process high char in A
c742 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c744 : c90a             [ 2] 	cmp #10				; If A < 10 then
c746 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c748 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c74a :                       skip_x_f_1
c74a : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c74c : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c74e : 0a               [ 2] 	asl a				; This is the high nibble
c74f : 0a               [ 2] 	asl a
c750 : 0a               [ 2] 	asl a
c751 : 0a               [ 2] 	asl a
c752 : 48               [ 3] 	pha					; Save the high nibble
c753 : 8a               [ 2] 	txa					; Now process the low char in X
c754 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c756 : 38               [ 2] 	sec
c757 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c759 : c90a             [ 2] 	cmp #10				; If A < 10 then
c75b : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c75d : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c75f :                       skip_x_f_2
c75f : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c761 : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c763 : 858e             [ 3] 	sta num_a			; Store low nibble in temp
c765 : 68               [ 4] 	pla					; Get high nibble
c766 : 058e             [ 3] 	ora num_a			; OR with low nibble
AS65 Assembler for R6502 [1.42].                                     Page   38
-------------------------------- bank\bank3.s --------------------------------

                             
c768 : 18               [ 2] 	clc					; No error
c769 : 60               [ 6] 	rts					; A contains value
                             
c76a :                       str_x_to_a_errl
c76a : 68               [ 4] 	pla
c76b :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c76d :                       con_n_to_a
c76d : 869a             [ 3] 	stx num_tmp
c76f : 859b             [ 3] 	sta num_tmp+1
c771 : 648e             [ 3] 	stz num_a
c773 : 648f             [ 3] 	stz num_a+1
c775 : c000             [ 2] 	cpy #NUM_ANY
c777 : f014             [ 3] 	beq con_n_to_a_detect
c779 : 88               [ 2] 	dey
c77a : d003             [ 3] 	bne con_n_not_dec
c77c :                       con_dec_jmp
c77c : 4c10c8           [ 3] 	jmp con_dec_to_a_int
c77f :                       con_n_not_dec
c77f : 88               [ 2] 	dey
c780 : d003             [ 3] 	bne con_n_not_hex
c782 :                       con_hex_jmp
c782 : 4ca7c7           [ 3] 	jmp con_hex_to_a_int
c785 :                       con_n_not_hex
c785 : 88               [ 2] 	dey
c786 : d003             [ 3] 	bne con_n_err
c788 :                       con_bin_jmp
c788 : 4ce6c7           [ 3] 	jmp con_bin_to_a_int
c78b :                       con_n_err
c78b : 38               [ 2] 	sec
c78c : 60               [ 6] 	rts
c78d :                       con_n_to_a_detect
c78d : b29a             [ 5] 	lda (num_tmp)
c78f : c930             [ 2] 	cmp #'0'
c791 : d0e9             [ 3] 	bne con_dec_jmp
c793 : a001             [ 2] 	ldy #1
c795 : b19a             [ 5] 	lda (num_tmp),y
c797 : 0920             [ 2] 	ora #0x20
c799 : c978             [ 2] 	cmp #'x'
c79b : f0e5             [ 3] 	beq con_hex_jmp
c79d : c962             [ 2] 	cmp #'b'
c79f : f0e7             [ 3] 	beq con_bin_jmp
c7a1 : 80d9             [ 3] 	bra con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   39
-------------------------------- bank\bank3.s --------------------------------

c7a3 :                       con_hex_to_a
c7a3 : 869a             [ 3] 	stx num_tmp
c7a5 : 859b             [ 3] 	sta num_tmp+1
c7a7 :                       con_hex_to_a_int
c7a7 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c7a9 : a002             [ 2] 	ldy #2			; start at first digit
c7ab :                       con_hex_digit
c7ab : b19a             [ 5] 	lda (num_tmp),y
c7ad : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c7af : 38               [ 2] 	sec							; Process high char in A
c7b0 : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c7b2 : c90a             [ 2] 	cmp #10						; If A < 10 then
c7b4 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c7b6 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c7b8 :                       con_hex_skip_x_f_1
c7b8 : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c7ba : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c7bc : 48               [ 3] 	pha
                             	; make room for lo nibble
c7bd : 068e             [ 5] 	asl num_a
c7bf : 268f             [ 5] 	rol num_a+1
c7c1 : 068e             [ 5] 	asl num_a
c7c3 : 268f             [ 5] 	rol num_a+1
c7c5 : 068e             [ 5] 	asl num_a
c7c7 : 268f             [ 5] 	rol num_a+1
c7c9 : 068e             [ 5] 	asl num_a
c7cb : 268f             [ 5] 	rol num_a+1
                             	; save in low nibble
c7cd : 68               [ 4] 	pla
c7ce : 058e             [ 3] 	ora num_a
c7d0 : 858e             [ 3] 	sta num_a
c7d2 : c8               [ 2] 	iny
c7d3 : ca               [ 2] 	dex
c7d4 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c7d6 :                       con_hex_err
c7d6 : 38               [ 2] 	sec
c7d7 : 60               [ 6] 	rts
                             	; found a non-hex digit
c7d8 :                       con_hex_done
                             	; if no digits processed then error
c7d8 : c002             [ 2] 	cpy #2
c7da : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c7dc : 98               [ 2] 	tya
c7dd : aa               [ 2] 	tax
c7de : a902             [ 2] 	lda #NUM_HEX
c7e0 : 18               [ 2] 	clc
c7e1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c7e2 :                       con_bin_to_a
c7e2 : 869a             [ 3] 	stx num_tmp
c7e4 : 859b             [ 3] 	sta num_tmp+1
c7e6 :                       con_bin_to_a_int
c7e6 : a002             [ 2] 	ldy #2
AS65 Assembler for R6502 [1.42].                                     Page   40
-------------------------------- bank\bank3.s --------------------------------

c7e8 : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c7ea :                       con_bin_digit
c7ea : b19a             [ 5] 	lda (num_tmp),y
c7ec : c930             [ 2] 	cmp #'0'
c7ee : 9010             [ 4] 	bcc con_bin_done
c7f0 : c932             [ 2] 	cmp #'1'+1
c7f2 : b00c             [ 4] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c7f4 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c7f6 : 268e             [ 5] 	rol num_a
c7f8 : 268f             [ 5] 	rol num_a+1
c7fa : c8               [ 2] 	iny
c7fb : ca               [ 2] 	dex
c7fc : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c7fe : 800a             [ 4] 	bra con_bin_err
c800 :                       con_bin_done
                             	; didn't process any digit = error
c800 : c002             [ 2] 	cpy #2
c802 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c804 : 98               [ 2] 	tya
c805 : aa               [ 2] 	tax
c806 : a903             [ 2] 	lda #NUM_BIN
c808 : 18               [ 2] 	clc
c809 : 60               [ 6] 	rts
c80a :                       con_bin_err
c80a : 38               [ 2] 	sec
c80b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c80c :                       con_dec_to_a
c80c : 869a             [ 3] 	stx num_tmp
c80e : 859b             [ 3] 	sta num_tmp+1
c810 :                       con_dec_to_a_int
c810 : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c812 : b29a             [ 5] 	lda (num_tmp)
c814 : c92d             [ 2] 	cmp #'-'
c816 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c818 : c8               [ 2] 	iny
c819 :                       str_d_find_end
c819 : b19a             [ 5] 	lda (num_tmp),y
c81b : c930             [ 2] 	cmp #'0'
c81d : 9007             [ 3] 	bcc str_d_found_end
c81f : c93a             [ 2] 	cmp #'9'+1
c821 : b003             [ 3] 	bcs str_d_found_end
c823 : c8               [ 2] 	iny
c824 : 80f3             [ 3] 	bra str_d_find_end
c826 :                       str_d_found_end
c826 : c006             [ 2] 	cpy #6				; Biggest int is 6 chars
c828 : b04e             [ 3] 	bcs str_d_error		; e.g. -32767
c82a : 849d             [ 3] 	sty num_tmp+3
c82c : 649c             [ 3] 	stz num_tmp+2
AS65 Assembler for R6502 [1.42].                                     Page   41
-------------------------------- bank\bank3.s --------------------------------

c82e : 648e             [ 3] 	stz num_a
c830 : 648f             [ 3] 	stz num_a+1
c832 :                       str_d_process_digit
c832 : 88               [ 2] 	dey
c833 : 3026             [ 3] 	bmi str_d_digits_done
                             
c835 : b19a             [ 5] 	lda (num_tmp),y
                             
c837 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c839 : f020             [ 3] 	beq str_d_digits_done ; also done
                             
c83b : 38               [ 2] 	sec
c83c : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c83e : 18               [ 2] 	clc
c83f : 0a               [ 2] 	asl a
c840 : 659c             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c842 : aa               [ 2] 	tax
c843 : a58e             [ 3] 	lda num_a
c845 : 7d7ac8           [ 4] 	adc str_d_powers,x
c848 : 858e             [ 3] 	sta num_a
c84a : a58f             [ 3] 	lda num_a+1
c84c : 7d7bc8           [ 4] 	adc str_d_powers+1,x
c84f : 858f             [ 3] 	sta num_a+1
c851 : b025             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c853 : a59c             [ 3] 	lda num_tmp+2
c855 : 6914             [ 2] 	adc #20
c857 : 859c             [ 3] 	sta num_tmp+2
c859 : 80d7             [ 3] 	bra str_d_process_digit
c85b :                       str_d_digits_done
                             	; check if minus
c85b : b29a             [ 5] 	lda (num_tmp)
c85d : c92d             [ 2] 	cmp #'-'
c85f : d011             [ 3] 	bne str_d_skip_neg
c861 : a69d             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c863 : e002             [ 2] 	cpx #2				; else it's an error
c865 : 9011             [ 3] 	bcc str_d_error
c867 : a68e             [ 3] 	ldx num_a
c869 : a58f             [ 3] 	lda num_a+1
c86b : 20dec8           [ 6] 	jsr twos_complement
c86e : 868e             [ 3] 	stx num_a
c870 : 858f             [ 3] 	sta num_a+1
c872 :                       str_d_skip_neg
c872 : a69d             [ 3] 	ldx num_tmp+3
c874 : a901             [ 2] 	lda #NUM_DEC
c876 : 18               [ 2] 	clc
c877 : 60               [ 6] 	rts
c878 :                       str_d_error
c878 : 38               [ 2] 	sec
c879 : 60               [ 6] 	rts
                             
c87a :                       str_d_powers
c87a : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c88e : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c8a2 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c8b6 : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c8ca : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
AS65 Assembler for R6502 [1.42].                                     Page   42
-------------------------------- bank\bank3.s --------------------------------

                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
c8de :                       twos_complement
c8de : 49ff             [ 2] 	eor #0xff
c8e0 : 48               [ 3] 	pha
c8e1 : 8a               [ 2] 	txa
c8e2 : 49ff             [ 2] 	eor #0xff
c8e4 : aa               [ 2] 	tax
c8e5 : 68               [ 4] 	pla
c8e6 : e8               [ 2] 	inx
c8e7 : d001             [ 3] 	bne twos_complement_skip_X
c8e9 : 1a               [ 2] 	inc a
c8ea :                       twos_complement_skip_X
c8ea : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* hex_to_bcd
                             ;* Convert accumulator,X to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : P
                             ;****************************************
c8eb :                       hex_to_bcd
c8eb : 08               [ 3] 	php
c8ec : 48               [ 3] 	pha
c8ed : da               [ 3] 	phx
                             
c8ee : 869a             [ 3] 	stx num_tmp
c8f0 : 859b             [ 3] 	sta num_tmp+1
c8f2 : c980             [ 2] 	cmp #0x80			; Negative?
c8f4 : 9003             [ 3] 	bcc hex_to_bcd_skip_neg
c8f6 : 20dec8           [ 6] 	jsr twos_complement
c8f9 :                       hex_to_bcd_skip_neg
c8f9 : 648e             [ 3] 	stz num_a
c8fb : 648f             [ 3] 	stz num_a+1
c8fd : 6490             [ 3] 	stz num_a+2
c8ff : 6491             [ 3] 	stz num_a+3
c901 : a210             [ 2] 	ldx #16
c903 : f8               [ 2] 	sed
c904 :                       bin_to_bcd_bit
c904 : 069a             [ 5] 	asl num_tmp
c906 : 269b             [ 5] 	rol num_tmp+1
c908 : a58e             [ 3] 	lda num_a
c90a : 658e             [ 3] 	adc num_a
c90c : 858e             [ 3] 	sta num_a
c90e : a58f             [ 3] 	lda num_a+1
c910 : 658f             [ 3] 	adc num_a+1
c912 : 858f             [ 3] 	sta num_a+1
c914 : a590             [ 3] 	lda num_a+2
c916 : 6590             [ 3] 	adc num_a+2
c918 : 8590             [ 3] 	sta num_a+2
c91a : ca               [ 2] 	dex
c91b : d0e7             [ 3] 	bne bin_to_bcd_bit
                             	
c91d : fa               [ 4] 	plx
AS65 Assembler for R6502 [1.42].                                     Page   43
-------------------------------- bank\bank3.s --------------------------------

c91e : 68               [ 4] 	pla
c91f : 28               [ 4] 	plp
c920 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c921 :                       bcd_to_str
c921 : 48               [ 3] 	pha
c922 : da               [ 3] 	phx
c923 : 5a               [ 3] 	phy
                             
c924 : a205             [ 2] 	ldx #5						; Index in to string
c926 : a000             [ 2] 	ldy #0						; Current BCD digit
c928 :                       bcd_str
c928 : b98e00           [ 4] 	lda num_a,y
                             	; Convert 1s digit of byte
c92b : 48               [ 3] 	pha
c92c : 290f             [ 2] 	and #0xf
c92e : 18               [ 2] 	clc
c92f : 6930             [ 2] 	adc #0x30
c931 : 959e             [ 4] 	sta num_buf,x
                             	; Convert 10s digit of byte
c933 : 68               [ 4] 	pla
c934 : 4a               [ 2] 	lsr a
c935 : 4a               [ 2] 	lsr a
c936 : 4a               [ 2] 	lsr a
c937 : 4a               [ 2] 	lsr a
c938 : 18               [ 2] 	clc
c939 : 6930             [ 2] 	adc #0x30					; Convert to ASCII
c93b : 959d             [ 4] 	sta num_buf-1,x
c93d : ca               [ 2] 	dex
c93e : ca               [ 2] 	dex
c93f : c8               [ 2] 	iny
c940 : c003             [ 2] 	cpy #3						; 3 BCD digits max
c942 : d0e4             [ 3] 	bne bcd_str
                             
c944 : 7a               [ 4] 	ply
c945 : fa               [ 4] 	plx
c946 : 68               [ 4] 	pla
c947 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
c948 :                       out_bcd
c948 : 48               [ 3] 	pha
c949 : da               [ 3] 	phx
c94a : 08               [ 3] 	php
c94b : a000             [ 2] 	ldy #0						; How many digits printed
c94d : a200             [ 2] 	ldx #0						; Index in to string
AS65 Assembler for R6502 [1.42].                                     Page   44
-------------------------------- bank\bank3.s --------------------------------

c94f :                       out_bcd_digit
c94f : b59e             [ 4] 	lda num_buf,x
c951 : c000             [ 2] 	cpy #0						; If not in leading zero mode
c953 : d008             [ 3] 	bne out_bcd_print			; No then go print
                             
c955 : c930             [ 2] 	cmp #'0'					; else check if zero
c957 : d004             [ 3] 	bne out_bcd_print			; No then go print
                             
c959 : 28               [ 4] 	plp
c95a : 08               [ 3] 	php
c95b : 9004             [ 3] 	bcc out_bcd_next			; If C=0 go to next digit, el
c95d :                       out_bcd_print
c95d : c8               [ 2] 	iny
c95e : 2049c4           [ 6] 	jsr io_put_ch
c961 :                       out_bcd_next
c961 : e8               [ 2] 	inx
c962 : e006             [ 2] 	cpx #6
c964 : d0e9             [ 3] 	bne out_bcd_digit
c966 : c000             [ 2] 	cpy #0						; If nothing printed
c968 : d006             [ 3] 	bne out_bcd_fin
c96a : a930             [ 2] 	lda #'0'					; Need to put out 1 zero
c96c : 2049c4           [ 6] 	jsr io_put_ch
c96f : c8               [ 2] 	iny
c970 :                       out_bcd_fin
c970 : 28               [ 4] 	plp
c971 : fa               [ 4] 	plx
c972 : 68               [ 4] 	pla
c973 : 18               [ 2] 	clc
c974 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
c975 :                       print_a_to_d
c975 : 08               [ 3] 	php
c976 : 8980             [ 2] 	bit #0x80					; Check if sign bit is set
c978 : 1014             [ 3] 	bpl print_a_to_d_skip_neg	; Skip if not (postive
c97a : 20dec8           [ 6] 	jsr twos_complement			; Flip from 2s complement
c97d : a92d             [ 2] 	lda #'-'
c97f : 2049c4           [ 6] 	jsr io_put_ch
c982 : 20ebc8           [ 6] 	jsr hex_to_bcd				; Convert to BCD
c985 : 2021c9           [ 6] 	jsr bcd_to_str				; Convert BCD to string
c988 : 28               [ 4] 	plp							; Leading zeros preference
c989 : 2048c9           [ 6] 	jsr out_bcd
c98c : c8               [ 2] 	iny							; Account for sign
c98d : 60               [ 6] 	rts
c98e :                       print_a_to_d_skip_neg
c98e : 20ebc8           [ 6] 	jsr hex_to_bcd				; Convert to BCD
c991 : 2021c9           [ 6] 	jsr bcd_to_str				; Convert BCD to string
c994 : 28               [ 4] 	plp							; Leading zeros preference
c995 : 4c48c9           [ 3] 	jmp out_bcd					; Print +ve string
                             
                             
                             ;* Reset vector points here - 6502 starts here
AS65 Assembler for R6502 [1.42].                                     Page   45
-------------------------------- bank\bank3.s --------------------------------

c998 :                       init
                             ;	jmp init_test
                             	; First clear ram
                             ;	sei					; No need as disabled on startup
c998 : 4ccec9           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
c99b :                       init_2					; init_ram will jump back to here
c99b : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
c99d : 9a               [ 2] 	txs
                             ;	cld					; No need as disabled on startup
                             	
c99e : 20a4c9           [ 6] 	jsr kernel_init
                             
c9a1 : 4c81c5           [ 3] 	jmp main
                             
c9a4 :                       kernel_init
c9a4 : 20f7c5           [ 6] 	jsr init_irq		; Initialise IRQ handling
c9a7 : 207ec1           [ 6] 	jsr _init_acia		; initialise the serial chip
                             	
c9aa : 2096c1           [ 6] 	jsr _init_cia0		; initialise cia 0
c9ad : 20aec1           [ 6] 	jsr _init_cia1		; initialise cia 1
                             
c9b0 :                       kernel_test
c9b0 : 20f6c1           [ 6] 	jsr _init_snd		; initialise the sound chip
c9b3 : 200ec2           [ 6] 	jsr _init_keyboard	; initialise keyboard timer s
c9b6 : 20eec3           [ 6] 	jsr _vdp_init		; initialise vdp
c9b9 : a900             [ 2] 	lda #0				; Default = 40 column mode
c9bb : 2066c1           [ 6] 	jsr _gr_init_screen
c9be : 2006c4           [ 6] 	jsr io_init			; Set default input/output device
c9c1 : 20dec1           [ 6] 	jsr _init_sdcard	; initialise the sd card interf
c9c4 : 20c6c1           [ 6] 	jsr _init_fs		; initialise the filesystem
c9c7 : 640c             [ 3] 	stz vdp_cnt
c9c9 : 202ec0           [ 6] 	jsr _df_init		; Initialise interpreter
                             
c9cc : 58               [ 2] 	cli					; irq interrupts enable
                             
c9cd : 60               [ 6] 	rts
                             
                             	
                             ;* Initialises RAM, skipping pages 4-8 which are 
                             ;* Zeroes all addressable RAM in the default bank
c9ce :                       init_ram
c9ce : 6400             [ 3] 	stz 0x00			; Start at page 0
c9d0 : 6401             [ 3] 	stz 0x01
c9d2 : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
c9d4 : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
c9d6 :                       init_ram_1
c9d6 : e004             [ 2] 	cpx	#4				; Page <4 is ok
c9d8 : 9006             [ 3] 	bcc init_ram_fill
c9da : e008             [ 2] 	cpx #8				; Page >=8 is ok
c9dc : b002             [ 3] 	bcs init_ram_fill
c9de : 800a             [ 3] 	bra init_ram_skip
c9e0 :                       init_ram_fill
c9e0 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
c9e2 : e0c0             [ 2] 	cpx #0xc0			; but page 0xC0-0xFF copied from ROM
c9e4 : 9002             [ 3] 	bcc init_ram_zero
c9e6 : b100             [ 5] 	lda (0x00),y		; Read from ROM area
c9e8 :                       init_ram_zero
c9e8 : 9100             [ 5] 	sta (0x00),y		; Write byte to RAM (zero or copy 
c9ea :                       init_ram_skip
c9ea : c8               [ 2] 	iny
c9eb : d0e9             [ 3] 	bne init_ram_1		; Do a whole page
c9ed : e601             [ 5] 	inc 0x01			; Increase page pointer
AS65 Assembler for R6502 [1.42].                                     Page   46
-------------------------------- bank\bank3.s --------------------------------

c9ef : e8               [ 2] 	inx					; Reduce page count
c9f0 : e000             [ 2] 	cpx #0x00			; Do all pages until page 0xff done 
c9f2 : d0e2             [ 3] 	bne init_ram_1
                             	
c9f4 : 4c9bc9           [ 3] 	jmp init_2			; Carry on initialisation
                             
                             ; 6502 Non-maskable interrupt come here
c9f7 :                       nmi
c9f7 : 40               [ 6] 	rti
                             
c9f8 :                       mod_sz_kernel_e
                             
                             
                             
                             ; Bank specific code goes here
                             
                             	; End of Code
c9f8 :                       _code_end
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
