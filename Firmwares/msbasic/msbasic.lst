ca65 V2.18 - Ubuntu 2.19-1
Main file   : msbasic.s
Current file: msbasic.s

000000r 1               ; Microsoft BASIC for 6502
000000r 1               ;
000000r 1               ; (first revision of this distribution, 20 Oct 2008, Michael Steil www.pagetable.com)
000000r 1               ;
000000r 1               ; This is a single integrated assembly source tree that can generate seven different versions of
000000r 1               ; Microsoft BASIC for 6502.
000000r 1               ;
000000r 1               ; By running ./make.sh, this will generate all versions and compare them to the original files
000000r 1               ; byte by byte. The CC65 compiler suite is need to build this project.
000000r 1               ;
000000r 1               ; These are the first eight (known) versions of Microsoft BASIC for 6502:
000000r 1               ;
000000r 1               ; Name                 Release   MS Version    ROM   9digit  INPUTBUFFER   extensions   .define
000000r 1               ;---------------------------------------------------------------------------------------------------
000000r 1               ; Commodore BASIC 1     1977                    Y      Y          ZP          CBM
000000r 1               ; OSI BASIC             1977     1.0 REV 3.2    Y      N          ZP            -        CONFIG_10A
000000r 1               ; AppleSoft I           1977     1.1            N      Y        $0200         Apple      CONFIG_11
000000r 1               ; KIM BASIC             1977     1.1            N      Y          ZP            -        CONFIG_11A
000000r 1               ; AppleSoft II          1978                    Y      Y        $0200         Apple      CONFIG_2
000000r 1               ; Commodore BASIC 2     1979                    Y      Y        $0200          CBM       CONFIG_2A
000000r 1               ; KBD BASIC             1982                    Y      N        $0700          KBD       CONFIG_2B
000000r 1               ; MicroTAN              1980                    Y      Y          ZP            -        CONFIG_2C
000000r 1               ;
000000r 1               ; (Note that this assembly source cannot (yet) build AppleSoft II.)
000000r 1               ;
000000r 1               ; This lists the versions in the order in which they were forked from the Microsoft source base.
000000r 1               ; Commodore BASIC 1, as used on the original PET is the oldest known version of Microsoft BASIC
000000r 1               ; for 6502. It contains some additions to Microsoft's version, like Commodore-style file I/O.
000000r 1               ;
000000r 1               ; The CONFIG_n defines specify what Microsoft-version the OEM version is based on. If CONFIG_2B
000000r 1               ; is defined, for example, CONFIG_2A, CONFIG_2, CONFIG_11A, CONFIG_11 and CONFIG_10A will be
000000r 1               ; defined as well, and all bugfixes up to version 2B will be enabled.
000000r 1               ;
000000r 1               ; The following symbols can be defined in addition:
000000r 1               ;
000000r 1               ; CONFIG_CBM1_PATCHES				jump out into CBM1's binary patches instead of doing the right thing inline
000000r 1               ; CONFIG_CBM_ALL					add all Commodore-specific additions except file I/O
000000r 1               ; CONFIG_DATAFLG					?
000000r 1               ; CONFIG_EASTER_EGG					include the CBM2 "WAIT 6502" easter egg
000000r 1               ; CONFIG_FILE						support Commodore PRINT#, INPUT#, GET#, CMD
000000r 1               ; CONFIG_IO_MSB						all I/O has bit #7 set
000000r 1               ; CONFIG_MONCOUT_DESTROYS_Y			Y needs to be preserved when calling MONCOUT
000000r 1               ; CONFIG_NO_CR						terminal doesn't need explicit CRs on line ends
000000r 1               ; CONFIG_NO_LINE_EDITING			disable support for Microsoft-style "@", "_", BEL etc.
000000r 1               ; CONFIG_NO_POKE					don't support PEEK, POKE and WAIT
000000r 1               ; CONFIG_NO_READ_Y_IS_ZERO_HACK		don't do a very volatile trick that saves one byte
000000r 1               ; CONFIG_NULL						support for the NULL statement
000000r 1               ; CONFIG_PEEK_SAVE_LINNUM			preserve LINNUM on a PEEK
000000r 1               ; CONFIG_PRINTNULLS					whether PRINTNULLS does anything
000000r 1               ; CONFIG_PRINT_CR					print CR when line end reached
000000r 1               ; CONFIG_RAM						optimizations for RAM version of BASIC, only use on 1.x
000000r 1               ; CONFIG_ROR_WORKAROUND				use workaround for buggy 6502s from 1975/1976; not safe for CONFIG_SMALL!
000000r 1               ; CONFIG_SAFE_NAMENOTFOUND			check both bytes of the caller's address in NAMENOTFOUND
000000r 1               ; CONFIG_SCRTCH_ORDER				where in the init code to call SCRTCH
000000r 1               ; CONFIG_SMALL						use 6 digit FP instead of 9 digit, use 2 character error messages, don't have GET
000000r 1               ;
000000r 1               ; Changing symbol definitions can alter an existing base configuration, but it not guaranteed to assemble
000000r 1               ; or work correctly.
000000r 1               ;
000000r 1               ; Credits:
000000r 1               ; * main work by Michael Steil
000000r 1               ; * function names and all uppercase comments taken from Bob Sander-Cederlof's excellent AppleSoft II disassembly:
000000r 1               ;   http://www.txbobsc.com/scsc/scdocumentor/
000000r 1               ; * Applesoft lite by Tom Greene http://cowgod.org/replica1/applesoft/ helped a lot, too.
000000r 1               ; * Thanks to Joe Zbicak for help with Intellision Keyboard BASIC
000000r 1               ; * This work is dedicated to the memory of my dear hacking pal Michael "acidity" Kollmann.
000000r 1               
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               .include "defines.s"
000000r 2               .if .def(cbmbasic1)
000000r 2               CBM1 := 1
000000r 2               .include "defines_cbm1.s"
000000r 2               .elseif .def(osi)
000000r 2               OSI := 1
000000r 2               .include "defines_osi.s"
000000r 3               ; configuration
000000r 3               CONFIG_10A := 1
000000r 3               
000000r 3               CONFIG_DATAFLG := 1
000000r 3               CONFIG_NULL := 1
000000r 3               CONFIG_PRINT_CR := 1 ; print CR when line end reached
000000r 3               CONFIG_SCRTCH_ORDER := 3
000000r 3               CONFIG_SMALL := 1
000000r 3               
000000r 3               CRLF_1 := CR
000000r 3               CRLF_2 := $00
000000r 3               
000000r 3               ; zero page
000000r 3               ZP_START1 = $00
000000r 3               ZP_START2 = $0D
000000r 3               ZP_START3 = $60
000000r 3               ZP_START4 = $70
000000r 3               ZP_START5 = $E0 ;This is where the biosmon put its variables
000000r 3               
000000r 3               ;extra ZP variables
000000r 3               USR             := $000A
000000r 3               
000000r 3               ; constants
000000r 3               STACK_TOP		:= $FC
000000r 3               SPACE_FOR_GOSUB := $33
000000r 3               NULL_MAX		:= $0A
000000r 3               WIDTH			:= 80
000000r 3               WIDTH2			:= 80
000000r 3               
000000r 3               ; memory layout
000000r 3               RAMSTART2		:= $0300
000000r 3               
000000r 3               ; magic memory locations
000000r 3               L0200           := $0200
000000r 3               
000000r 3               ; monitor functions
000000r 3               ;MONRDKEY        := $FFEB
000000r 3               MONCOUT         :=  WRITE_BYTE
000000r 3               ;MONISCNTC       := $FFF1
000000r 3               ;LOAD            := $FFF4
000000r 3               ;SAVE            := $FFF7
000000r 3               
000000r 2               .elseif .def(applesoft)
000000r 2               APPLE := 1
000000r 2               .include "defines_apple.s"
000000r 2               .elseif .def(kb9)
000000r 2               KIM := 1
000000r 2               .include "defines_kim.s"
000000r 2               .elseif .def(cbmbasic2)
000000r 2               CBM2 := 1
000000r 2               .include "defines_cbm2.s"
000000r 2               .elseif .def(kbdbasic)
000000r 2               KBD := 1
000000r 2               .include "defines_kbd.s"
000000r 2               .elseif .def(microtan)
000000r 2               MICROTAN := 1
000000r 2               .include "defines_microtan.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_2C
000000r 2               CONFIG_2B := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2B
000000r 2               CONFIG_2A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2A
000000r 2               CONFIG_2 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2
000000r 2               CONFIG_11A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11A
000000r 2               CONFIG_11 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11
000000r 2               CONFIG_10A := 1
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2               BYTES_FP		:= 4
000000r 2               .else
000000r 2               BYTES_FP		:= 5
000000r 2               .endif
000000r 2               
000000r 2               .ifndef BYTES_PER_ELEMENT
000000r 2               BYTES_PER_ELEMENT := BYTES_FP
000000r 2               .endif
000000r 2               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 2               MANTISSA_BYTES	:= BYTES_FP-1
000000r 2               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 2               FOR_STACK1		:= 2*BYTES_FP+5
000000r 2               FOR_STACK2		:= BYTES_FP+4
000000r 2               
000000r 2               .ifndef MAX_EXPON
000000r 2               MAX_EXPON = 10
000000r 2               .endif
000000r 2               
000000r 2               STACK           := $0100
000000r 2               
000000r 2               .ifdef INPUTBUFFER
000000r 2                 .if INPUTBUFFER >= $0100
000000r 2               CONFIG_NO_INPUTBUFFER_ZP := 1
000000r 2                 .endif
000000r 2                 .if INPUTBUFFER = $0200
000000r 2               CONFIG_INPUTBUFFER_0200 := 1
000000r 2                 .endif
000000r 2               .endif
000000r 2               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 2               
000000r 2               CR=13
000000r 2               LF=10
000000r 2               
000000r 2               .ifndef CRLF_1
000000r 2               CRLF_1 := CR
000000r 2               CRLF_2 := LF
000000r 2               .endif
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               .include "macros.s"
000000r 2               ; htasc - set the hi bit on the last byte of a string for termination
000000r 2               ; (by Tom Greene)
000000r 2               .macro htasc str
000000r 2               	.repeat	.strlen(str)-1,I
000000r 2               		.byte	.strat(str,I)
000000r 2               	.endrep
000000r 2               	.byte	.strat(str,.strlen(str)-1) | $80
000000r 2               .endmacro
000000r 2               
000000r 2               ; For every token, a byte gets put into segment "DUMMY".
000000r 2               ; This way, we count up with every token. The DUMMY segment
000000r 2               ; doesn't get linked into the binary.
000000r 2               .macro init_token_tables
000000r 2                       .segment "VECTORS"
000000r 2               TOKEN_ADDRESS_TABLE:
000000r 2                       .segment "KEYWORDS"
000000r 2               TOKEN_NAME_TABLE:
000000r 2               		.segment "DUMMY"
000000r 2               DUMMY_START:
000000r 2               .endmacro
000000r 2               
000000r 2               ; optionally define token symbol
000000r 2               ; count up token number
000000r 2               .macro define_token token
000000r 2                       .segment "DUMMY"
000000r 2               		.ifnblank token
000000r 2               			token := <(*-DUMMY_START)+$80
000000r 2               		.endif
000000r 2               		.res 1; count up in any case
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword, optionally define a token symbol
000000r 2               .macro keyword key, token
000000r 2               		.segment "KEYWORDS"
000000r 2               		htasc	key
000000r 2               		define_token token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address (RTS style),
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_rts key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.word	vec-1
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address,
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_addr key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.addr	vec
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               .macro count_tokens
000000r 2                       .segment "DUMMY"
000000r 2               		NUM_TOKENS := <(*-DUMMY_START)
000000r 2               .endmacro
000000r 2               
000000r 2               .macro init_error_table
000000r 2                       .segment "ERROR"
000000r 2               ERROR_MESSAGES:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro define_error error, msg
000000r 2                       .segment "ERROR"
000000r 2               		error := <(*-ERROR_MESSAGES)
000000r 2               		htasc msg
000000r 2               .endmacro
000000r 2               
000000r 2               ;---------------------------------------------
000000r 2               ; set the MSB of every byte of a string
000000r 2               .macro asc80 str
000000r 2               	.repeat	.strlen(str),I
000000r 2               		.byte	.strat(str,I)+$80
000000r 2               	.endrep
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               .include "zeropage.s"
000000r 2               
000000r 2               .feature org_per_seg
000000r 2               .zeropage
000000r 2               
000000r 2               .org ZP_START1
000000  2               
000000  2               GORESTART:
000000  2  xx xx xx     	.res 3
000003  2               GOSTROUT:
000003  2  xx xx xx     	.res 3
000006  2               GOAYINT:
000006  2  xx xx        	.res 2
000008  2               GOGIVEAYF:
000008  2  xx xx        	.res 2
00000A  2               
00000A  2               .org ZP_START2
00000D  2               Z15:
00000D  2  xx           	.res 1
00000E  2               .ifndef POSX; allow override
00000E  2               POSX:
00000E  2               .endif
00000E  2  xx           	.res 1
00000F  2               .ifndef Z17; allow override
00000F  2               Z17:
00000F  2               .endif
00000F  2  xx           	.res 1
000010  2               .ifndef Z18; allow override
000010  2               Z18:
000010  2               .endif
000010  2  xx           	.res 1
000011  2               LINNUM:
000011  2               .ifndef TXPSV; allow override
000011  2               TXPSV:
000011  2               .endif
000011  2  xx xx        	.res 2
000013  2               .ifndef INPUTBUFFER; allow override
000013  2               INPUTBUFFER:
000013  2               .endif
000013  2               
000013  2               .org ZP_START3
000060  2               
000060  2               CHARAC:
000060  2  xx           	.res 1
000061  2               ENDCHR:
000061  2  xx           	.res 1
000062  2               EOLPNTR:
000062  2  xx           	.res 1
000063  2               DIMFLG:
000063  2  xx           	.res 1
000064  2               VALTYP:
000064  2               .ifdef CONFIG_SMALL
000064  2  xx           	.res 1
000065  2               .else
000065  2               	.res 2
000065  2               .endif
000065  2               DATAFLG:
000065  2  xx           	.res 1
000066  2               SUBFLG:
000066  2  xx           	.res 1
000067  2               INPUTFLG:
000067  2  xx           	.res 1
000068  2               CPRMASK:
000068  2  xx           	.res 1
000069  2               Z14:
000069  2  xx           	.res 1
00006A  2               
00006A  2               .org ZP_START4
000070  2               
000070  2               TEMPPT:
000070  2  xx           	.res 1
000071  2               LASTPT:
000071  2  xx xx        	.res 2
000073  2               TEMPST:
000073  2  xx xx xx xx  	.res 9
000077  2  xx xx xx xx  
00007B  2  xx           
00007C  2               INDEX:
00007C  2  xx xx        	.res 2
00007E  2               DEST:
00007E  2  xx xx        	.res 2
000080  2               RESULT:
000080  2  xx xx xx xx  	.res BYTES_FP
000084  2               RESULT_LAST = RESULT + BYTES_FP-1
000084  2               TXTTAB:
000084  2  xx xx        	.res 2
000086  2               VARTAB:
000086  2  xx xx        	.res 2
000088  2               ARYTAB:
000088  2  xx xx        	.res 2
00008A  2               STREND:
00008A  2  xx xx        	.res 2
00008C  2               FRETOP:
00008C  2  xx xx        	.res 2
00008E  2               FRESPC:
00008E  2  xx xx        	.res 2
000090  2               MEMSIZ:
000090  2  xx xx        	.res 2
000092  2               CURLIN:
000092  2  xx xx        	.res 2
000094  2               OLDLIN:
000094  2  xx xx        	.res 2
000096  2               OLDTEXT:
000096  2  xx xx        	.res 2
000098  2               Z8C:
000098  2  xx xx        	.res 2
00009A  2               DATPTR:
00009A  2  xx xx        	.res 2
00009C  2               INPTR:
00009C  2  xx xx        	.res 2
00009E  2               VARNAM:
00009E  2  xx xx        	.res 2
0000A0  2               VARPNT:
0000A0  2  xx xx        	.res 2
0000A2  2               FORPNT:
0000A2  2  xx xx        	.res 2
0000A4  2               LASTOP:
0000A4  2  xx xx        	.res 2
0000A6  2               CPRTYP:
0000A6  2  xx           	.res 1
0000A7  2               FNCNAM:
0000A7  2               TEMP3:
0000A7  2  xx xx        	.res 2
0000A9  2               DSCPTR:
0000A9  2               .ifdef CONFIG_SMALL
0000A9  2  xx xx        		.res 2
0000AB  2               .else
0000AB  2               		.res 3
0000AB  2               .endif
0000AB  2               DSCLEN:
0000AB  2  xx xx        	.res 2
0000AD  2               .ifndef JMPADRS ; allow override
0000AD  2               JMPADRS			:= DSCLEN + 1
0000AD  2               .endif
0000AD  2               Z52:
0000AD  2  xx           	.res 1
0000AE  2               ARGEXTENSION:
0000AE  2               .ifndef CONFIG_SMALL
0000AE  2               	.res 1
0000AE  2               .endif
0000AE  2               TEMP1:
0000AE  2  xx           	.res 1
0000AF  2               HIGHDS:
0000AF  2  xx xx        	.res 2
0000B1  2               HIGHTR:
0000B1  2  xx xx        	.res 2
0000B3  2               .ifndef CONFIG_SMALL
0000B3  2               TEMP2:
0000B3  2               	.res 1
0000B3  2               .endif
0000B3  2               INDX:
0000B3  2               TMPEXP:
0000B3  2               .ifdef CONFIG_SMALL
0000B3  2               TEMP2:
0000B3  2               .endif
0000B3  2  xx           	.res 1
0000B4  2               EXPON:
0000B4  2  xx           	.res 1
0000B5  2               LOWTR:
0000B5  2               .ifndef LOWTRX ; allow override
0000B5  2               LOWTRX:
0000B5  2               .endif
0000B5  2  xx           	.res 1
0000B6  2               EXPSGN:
0000B6  2  xx           	.res 1
0000B7  2               FAC:
0000B7  2  xx xx xx xx  	.res BYTES_FP
0000BB  2               FAC_LAST = FAC + BYTES_FP-1
0000BB  2               FACSIGN:
0000BB  2  xx           	.res 1
0000BC  2               SERLEN:
0000BC  2  xx           	.res 1
0000BD  2               SHIFTSIGNEXT:
0000BD  2  xx           	.res 1
0000BE  2               ARG:
0000BE  2  xx xx xx xx  	.res BYTES_FP
0000C2  2               ARG_LAST = ARG + BYTES_FP-1
0000C2  2               ARGSIGN:
0000C2  2  xx           	.res 1
0000C3  2               STRNG1:
0000C3  2  xx xx        	.res 2
0000C5  2               SGNCPR = STRNG1
0000C5  2               FACEXTENSION = STRNG1+1
0000C5  2               STRNG2:
0000C5  2  xx xx        	.res 2
0000C7  2               CHRGET:
0000C7  2               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000C7  2               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000C7  2               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000C7  2               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000C7  2               
0000C7  2               
0000C7  1               
0000C7  1               .include "header.s"
0000C7  2               		.segment "HEADER"
000000r 2               .ifdef KBD
000000r 2                       jmp     LE68C
000000r 2                       .byte   $00,$13,$56
000000r 2               .endif
000000r 2               
000000r 2               .ifdef OSI
000000r 2  4C rr rr             JMP     COLD_START
000003r 2               .endif
000003r 2               
000003r 1               .include "token.s"
000003r 2               		init_token_tables
000000r 2               
000000r 2  rr rr 64 75  		keyword_rts "dump", dump
000004r 2  6D F0 xx     
000001r 2  rr rr 44 55  		keyword_rts "DUMP", DUMP
000005r 2  4D D0 xx     
000002r 2  rr rr 4D 59  		keyword_rts "MYCMD", MYCMD
000006r 2  43 4D C4 xx  
000003r 2  rr rr 45 4E  		keyword_rts "END", END
000007r 2  C4 xx        
000004r 2  rr rr 46 4F  		keyword_rts "FOR", FOR
000008r 2  D2 xx        
000005r 2  rr rr 4E 45  		keyword_rts "NEXT", NEXT
000009r 2  58 D4 xx     
000006r 2  rr rr 44 41  		keyword_rts "DATA", DATA
00000Ar 2  54 C1 xx     
000007r 2               .ifdef CONFIG_FILE
000007r 2               		keyword_rts "INPUT#", INPUTH
000007r 2               .endif
000007r 2  rr rr 49 4E  		keyword_rts "INPUT", INPUT
00000Br 2  50 55 D4 xx  
000008r 2  rr rr 44 49  		keyword_rts "DIM", DIM
00000Cr 2  CD xx        
000009r 2  rr rr 52 45  		keyword_rts "READ", READ
00000Dr 2  41 C4 xx     
00000Ar 2               .ifdef APPLE
00000Ar 2               		keyword_rts "PLT", PLT
00000Ar 2               .else
00000Ar 2  rr rr 4C 45  		keyword_rts "LET", LET
00000Er 2  D4 xx        
00000Br 2               .endif
00000Br 2  rr rr 47 4F  		keyword_rts "GOTO", GOTO, TOKEN_GOTO
00000Fr 2  54 CF xx     
00000Cr 2  rr rr 52 55  		keyword_rts "RUN", RUN
000010r 2  CE xx        
00000Dr 2  rr rr 49 C6  		keyword_rts "IF", IF
000011r 2  xx           
00000Er 2  rr rr 52 45  		keyword_rts "RESTORE", RESTORE
000012r 2  53 54 4F 52  
000016r 2  C5 xx        
00000Fr 2  rr rr 47 4F  		keyword_rts "GOSUB", GOSUB, TOKEN_GOSUB
000013r 2  53 55 C2 xx  
000010r 2  rr rr 52 45  		keyword_rts "RETURN", POP
000014r 2  54 55 52 CE  
000018r 2  xx           
000011r 2               .ifdef APPLE
000011r 2               		keyword_rts "TEX", TEX, TOKEN_REM
000011r 2               .else
000011r 2  rr rr 52 45  		keyword_rts "REM", REM, TOKEN_REM
000015r 2  CD xx        
000012r 2               .endif
000012r 2  rr rr 53 54  		keyword_rts "STOP", STOP
000016r 2  4F D0 xx     
000013r 2  rr rr 4F CE  		keyword_rts "ON", ON
000017r 2  xx           
000014r 2               .ifdef CONFIG_NULL
000014r 2  rr rr 4E 55  		keyword_rts "NULL", NULL
000018r 2  4C CC xx     
000015r 2               .endif
000015r 2               .ifdef KBD
000015r 2               		keyword_rts "PLOD", PLOD
000015r 2               		keyword_rts "PSAV", PSAV
000015r 2               		keyword_rts "VLOD", VLOD
000015r 2               		keyword_rts "VSAV", VSAV
000015r 2               .endif
000015r 2               .ifndef CONFIG_NO_POKE
000015r 2  rr rr 57 41  		keyword_rts "WAIT", WAIT
000019r 2  49 D4 xx     
000016r 2               .endif
000016r 2               .ifndef KBD
000016r 2  rr rr 4C 4F  		keyword_rts "LOAD", LOAD
00001Ar 2  41 C4 xx     
000017r 2  rr rr 53 41  		keyword_rts "SAVE", SAVE
00001Br 2  56 C5 xx     
000018r 2               .endif
000018r 2               .ifdef CONFIG_CBM_ALL
000018r 2               		keyword_rts "VERIFY", VERIFY
000018r 2               .endif
000018r 2  rr rr 44 45  		keyword_rts "DEF", DEF
00001Cr 2  C6 xx        
000019r 2               .ifdef KBD
000019r 2               		keyword_rts "SLOD", SLOD
000019r 2               .endif
000019r 2               .ifndef CONFIG_NO_POKE
000019r 2  rr rr 50 4F  		keyword_rts "POKE", POKE
00001Dr 2  4B C5 xx     
00001Ar 2               .endif
00001Ar 2               .ifdef CONFIG_FILE
00001Ar 2               		keyword_rts "PRINT#", PRINTH
00001Ar 2               .endif
00001Ar 2  rr rr 50 52  		keyword_rts "PRINT", PRINT, TOKEN_PRINT
00001Er 2  49 4E D4 xx  
00001Br 2  rr rr 43 4F  		keyword_rts "CONT", CONT
00001Fr 2  4E D4 xx     
00001Cr 2  rr rr 4C 49  		keyword_rts "LIST", LIST
000020r 2  53 D4 xx     
00001Dr 2               .ifdef CONFIG_CBM_ALL
00001Dr 2               		keyword_rts "CLR", CLEAR
00001Dr 2               .else
00001Dr 2  rr rr 43 4C  		keyword_rts "CLEAR", CLEAR
000021r 2  45 41 D2 xx  
00001Er 2               .endif
00001Er 2               .ifdef CONFIG_FILE
00001Er 2               		keyword_rts "CMD", CMD
00001Er 2               		keyword_rts "SYS", SYS
00001Er 2               		keyword_rts "OPEN", OPEN
00001Er 2               		keyword_rts "CLOSE", CLOSE
00001Er 2               .endif
00001Er 2               .ifndef CONFIG_SMALL
00001Er 2               		keyword_rts "GET", GET
00001Er 2               .endif
00001Er 2               .ifdef KBD
00001Er 2               		keyword_rts "PRT", PRT
00001Er 2               .endif
00001Er 2  rr rr 4E 45  		keyword_rts "NEW", NEW
000022r 2  D7 xx        
00001Fr 2               
00001Fr 2               		count_tokens
00001Fr 2               
00001Fr 2  54 41 42 A8  		keyword	"TAB(", TOKEN_TAB
000023r 2  xx           
000020r 2  54 CF xx     		keyword	"TO", TOKEN_TO
000021r 2  46 CE xx     		keyword	"FN", TOKEN_FN
000022r 2  53 50 43 A8  		keyword	"SPC(", TOKEN_SPC
000026r 2  xx           
000023r 2  54 48 45 CE  		keyword	"THEN", TOKEN_THEN
000027r 2  xx           
000024r 2  4E 4F D4 xx  		keyword	"NOT", TOKEN_NOT
000025r 2  53 54 45 D0  		keyword	"STEP", TOKEN_STEP
000029r 2  xx           
000026r 2  AB xx        		keyword	"+", TOKEN_PLUS
000027r 2  AD xx        		keyword	"-", TOKEN_MINUS
000028r 2  AA xx        		keyword	"*"
000029r 2  AF xx        		keyword	"/"
00002Ar 2               .ifdef KBD
00002Ar 2               		keyword	"#"
00002Ar 2               .else
00002Ar 2  DE xx        		keyword	"^"
00002Br 2               .endif
00002Br 2  41 4E C4 xx  		keyword	"AND"
00002Cr 2  4F D2 xx     		keyword	"OR"
00002Dr 2  BE xx        		keyword	">", TOKEN_GREATER
00002Er 2  BD xx        		keyword	"=", TOKEN_EQUAL
00002Fr 2  BC xx        		keyword	"<"
000030r 2               
000030r 2                       .segment "VECTORS"
00003Er 2               UNFNC:
00003Er 2               
00003Er 2  rr rr 53 47  		keyword_addr "SGN", SGN, TOKEN_SGN
000042r 2  CE xx        
000031r 2  rr rr 49 4E  		keyword_addr "INT", INT
000035r 2  D4 xx        
000032r 2  rr rr 41 42  		keyword_addr "ABS", ABS
000036r 2  D3 xx        
000033r 2               .ifdef KBD
000033r 2               		keyword_addr "VER", VER
000033r 2               .endif
000033r 2               .ifndef CONFIG_NO_POKE
000033r 2                 .ifdef CONFIG_RAM
000033r 2               		keyword_addr "USR", IQERR
000033r 2                 .else
000033r 2  0A 00 55 53  		keyword_addr "USR", USR
000037r 2  D2 xx        
000034r 2                 .endif
000034r 2               .endif
000034r 2  rr rr 46 52  		keyword_addr "FRE", FRE
000038r 2  C5 xx        
000035r 2  rr rr 50 4F  		keyword_addr "POS", POS
000039r 2  D3 xx        
000036r 2  rr rr 53 51  		keyword_addr "SQR", SQR
00003Ar 2  D2 xx        
000037r 2  rr rr 52 4E  		keyword_addr "RND", RND
00003Br 2  C4 xx        
000038r 2  rr rr 4C 4F  		keyword_addr "LOG", LOG
00003Cr 2  C7 xx        
000039r 2  rr rr 45 58  		keyword_addr "EXP", EXP
00003Dr 2  D0 xx        
00003Ar 2               .segment "VECTORS"
000052r 2               UNFNC_COS:
000052r 2  rr rr 43 4F  		keyword_addr "COS", COS
000056r 2  D3 xx        
00003Br 2               .segment "VECTORS"
000054r 2               UNFNC_SIN:
000054r 2  rr rr 53 49  		keyword_addr "SIN", SIN
000058r 2  CE xx        
00003Cr 2               .segment "VECTORS"
000056r 2               UNFNC_TAN:
000056r 2  rr rr 54 41  		keyword_addr "TAN", TAN
00005Ar 2  CE xx        
00003Dr 2               .segment "VECTORS"
000058r 2               UNFNC_ATN:
000058r 2  rr rr 41 54  		keyword_addr "ATN", ATN
00005Cr 2  CE xx        
00003Er 2               .ifdef KBD
00003Er 2               		keyword_addr "GETC", GETC
00003Er 2               .endif
00003Er 2               .ifndef CONFIG_NO_POKE
00003Er 2  rr rr 50 45  		keyword_addr "PEEK", PEEK
000042r 2  45 CB xx     
00003Fr 2               .endif
00003Fr 2  rr rr 4C 45  		keyword_addr "LEN", LEN
000043r 2  CE xx        
000040r 2  rr rr 53 54  		keyword_addr "STR$", STR
000044r 2  52 A4 xx     
000041r 2  rr rr 56 41  		keyword_addr "VAL", VAL
000045r 2  CC xx        
000042r 2  rr rr 41 53  		keyword_addr "ASC", ASC
000046r 2  C3 xx        
000043r 2  rr rr 43 48  		keyword_addr "CHR$", CHRSTR
000047r 2  52 A4 xx     
000044r 2  rr rr 4C 45  		keyword_addr "LEFT$", LEFTSTR, TOKEN_LEFTSTR
000048r 2  46 54 A4 xx  
000045r 2  rr rr 52 49  		keyword_addr "RIGHT$", RIGHTSTR
000049r 2  47 48 54 A4  
00004Dr 2  xx           
000046r 2  rr rr 4D 49  		keyword_addr "MID$", MIDSTR
00004Ar 2  44 A4 xx     
000047r 2               .ifdef CONFIG_2
000047r 2               		keyword	"GO", TOKEN_GO
000047r 2               .endif
000047r 2                       .segment "KEYWORDS"
0000ECr 2  00           		.byte   0
0000EDr 2               
0000EDr 2                       .segment "VECTORS"
00006Cr 2               MATHTBL:
00006Cr 2  79                   .byte   $79
00006Dr 2  rr rr                .word   FADDT-1
00006Fr 2  79                   .byte   $79
000070r 2  rr rr                .word   FSUBT-1
000072r 2  7B                   .byte   $7B
000073r 2  rr rr                .word   FMULTT-1
000075r 2  7B                   .byte   $7B
000076r 2  rr rr                .word   FDIVT-1
000078r 2  7F                   .byte   $7F
000079r 2  rr rr                .word   FPWRT-1
00007Br 2  50                   .byte   $50
00007Cr 2  rr rr                .word   TAND-1
00007Er 2  46                   .byte   $46
00007Fr 2  rr rr                .word   OR-1
000081r 2  7D                   .byte   $7D
000082r 2  rr rr                .word   NEGOP-1
000084r 2  5A                   .byte   $5A
000085r 2  rr rr                .word   EQUOP-1
000087r 2  64                   .byte   $64
000088r 2  rr rr                .word   RELOPS-1
00008Ar 2               
00008Ar 1               .include "error.s"
00008Ar 2               init_error_table
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2  4E C6        define_error ERR_NOFOR, "NF"
000002r 2  53 CE        define_error ERR_SYNTAX, "SN"
000004r 2  52 C7        define_error ERR_NOGOSUB, "RG"
000006r 2  4F C4        define_error ERR_NODATA, "OD"
000008r 2  46 C3        define_error ERR_ILLQTY, "FC"
00000Ar 2  4F D6        define_error ERR_OVERFLOW, "OV"
00000Cr 2  4F CD        define_error ERR_MEMFULL, "OM"
00000Er 2  55 D3        define_error ERR_UNDEFSTAT, "US"
000010r 2  42 D3        define_error ERR_BADSUBS, "BS"
000012r 2  44 C4        define_error ERR_REDIMD, "DD"
000014r 2  2F B0        define_error ERR_ZERODIV, "/0"
000016r 2  49 C4        define_error ERR_ILLDIR, "ID"
000018r 2  54 CD        define_error ERR_BADTYPE, "TM"
00001Ar 2  4C D3        define_error ERR_STRLONG, "LS"
00001Cr 2  53 D4        define_error ERR_FRMCPX, "ST"
00001Er 2  43 CE        define_error ERR_CANTCONT, "CN"
000020r 2  55 C6        define_error ERR_UNDEFFN, "UF"
000022r 2               .else
000022r 2               define_error ERR_NOFOR, "NEXT WITHOUT FOR"
000022r 2               define_error ERR_SYNTAX, "SYNTAX"
000022r 2               define_error ERR_NOGOSUB, "RETURN WITHOUT GOSUB"
000022r 2               define_error ERR_NODATA, "OUT OF DATA"
000022r 2               define_error ERR_ILLQTY, "ILLEGAL QUANTITY"
000022r 2               .ifdef CBM1
000022r 2               	.byte 0,0,0,0,0
000022r 2               .endif
000022r 2               define_error ERR_OVERFLOW, "OVERFLOW"
000022r 2               define_error ERR_MEMFULL, "OUT OF MEMORY"
000022r 2               define_error ERR_UNDEFSTAT, "UNDEF'D STATEMENT"
000022r 2               define_error ERR_BADSUBS, "BAD SUBSCRIPT"
000022r 2               define_error ERR_REDIMD, "REDIM'D ARRAY"
000022r 2               define_error ERR_ZERODIV, "DIVISION BY ZERO"
000022r 2               define_error ERR_ILLDIR, "ILLEGAL DIRECT"
000022r 2               define_error ERR_BADTYPE, "TYPE MISMATCH"
000022r 2               define_error ERR_STRLONG, "STRING TOO LONG"
000022r 2               .ifdef CONFIG_FILE
000022r 2                 .ifdef CBM1
000022r 2               define_error ERR_BADDATA, "BAD DATA"
000022r 2                 .else
000022r 2               define_error ERR_BADDATA, "FILE DATA"
000022r 2                 .endif
000022r 2               .endif
000022r 2               define_error ERR_FRMCPX, "FORMULA TOO COMPLEX"
000022r 2               define_error ERR_CANTCONT, "CAN'T CONTINUE"
000022r 2               define_error ERR_UNDEFFN, "UNDEF'D FUNCTION"
000022r 2               .endif
000022r 2               
000022r 1               .include "message.s"
000022r 2               ; global messages: "error", "in", "ready", "break"
000022r 2               
000022r 2               .segment "CODE"
000000r 2               
000000r 2               QT_ERROR:
000000r 2               .ifdef KBD
000000r 2                       .byte   " err"
000000r 2               .else
000000r 2                 .ifdef APPLE
000000r 2                       .byte   " ERR"
000000r 2               		.byte	$07,$07
000000r 2                 .else
000000r 2  20 45 52 52          .byte   " ERROR"
000004r 2  4F 52        
000006r 2                 .endif
000006r 2               .endif
000006r 2  00                   .byte   0
000007r 2               
000007r 2               .ifndef KBD
000007r 2               QT_IN:
000007r 2  20 49 4E 20          .byte   " IN "
00000Br 2  00                   .byte   $00
00000Cr 2               .endif
00000Cr 2               
00000Cr 2               .ifdef KBD
00000Cr 2               		.byte	$54,$D2 ; ???
00000Cr 2               OKPRT:
00000Cr 2               		jsr     PRIMM
00000Cr 2                       .byte   CR,CR,">>",CR,LF
00000Cr 2               		.byte	0
00000Cr 2                       rts
00000Cr 2                       nop
00000Cr 2               .else
00000Cr 2               QT_OK:
00000Cr 2                 .ifdef CONFIG_CBM_ALL
00000Cr 2               		.byte   CR,LF,"READY.",CR,LF
00000Cr 2                 .else
00000Cr 2                   .ifdef APPLE
00000Cr 2               		; binary patch!
00000Cr 2                       .byte   CR,0,0,"K",CR,LF
00000Cr 2                   .else
00000Cr 2  0D 0A 4F 4B  		.byte   CR,LF,"OK",CR,LF
000010r 2  0D 0A        
000012r 2                   .endif
000012r 2                 .endif
000012r 2  00           		.byte	0
000013r 2               .endif
000013r 2               
000013r 2               QT_BREAK:
000013r 2               
000013r 2               .ifdef KBD
000013r 2               		.byte	CR,LF," Brk"
000013r 2                       .byte   0
000013r 2                       .byte   $54,$D0 ; ???
000013r 2               .elseif .def(MICROTAN)
000013r 2               		.byte CR,LF," BREAK"
000013r 2                       .byte   0
000013r 2               .else
000013r 2  0D 0A 42 52  		.byte CR,LF,"BREAK"
000017r 2  45 41 4B     
00001Ar 2  00                   .byte   0
00001Br 2               .endif
00001Br 2               
00001Br 1               .include "memory.s"
00001Br 2               ; generic stack and memory management code
00001Br 2               ; this code is identical across all versions of
00001Br 2               ; BASIC
00001Br 2               
00001Br 2               .segment "CODE"
00001Br 2               
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00001Br 2               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00001Br 2               ;
00001Br 2               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00001Br 2               ; 	= $XXFF IF CALLED FROM "RETURN"
00001Br 2               ; 	<<< BUG: SHOULD BE $FFXX >>>
00001Br 2               ;
00001Br 2               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00001Br 2               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00001Br 2               ;
00001Br 2               ;	.EQ. IF FOUND
00001Br 2               ;	(X) = STACK PNTR OF FRAME FOUND
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               GTFORPNT:
00001Br 2  BA                   tsx
00001Cr 2  E8                   inx
00001Dr 2  E8                   inx
00001Er 2  E8                   inx
00001Fr 2  E8                   inx
000020r 2               L2279:
000020r 2  BD 01 01             lda     STACK+1,x
000023r 2  C9 81                cmp     #$81
000025r 2  D0 21                bne     L22A1
000027r 2  A5 A3                lda     FORPNT+1
000029r 2  D0 0A                bne     L228E
00002Br 2  BD 02 01             lda     STACK+2,x
00002Er 2  85 A2                sta     FORPNT
000030r 2  BD 03 01             lda     STACK+3,x
000033r 2  85 A3                sta     FORPNT+1
000035r 2               L228E:
000035r 2  DD 03 01             cmp     STACK+3,x
000038r 2  D0 07                bne     L229A
00003Ar 2  A5 A2                lda     FORPNT
00003Cr 2  DD 02 01             cmp     STACK+2,x
00003Fr 2  F0 07                beq     L22A1
000041r 2               L229A:
000041r 2  8A                   txa
000042r 2  18                   clc
000043r 2  69 10                adc     #BYTES_PER_FRAME
000045r 2  AA                   tax
000046r 2  D0 D8                bne     L2279
000048r 2               L22A1:
000048r 2  60                   rts
000049r 2               
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               ; MOVE BLOCK OF MEMORY UP
000049r 2               ;
000049r 2               ; ON ENTRY:
000049r 2               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
000049r 2               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
000049r 2               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               BLTU:
000049r 2  20 rr rr             jsr     REASON
00004Cr 2  85 8A                sta     STREND
00004Er 2  84 8B                sty     STREND+1
000050r 2               BLTU2:
000050r 2  38                   sec
000051r 2  A5 B1                lda     HIGHTR
000053r 2  E5 B5                sbc     LOWTR
000055r 2  85 7C                sta     INDEX
000057r 2  A8                   tay
000058r 2  A5 B2                lda     HIGHTR+1
00005Ar 2  E5 B6                sbc     LOWTR+1
00005Cr 2  AA                   tax
00005Dr 2  E8                   inx
00005Er 2  98                   tya
00005Fr 2  F0 23                beq     L22DD
000061r 2  A5 B1                lda     HIGHTR
000063r 2  38                   sec
000064r 2  E5 7C                sbc     INDEX
000066r 2  85 B1                sta     HIGHTR
000068r 2  B0 03                bcs     L22C6
00006Ar 2  C6 B2                dec     HIGHTR+1
00006Cr 2  38                   sec
00006Dr 2               L22C6:
00006Dr 2  A5 AF                lda     HIGHDS
00006Fr 2  E5 7C                sbc     INDEX
000071r 2  85 AF                sta     HIGHDS
000073r 2  B0 08                bcs     L22D6
000075r 2  C6 B0                dec     HIGHDS+1
000077r 2  90 04                bcc     L22D6
000079r 2               L22D2:
000079r 2  B1 B1                lda     (HIGHTR),y
00007Br 2  91 AF                sta     (HIGHDS),y
00007Dr 2               L22D6:
00007Dr 2  88                   dey
00007Er 2  D0 F9                bne     L22D2
000080r 2  B1 B1                lda     (HIGHTR),y
000082r 2  91 AF                sta     (HIGHDS),y
000084r 2               L22DD:
000084r 2  C6 B2                dec     HIGHTR+1
000086r 2  C6 B0                dec     HIGHDS+1
000088r 2  CA                   dex
000089r 2  D0 F2                bne     L22D6
00008Br 2  60                   rts
00008Cr 2               
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00008Cr 2               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               CHKMEM:
00008Cr 2  0A                   asl     a
00008Dr 2  69 33                adc     #SPACE_FOR_GOSUB
00008Fr 2  B0 35                bcs     MEMERR
000091r 2  85 7C                sta     INDEX
000093r 2  BA                   tsx
000094r 2  E4 7C                cpx     INDEX
000096r 2  90 2E                bcc     MEMERR
000098r 2  60                   rts
000099r 2               
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
000099r 2               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               REASON:
000099r 2  C4 8D                cpy     FRETOP+1
00009Br 2  90 28                bcc     L231E
00009Dr 2  D0 04                bne     L22FC
00009Fr 2  C5 8C                cmp     FRETOP
0000A1r 2  90 22                bcc     L231E
0000A3r 2               L22FC:
0000A3r 2  48                   pha
0000A4r 2  A2 08                ldx     #FAC-TEMP1-1
0000A6r 2  98                   tya
0000A7r 2               L2300:
0000A7r 2  48                   pha
0000A8r 2  B5 AE                lda     TEMP1,x
0000AAr 2  CA                   dex
0000ABr 2  10 FA                bpl     L2300
0000ADr 2  20 rr rr             jsr     GARBAG
0000B0r 2  A2 F8                ldx     #<(TEMP1-FAC+1)
0000B2r 2               L230B:
0000B2r 2  68                   pla
0000B3r 2  95 B7                sta     FAC,x
0000B5r 2  E8                   inx
0000B6r 2  30 FA                bmi     L230B
0000B8r 2  68                   pla
0000B9r 2  A8                   tay
0000BAr 2  68                   pla
0000BBr 2  C4 8D                cpy     FRETOP+1
0000BDr 2  90 06                bcc     L231E
0000BFr 2  D0 05                bne     MEMERR
0000C1r 2  C5 8C                cmp     FRETOP
0000C3r 2  B0 01                bcs     MEMERR
0000C5r 2               L231E:
0000C5r 2  60                   rts
0000C6r 2               
0000C6r 1               .include "program.s"
0000C6r 2               ; error
0000C6r 2               ; line input, line editing
0000C6r 2               ; tokenize
0000C6r 2               ; detokenize
0000C6r 2               ; BASIC program memory management
0000C6r 2               
0000C6r 2               ; MICROTAN has some nonstandard extension to LIST here
0000C6r 2               
0000C6r 2               .segment "CODE"
0000C6r 2               
0000C6r 2               MEMERR:
0000C6r 2  A2 0C                ldx     #ERR_MEMFULL
0000C8r 2               
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ; HANDLE AN ERROR
0000C8r 2               ;
0000C8r 2               ; (X)=OFFSET IN ERROR MESSAGE TABLE
0000C8r 2               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
0000C8r 2               ; (CURLIN+1) = $FF IF IN DIRECT MODE
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ERROR:
0000C8r 2  46 69                lsr     Z14
0000CAr 2               .ifdef CONFIG_FILE
0000CAr 2                       lda     CURDVC    ; output
0000CAr 2                       beq     LC366     ; is screen
0000CAr 2                       jsr     CLRCH     ; otherwise redirect output back to screen
0000CAr 2                       lda     #$00
0000CAr 2                       sta     CURDVC
0000CAr 2               LC366:
0000CAr 2               .endif
0000CAr 2  20 rr rr             jsr     CRDO
0000CDr 2  20 rr rr             jsr     OUTQUES
0000D0r 2               L2329:
0000D0r 2  BD rr rr             lda     ERROR_MESSAGES,x
0000D3r 2               .ifndef CONFIG_SMALL
0000D3r 2                       pha
0000D3r 2                       and     #$7F
0000D3r 2               .endif
0000D3r 2  20 rr rr             jsr     OUTDO
0000D6r 2               .ifdef CONFIG_SMALL
0000D6r 2  BD rr rr             lda     ERROR_MESSAGES+1,x
0000D9r 2                 .ifdef KBD
0000D9r 2                       and     #$7F
0000D9r 2                 .endif
0000D9r 2  20 rr rr             jsr     OUTDO
0000DCr 2               .else
0000DCr 2                       inx
0000DCr 2                       pla
0000DCr 2                       bpl     L2329
0000DCr 2               .endif
0000DCr 2  20 rr rr             jsr     STKINI
0000DFr 2  A9 rr                lda     #<QT_ERROR
0000E1r 2  A0 rr                ldy     #>QT_ERROR
0000E3r 2               
0000E3r 2               ; ----------------------------------------------------------------------------
0000E3r 2               ; PRINT STRING AT (Y,A)
0000E3r 2               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
0000E3r 2               ; FALL INTO WARM RESTART
0000E3r 2               ; ----------------------------------------------------------------------------
0000E3r 2               PRINT_ERROR_LINNUM:
0000E3r 2  20 rr rr             jsr     STROUT
0000E6r 2  A4 93                ldy     CURLIN+1
0000E8r 2  C8                   iny
0000E9r 2  F0 03                beq     RESTART
0000EBr 2  20 rr rr             jsr     INPRT
0000EEr 2               
0000EEr 2               ; ----------------------------------------------------------------------------
0000EEr 2               ; WARM RESTART ENTRY
0000EEr 2               ; ----------------------------------------------------------------------------
0000EEr 2               RESTART:
0000EEr 2               .ifdef KBD
0000EEr 2                       jsr     CRDO
0000EEr 2                       nop
0000EEr 2               L2351X:
0000EEr 2                       jsr     OKPRT
0000EEr 2               L2351:
0000EEr 2                       jsr     INLIN
0000EEr 2               LE28E:
0000EEr 2                       bpl     RESTART
0000EEr 2               .else
0000EEr 2  46 69                lsr     Z14
0000F0r 2  A9 rr                lda     #<QT_OK
0000F2r 2  A0 rr                ldy     #>QT_OK
0000F4r 2                 .ifdef CONFIG_CBM_ALL
0000F4r 2                       jsr     STROUT
0000F4r 2                 .else
0000F4r 2  20 03 00             jsr     GOSTROUT
0000F7r 2                 .endif
0000F7r 2               L2351:
0000F7r 2  20 rr rr             jsr     INLIN
0000FAr 2               .endif
0000FAr 2  86 CE                stx     TXTPTR
0000FCr 2  84 CF                sty     TXTPTR+1
0000FEr 2  20 C7 00             jsr     CHRGET
000101r 2               .ifdef CONFIG_11
000101r 2               ; bug in pre-1.1: CHRGET sets Z on '\0'
000101r 2               ; and ':' - a line starting with ':' in
000101r 2               ; direct mode gets ignored
000101r 2                       tax
000101r 2               .endif
000101r 2               .ifdef KBD
000101r 2                       beq     L2351X
000101r 2               .else
000101r 2  F0 F4                beq     L2351
000103r 2               .endif
000103r 2  A2 FF                ldx     #$FF
000105r 2  86 93                stx     CURLIN+1
000107r 2  90 06                bcc     NUMBERED_LINE
000109r 2  20 rr rr             jsr     PARSE_INPUT_LINE
00010Cr 2  4C rr rr             jmp     NEWSTT2
00010Fr 2               
00010Fr 2               ; ----------------------------------------------------------------------------
00010Fr 2               ; HANDLE NUMBERED LINE
00010Fr 2               ; ----------------------------------------------------------------------------
00010Fr 2               NUMBERED_LINE:
00010Fr 2  20 rr rr             jsr     LINGET
000112r 2  20 rr rr             jsr     PARSE_INPUT_LINE
000115r 2  84 62                sty     EOLPNTR
000117r 2               .ifdef KBD
000117r 2                       jsr     FNDLIN2
000117r 2                       lda     JMPADRS+1
000117r 2                       sta     LOWTR
000117r 2                       sta     Z96
000117r 2                       lda     JMPADRS+2
000117r 2                       sta     LOWTR+1
000117r 2                       sta     Z96+1
000117r 2                       lda     LINNUM
000117r 2                       sta     L06FE
000117r 2                       lda     LINNUM+1
000117r 2                       sta     L06FE+1
000117r 2                       inc     LINNUM
000117r 2                       bne     LE2D2
000117r 2                       inc     LINNUM+1
000117r 2                       bne     LE2D2
000117r 2                       jmp     SYNERR
000117r 2               LE2D2:
000117r 2                       jsr     LF457
000117r 2                       ldx     #Z96
000117r 2                       jsr     CMPJMPADRS
000117r 2                       bcs     LE2FD
000117r 2               LE2DC:
000117r 2                       ldx     #$00
000117r 2                       lda     (JMPADRS+1,x)
000117r 2                       sta     (Z96,x)
000117r 2                       inc     JMPADRS+1
000117r 2                       bne     LE2E8
000117r 2                       inc     JMPADRS+2
000117r 2               LE2E8:
000117r 2                       inc     Z96
000117r 2                       bne     LE2EE
000117r 2                       inc     Z96+1
000117r 2               LE2EE:
000117r 2                       ldx     #VARTAB
000117r 2                       jsr     CMPJMPADRS
000117r 2                       bne     LE2DC
000117r 2                       lda     Z96
000117r 2                       sta     VARTAB
000117r 2                       lda     Z96+1
000117r 2                       sta     VARTAB+1
000117r 2               LE2FD:
000117r 2                       jsr     SETPTRS
000117r 2                       jsr     LE33D
000117r 2                       lda     INPUTBUFFER
000117r 2               LE306:
000117r 2                       beq     LE28E
000117r 2                       cmp     #$A5
000117r 2                       beq     LE306
000117r 2                       clc
000117r 2               .else
000117r 2  20 rr rr             jsr     FNDLIN
00011Ar 2  90 44                bcc     PUT_NEW_LINE
00011Cr 2  A0 01                ldy     #$01
00011Er 2  B1 B5                lda     (LOWTR),y
000120r 2  85 7D                sta     INDEX+1
000122r 2  A5 86                lda     VARTAB
000124r 2  85 7C                sta     INDEX
000126r 2  A5 B6                lda     LOWTR+1
000128r 2  85 7F                sta     DEST+1
00012Ar 2  A5 B5                lda     LOWTR
00012Cr 2  88                   dey
00012Dr 2  F1 B5                sbc     (LOWTR),y
00012Fr 2  18                   clc
000130r 2  65 86                adc     VARTAB
000132r 2  85 86                sta     VARTAB
000134r 2  85 7E                sta     DEST
000136r 2  A5 87                lda     VARTAB+1
000138r 2  69 FF                adc     #$FF
00013Ar 2  85 87                sta     VARTAB+1
00013Cr 2  E5 B6                sbc     LOWTR+1
00013Er 2  AA                   tax
00013Fr 2  38                   sec
000140r 2  A5 B5                lda     LOWTR
000142r 2  E5 86                sbc     VARTAB
000144r 2  A8                   tay
000145r 2  B0 03                bcs     L23A5
000147r 2  E8                   inx
000148r 2  C6 7F                dec     DEST+1
00014Ar 2               L23A5:
00014Ar 2  18                   clc
00014Br 2  65 7C                adc     INDEX
00014Dr 2  90 03                bcc     L23AD
00014Fr 2  C6 7D                dec     INDEX+1
000151r 2  18                   clc
000152r 2               L23AD:
000152r 2  B1 7C                lda     (INDEX),y
000154r 2  91 7E                sta     (DEST),y
000156r 2  C8                   iny
000157r 2  D0 F9                bne     L23AD
000159r 2  E6 7D                inc     INDEX+1
00015Br 2  E6 7F                inc     DEST+1
00015Dr 2  CA                   dex
00015Er 2  D0 F2                bne     L23AD
000160r 2               .endif
000160r 2               ; ----------------------------------------------------------------------------
000160r 2               PUT_NEW_LINE:
000160r 2               .ifndef KBD
000160r 2                 .ifdef CONFIG_2
000160r 2                       jsr     SETPTRS
000160r 2                       jsr     LE33D
000160r 2                       lda     INPUTBUFFER
000160r 2                       beq     L2351
000160r 2                       clc
000160r 2                 .else
000160r 2  A5 13                lda     INPUTBUFFER
000162r 2  F0 2F                beq     FIX_LINKS
000164r 2  A5 90                lda     MEMSIZ
000166r 2  A4 91                ldy     MEMSIZ+1
000168r 2  85 8C                sta     FRETOP
00016Ar 2  84 8D                sty     FRETOP+1
00016Cr 2                 .endif
00016Cr 2               .endif
00016Cr 2  A5 86                lda     VARTAB
00016Er 2  85 B1                sta     HIGHTR
000170r 2  65 62                adc     EOLPNTR
000172r 2  85 AF                sta     HIGHDS
000174r 2  A4 87                ldy     VARTAB+1
000176r 2  84 B2                sty     HIGHTR+1
000178r 2  90 01                bcc     L23D6
00017Ar 2  C8                   iny
00017Br 2               L23D6:
00017Br 2  84 B0                sty     HIGHDS+1
00017Dr 2  20 rr rr             jsr     BLTU
000180r 2               .ifdef CONFIG_INPUTBUFFER_0200
000180r 2                       lda     LINNUM
000180r 2                       ldy     LINNUM+1
000180r 2                       sta     INPUTBUFFER-2
000180r 2                       sty     INPUTBUFFER-1
000180r 2               .endif
000180r 2  A5 8A                lda     STREND
000182r 2  A4 8B                ldy     STREND+1
000184r 2  85 86                sta     VARTAB
000186r 2  84 87                sty     VARTAB+1
000188r 2  A4 62                ldy     EOLPNTR
00018Ar 2  88                   dey
00018Br 2               ; ---COPY LINE INTO PROGRAM-------
00018Br 2               L23E6:
00018Br 2  B9 0F 00             lda     INPUTBUFFER-4,y
00018Er 2  91 B5                sta     (LOWTR),y
000190r 2  88                   dey
000191r 2  10 F8                bpl     L23E6
000193r 2               
000193r 2               ; ----------------------------------------------------------------------------
000193r 2               ; CLEAR ALL VARIABLES
000193r 2               ; RE-ESTABLISH ALL FORWARD LINKS
000193r 2               ; ----------------------------------------------------------------------------
000193r 2               FIX_LINKS:
000193r 2  20 rr rr             jsr     SETPTRS
000196r 2               .ifdef CONFIG_2
000196r 2                       jsr     LE33D
000196r 2                       jmp     L2351
000196r 2               LE33D:
000196r 2               .endif
000196r 2  A5 84                lda     TXTTAB
000198r 2  A4 85                ldy     TXTTAB+1
00019Ar 2  85 7C                sta     INDEX
00019Cr 2  84 7D                sty     INDEX+1
00019Er 2  18                   clc
00019Fr 2               L23FA:
00019Fr 2  A0 01                ldy     #$01
0001A1r 2  B1 7C                lda     (INDEX),y
0001A3r 2               .ifdef CONFIG_2
0001A3r 2                       beq     RET3
0001A3r 2               .else
0001A3r 2  D0 03 4C rr          jeq     L2351
0001A7r 2  rr           
0001A8r 2               .endif
0001A8r 2  A0 04                ldy     #$04
0001AAr 2               L2405:
0001AAr 2  C8                   iny
0001ABr 2  B1 7C                lda     (INDEX),y
0001ADr 2  D0 FB                bne     L2405
0001AFr 2  C8                   iny
0001B0r 2  98                   tya
0001B1r 2  65 7C                adc     INDEX
0001B3r 2  AA                   tax
0001B4r 2  A0 00                ldy     #$00
0001B6r 2  91 7C                sta     (INDEX),y
0001B8r 2  A5 7D                lda     INDEX+1
0001BAr 2  69 00                adc     #$00
0001BCr 2  C8                   iny
0001BDr 2  91 7C                sta     (INDEX),y
0001BFr 2  86 7C                stx     INDEX
0001C1r 2  85 7D                sta     INDEX+1
0001C3r 2  90 DA                bcc     L23FA	; always
0001C5r 2               
0001C5r 2               ; ----------------------------------------------------------------------------
0001C5r 2               .ifdef KBD
0001C5r 2               .include "kbd_loadsave.s"
0001C5r 2               .endif
0001C5r 2               
0001C5r 2               .ifdef CONFIG_2
0001C5r 2               ; !!! kbd_loadsave.s requires an RTS here!
0001C5r 2               RET3:
0001C5r 2               		rts
0001C5r 2               .endif
0001C5r 2               
0001C5r 2               .include "inline.s"
0001C5r 3               .segment "CODE"
0001C5r 3               
0001C5r 3               .ifndef CONFIG_NO_INPUTBUFFER_ZP
0001C5r 3               L2420:
0001C5r 3                 .ifdef OSI
0001C5r 3  20 rr rr             jsr     OUTDO
0001C8r 3                 .endif
0001C8r 3  CA                   dex
0001C9r 3  10 08                bpl     INLIN2
0001CBr 3               L2423:
0001CBr 3                 .ifdef OSI
0001CBr 3  20 rr rr             jsr     OUTDO
0001CEr 3                 .endif
0001CEr 3  20 rr rr             jsr     CRDO
0001D1r 3               .endif
0001D1r 3               
0001D1r 3               ; ----------------------------------------------------------------------------
0001D1r 3               ; READ A LINE, AND STRIP OFF SIGN BITS
0001D1r 3               ; ----------------------------------------------------------------------------
0001D1r 3               .ifndef KBD
0001D1r 3               INLIN:
0001D1r 3                 .ifdef APPLE
0001D1r 3                       ldx     #$DD
0001D1r 3               INLIN1:
0001D1r 3                       stx     $33
0001D1r 3                       jsr     L2900
0001D1r 3                       cpx     #$EF
0001D1r 3                       bcs     L0C32
0001D1r 3                       ldx     #$EF
0001D1r 3               L0C32:
0001D1r 3                       lda     #$00
0001D1r 3                       sta     INPUTBUFFER,x
0001D1r 3                       ldx     #<INPUTBUFFER-1
0001D1r 3                       ldy     #>INPUTBUFFER-1
0001D1r 3                       rts
0001D1r 3                 .endif
0001D1r 3               
0001D1r 3                 .ifndef APPLE
0001D1r 3  A2 00                ldx     #$00
0001D3r 3               INLIN2:
0001D3r 3  20 rr rr             jsr     GETLN
0001D6r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001D6r 3  C9 07                cmp     #$07
0001D8r 3  F0 14                beq     L2443
0001DAr 3                   .endif
0001DAr 3  C9 0D                cmp     #$0D
0001DCr 3  F0 1F                beq     L2453
0001DEr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001DEr 3  C9 20                cmp     #$20
0001E0r 3  90 F1                bcc     INLIN2
0001E2r 3                     .ifdef MICROTAN
0001E2r 3                       cmp     #$80
0001E2r 3                     .else
0001E2r 3  C9 7D                cmp     #$7D
0001E4r 3                     .endif
0001E4r 3  B0 ED                bcs     INLIN2
0001E6r 3  C9 40                cmp     #$40 ; @
0001E8r 3  F0 E1                beq     L2423
0001EAr 3                     .ifdef MICROTAN
0001EAr 3                       cmp     #$7F ; DEL
0001EAr 3                     .else
0001EAr 3  C9 5F                cmp     #$5F ; _
0001ECr 3                     .endif
0001ECr 3  F0 D7                beq     L2420
0001EEr 3               L2443:
0001EEr 3                     .ifdef MICROTAN
0001EEr 3                       cpx     #$4F
0001EEr 3                     .else
0001EEr 3  E0 47                cpx     #$47
0001F0r 3                     .endif
0001F0r 3  B0 04                bcs     L244C
0001F2r 3                   .endif
0001F2r 3  95 13                sta     INPUTBUFFER,x
0001F4r 3  E8                   inx
0001F5r 3                   .ifdef OSI
0001F5r 3  2C                   .byte   $2C
0001F6r 3                   .else
0001F6r 3                       bne     INLIN2
0001F6r 3                   .endif
0001F6r 3               L244C:
0001F6r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001F6r 3  A9 07                lda     #$07 ; BEL
0001F8r 3  20 rr rr             jsr     OUTDO
0001FBr 3  D0 D6                bne     INLIN2
0001FDr 3                   .endif
0001FDr 3               L2453:
0001FDr 3  4C rr rr             jmp     L29B9
000200r 3                 .endif
000200r 3               .endif
000200r 3               
000200r 3               .ifndef KBD
000200r 3                 .ifndef APPLE
000200r 3               GETLN:
000200r 3                   .ifdef CONFIG_FILE
000200r 3                       jsr     CHRIN
000200r 3                       ldy     CURDVC
000200r 3                       bne     L2465
000200r 3                   .else
000200r 3  20 rr rr             jsr     MONRDKEY
000203r 3                   .endif
000203r 3                   .ifdef OSI
000203r 3  EA                   nop
000204r 3  EA                   nop
000205r 3  EA                   nop
000206r 3  EA                   nop
000207r 3  EA                   nop
000208r 3  EA                   nop
000209r 3  EA                   nop
00020Ar 3  EA                   nop
00020Br 3  EA                   nop
00020Cr 3  EA                   nop
00020Dr 3  EA                   nop
00020Er 3  EA                   nop
00020Fr 3  EA                   nop
000210r 3  EA                   nop
000211r 3  29 7F                and     #$7F
000213r 3                   .endif
000213r 3                 .endif
000213r 3                 .ifdef APPLE
000213r 3               RDKEY:
000213r 3                       jsr     LFD0C
000213r 3                       and     #$7F
000213r 3                 .endif
000213r 3  C9 0F                cmp     #$0F
000215r 3  D0 08                bne     L2465
000217r 3  48                   pha
000218r 3  A5 69                lda     Z14
00021Ar 3  49 FF                eor     #$FF
00021Cr 3  85 69                sta     Z14
00021Er 3  68                   pla
00021Fr 3               L2465:
00021Fr 3  60                   rts
000220r 3               .endif
000220r 3               
000220r 2               
000220r 2               ; ----------------------------------------------------------------------------
000220r 2               ; TOKENIZE THE INPUT LINE
000220r 2               ; ----------------------------------------------------------------------------
000220r 2               PARSE_INPUT_LINE:
000220r 2  A6 CE                ldx     TXTPTR
000222r 2  A0 04                ldy     #$04
000224r 2  84 65                sty     DATAFLG
000226r 2               L246C:
000226r 2  B5 00                lda     INPUTBUFFERX,x
000228r 2               .ifdef CONFIG_CBM_ALL
000228r 2                       bpl     LC49E
000228r 2                       cmp     #$FF
000228r 2                       beq     L24AC
000228r 2                       inx
000228r 2                       bne     L246C
000228r 2               LC49E:
000228r 2               .endif
000228r 2  C9 20                cmp     #$20
00022Ar 2  F0 3A                beq     L24AC
00022Cr 2  85 61                sta     ENDCHR
00022Er 2  C9 22                cmp     #$22
000230r 2  F0 58                beq     L24D0
000232r 2  24 65                bit     DATAFLG
000234r 2  70 30                bvs     L24AC
000236r 2  C9 3F                cmp     #$3F
000238r 2  D0 04                bne     L2484
00023Ar 2  A9 9A                lda     #TOKEN_PRINT
00023Cr 2  D0 28                bne     L24AC
00023Er 2               L2484:
00023Er 2  C9 30                cmp     #$30
000240r 2  90 04                bcc     L248C
000242r 2  C9 3C                cmp     #$3C
000244r 2  90 20                bcc     L24AC
000246r 2               ; ----------------------------------------------------------------------------
000246r 2               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
000246r 2               ; WITH CURRENT CHAR FROM INPUT LINE
000246r 2               ; ----------------------------------------------------------------------------
000246r 2               L248C:
000246r 2  84 C5                sty     STRNG2
000248r 2  A0 00                ldy     #$00
00024Ar 2  84 62                sty     EOLPNTR
00024Cr 2  88                   dey
00024Dr 2  86 CE                stx     TXTPTR
00024Fr 2  CA                   dex
000250r 2               L2496:
000250r 2  C8                   iny
000251r 2               L2497:
000251r 2  E8                   inx
000252r 2               L2498:
000252r 2               .ifdef KBD
000252r 2                       jsr     GET_UPPER
000252r 2               .else
000252r 2  B5 00                lda     INPUTBUFFERX,x
000254r 2                 .ifndef CONFIG_2
000254r 2  C9 20                cmp     #$20
000256r 2  F0 F9                beq     L2497
000258r 2                 .endif
000258r 2               .endif
000258r 2  38                   sec
000259r 2  F9 rr rr             sbc     TOKEN_NAME_TABLE,y
00025Cr 2  F0 F2                beq     L2496
00025Er 2  C9 80                cmp     #$80
000260r 2  D0 2F                bne     L24D7
000262r 2  05 62                ora     EOLPNTR
000264r 2               ; ----------------------------------------------------------------------------
000264r 2               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
000264r 2               ; ----------------------------------------------------------------------------
000264r 2               L24AA:
000264r 2  A4 C5                ldy     STRNG2
000266r 2               L24AC:
000266r 2  E8                   inx
000267r 2  C8                   iny
000268r 2  99 0E 00             sta     INPUTBUFFER-5,y
00026Br 2  B9 0E 00             lda     INPUTBUFFER-5,y
00026Er 2  F0 34                beq     L24EA
000270r 2  38                   sec
000271r 2  E9 3A                sbc     #$3A
000273r 2  F0 04                beq     L24BF
000275r 2  C9 49                cmp     #$49
000277r 2  D0 02                bne     L24C1
000279r 2               L24BF:
000279r 2  85 65                sta     DATAFLG
00027Br 2               L24C1:
00027Br 2  38                   sec
00027Cr 2  E9 57                sbc     #TOKEN_REM-':'
00027Er 2  D0 A6                bne     L246C
000280r 2  85 61                sta     ENDCHR
000282r 2               ; ----------------------------------------------------------------------------
000282r 2               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
000282r 2               ; BY COPYING CHARS UP TO ENDCHR.
000282r 2               ; ----------------------------------------------------------------------------
000282r 2               L24C8:
000282r 2  B5 00                lda     INPUTBUFFERX,x
000284r 2  F0 E0                beq     L24AC
000286r 2  C5 61                cmp     ENDCHR
000288r 2  F0 DC                beq     L24AC
00028Ar 2               L24D0:
00028Ar 2  C8                   iny
00028Br 2  99 0E 00             sta     INPUTBUFFER-5,y
00028Er 2  E8                   inx
00028Fr 2  D0 F1                bne     L24C8
000291r 2               ; ----------------------------------------------------------------------------
000291r 2               ; ADVANCE POINTER TO NEXT TOKEN NAME
000291r 2               ; ----------------------------------------------------------------------------
000291r 2               L24D7:
000291r 2  A6 CE                ldx     TXTPTR
000293r 2  E6 62                inc     EOLPNTR
000295r 2               L24DB:
000295r 2  C8                   iny
000296r 2  B9 rr rr             lda     MATHTBL+28+1,y
000299r 2  10 FA                bpl     L24DB
00029Br 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
00029Er 2  D0 B2                bne     L2498
0002A0r 2  B5 00                lda     INPUTBUFFERX,x
0002A2r 2  10 C0                bpl     L24AA
0002A4r 2               ; ---END OF LINE------------------
0002A4r 2               L24EA:
0002A4r 2  99 10 00             sta     INPUTBUFFER-3,y
0002A7r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
0002A7r 2                       dec     TXTPTR+1
0002A7r 2               .endif
0002A7r 2  A9 12                lda     #<INPUTBUFFER-1
0002A9r 2  85 CE                sta     TXTPTR
0002ABr 2  60                   rts
0002ACr 2               
0002ACr 2               ; ----------------------------------------------------------------------------
0002ACr 2               ; SEARCH FOR LINE
0002ACr 2               ;
0002ACr 2               ; (LINNUM) = LINE # TO FIND
0002ACr 2               ; IF NOT FOUND:  CARRY = 0
0002ACr 2               ;	LOWTR POINTS AT NEXT LINE
0002ACr 2               ; IF FOUND:      CARRY = 1
0002ACr 2               ;	LOWTR POINTS AT LINE
0002ACr 2               ; ----------------------------------------------------------------------------
0002ACr 2               FNDLIN:
0002ACr 2               .ifdef KBD
0002ACr 2                       jsr     CHRGET
0002ACr 2                       jmp     LE444
0002ACr 2               LE440:
0002ACr 2                       php
0002ACr 2                       jsr     LINGET
0002ACr 2               LE444:
0002ACr 2                       jsr     LF457
0002ACr 2                       ldx     #$FF
0002ACr 2                       plp
0002ACr 2                       beq     LE464
0002ACr 2                       jsr     CHRGOT
0002ACr 2                       beq     L2520
0002ACr 2                       cmp     #$A5
0002ACr 2                       bne     L2520
0002ACr 2                       jsr     CHRGET
0002ACr 2                       beq     LE464
0002ACr 2                       bcs     LE461
0002ACr 2                       jsr     LINGET
0002ACr 2                       beq     L2520
0002ACr 2               LE461:
0002ACr 2                       jmp     SYNERR
0002ACr 2               LE464:
0002ACr 2                       stx     LINNUM
0002ACr 2                       stx     LINNUM+1
0002ACr 2               .else
0002ACr 2  A5 84                lda     TXTTAB
0002AEr 2  A6 85                ldx     TXTTAB+1
0002B0r 2               FL1:
0002B0r 2  A0 01                ldy     #$01
0002B2r 2  85 B5                sta     LOWTR
0002B4r 2  86 B6                stx     LOWTR+1
0002B6r 2  B1 B5                lda     (LOWTR),y
0002B8r 2  F0 1F                beq     L251F
0002BAr 2  C8                   iny
0002BBr 2  C8                   iny
0002BCr 2  A5 12                lda     LINNUM+1
0002BEr 2  D1 B5                cmp     (LOWTR),y
0002C0r 2  90 18                bcc     L2520
0002C2r 2  F0 03                beq     L250D
0002C4r 2  88                   dey
0002C5r 2  D0 09                bne     L2516
0002C7r 2               L250D:
0002C7r 2  A5 11                lda     LINNUM
0002C9r 2  88                   dey
0002CAr 2  D1 B5                cmp     (LOWTR),y
0002CCr 2  90 0C                bcc     L2520
0002CEr 2  F0 0A                beq     L2520
0002D0r 2               L2516:
0002D0r 2  88                   dey
0002D1r 2  B1 B5                lda     (LOWTR),y
0002D3r 2  AA                   tax
0002D4r 2  88                   dey
0002D5r 2  B1 B5                lda     (LOWTR),y
0002D7r 2  B0 D7                bcs     FL1
0002D9r 2               L251F:
0002D9r 2  18                   clc
0002DAr 2               .endif
0002DAr 2               L2520:
0002DAr 2  60                   rts
0002DBr 2               
0002DBr 2               ; ----------------------------------------------------------------------------
0002DBr 2               ; "NEW" STATEMENT
0002DBr 2               ; ----------------------------------------------------------------------------
0002DBr 2               NEW:
0002DBr 2  D0 FD                bne     L2520
0002DDr 2               SCRTCH:
0002DDr 2  A9 00                lda     #$00
0002DFr 2  A8                   tay
0002E0r 2  91 84                sta     (TXTTAB),y
0002E2r 2  C8                   iny
0002E3r 2  91 84                sta     (TXTTAB),y
0002E5r 2  A5 84                lda     TXTTAB
0002E7r 2               .ifdef CONFIG_2
0002E7r 2               		clc
0002E7r 2               .endif
0002E7r 2  69 02                adc     #$02
0002E9r 2  85 86                sta     VARTAB
0002EBr 2  A5 85                lda     TXTTAB+1
0002EDr 2  69 00                adc     #$00
0002EFr 2  85 87                sta     VARTAB+1
0002F1r 2               ; ----------------------------------------------------------------------------
0002F1r 2               SETPTRS:
0002F1r 2  20 rr rr             jsr     STXTPT
0002F4r 2               .ifdef CONFIG_11A
0002F4r 2                       lda     #$00
0002F4r 2               
0002F4r 2               ; ----------------------------------------------------------------------------
0002F4r 2               ; "CLEAR" STATEMENT
0002F4r 2               ; ----------------------------------------------------------------------------
0002F4r 2               CLEAR:
0002F4r 2                       bne     L256A
0002F4r 2               .endif
0002F4r 2               CLEARC:
0002F4r 2               .ifdef KBD
0002F4r 2                       lda     #<CONST_MEMSIZ
0002F4r 2                       ldy     #>CONST_MEMSIZ
0002F4r 2               .else
0002F4r 2  A5 90                lda     MEMSIZ
0002F6r 2  A4 91                ldy     MEMSIZ+1
0002F8r 2               .endif
0002F8r 2  85 8C                sta     FRETOP
0002FAr 2  84 8D                sty     FRETOP+1
0002FCr 2               .ifdef CONFIG_CBM_ALL
0002FCr 2                       jsr     CLALL
0002FCr 2               .endif
0002FCr 2  A5 86                lda     VARTAB
0002FEr 2  A4 87                ldy     VARTAB+1
000300r 2  85 88                sta     ARYTAB
000302r 2  84 89                sty     ARYTAB+1
000304r 2  85 8A                sta     STREND
000306r 2  84 8B                sty     STREND+1
000308r 2  20 rr rr             jsr     RESTORE
00030Br 2               ; ----------------------------------------------------------------------------
00030Br 2               STKINI:
00030Br 2  A2 73                ldx     #TEMPST
00030Dr 2  86 70                stx     TEMPPT
00030Fr 2  68                   pla
000310r 2               .ifdef CONFIG_2
000310r 2               		tay
000310r 2               .else
000310r 2  8D FD 01             sta     STACK+STACK_TOP+1
000313r 2               .endif
000313r 2  68                   pla
000314r 2               .ifndef CONFIG_2
000314r 2  8D FE 01             sta     STACK+STACK_TOP+2
000317r 2               .endif
000317r 2  A2 FC                ldx     #STACK_TOP
000319r 2  9A                   txs
00031Ar 2               .ifdef CONFIG_2
00031Ar 2                       pha
00031Ar 2                       tya
00031Ar 2                       pha
00031Ar 2               .endif
00031Ar 2  A9 00                lda     #$00
00031Cr 2  85 97                sta     OLDTEXT+1
00031Er 2  85 66                sta     SUBFLG
000320r 2               L256A:
000320r 2  60                   rts
000321r 2               
000321r 2               ; ----------------------------------------------------------------------------
000321r 2               ; SET TXTPTR TO BEGINNING OF PROGRAM
000321r 2               ; ----------------------------------------------------------------------------
000321r 2               STXTPT:
000321r 2  18                   clc
000322r 2  A5 84                lda     TXTTAB
000324r 2  69 FF                adc     #$FF
000326r 2  85 CE                sta     TXTPTR
000328r 2  A5 85                lda     TXTTAB+1
00032Ar 2  69 FF                adc     #$FF
00032Cr 2  85 CF                sta     TXTPTR+1
00032Er 2  60                   rts
00032Fr 2               
00032Fr 2               ; ----------------------------------------------------------------------------
00032Fr 2               .ifdef KBD
00032Fr 2               LE4C0:
00032Fr 2                       ldy     #<LE444
00032Fr 2                       ldx     #>LE444
00032Fr 2               LE4C4:
00032Fr 2                       jsr     LFFD6
00032Fr 2                       jsr     LFFED
00032Fr 2                       lda     $0504
00032Fr 2                       clc
00032Fr 2                       adc     #$08
00032Fr 2                       sta     $0504
00032Fr 2                       rts
00032Fr 2               
00032Fr 2               CMPJMPADRS:
00032Fr 2                       lda     1,x
00032Fr 2                       cmp     JMPADRS+2
00032Fr 2                       bne     LE4DE
00032Fr 2                       lda     0,x
00032Fr 2                       cmp     JMPADRS+1
00032Fr 2               LE4DE:
00032Fr 2                       rts
00032Fr 2               .endif
00032Fr 2               
00032Fr 2               ; ----------------------------------------------------------------------------
00032Fr 2               ; "LIST" STATEMENT
00032Fr 2               ; ----------------------------------------------------------------------------
00032Fr 2               LIST:
00032Fr 2               .ifdef KBD
00032Fr 2                       jsr     LE440
00032Fr 2                       bne     LE4DE
00032Fr 2                       pla
00032Fr 2                       pla
00032Fr 2               L25A6:
00032Fr 2                       jsr     CRDO
00032Fr 2               .else
00032Fr 2                 .ifdef MICROTAN
00032Fr 2                       php
00032Fr 2                       jmp     LE21C ; patch
00032Fr 2               LC57E:
00032Fr 2                 .else
00032Fr 2  90 06                bcc     L2581
000331r 2  F0 04                beq     L2581
000333r 2  C9 A7                cmp     #TOKEN_MINUS
000335r 2  D0 E9                bne     L256A
000337r 2               L2581:
000337r 2  20 rr rr             jsr     LINGET
00033Ar 2                 .endif
00033Ar 2  20 rr rr             jsr     FNDLIN
00033Dr 2                 .ifdef MICROTAN
00033Dr 2                       plp
00033Dr 2                       beq     L2598
00033Dr 2                 .endif
00033Dr 2  20 CD 00             jsr     CHRGOT
000340r 2                 .ifdef MICROTAN
000340r 2                       beq     L25A6
000340r 2                 .else
000340r 2  F0 0C                beq     L2598
000342r 2                 .endif
000342r 2  C9 A7                cmp     #TOKEN_MINUS
000344r 2  D0 94                bne     L2520
000346r 2  20 C7 00             jsr     CHRGET
000349r 2                 .ifdef MICROTAN
000349r 2                       beq     L2598
000349r 2                       jsr     LINGET
000349r 2                       beq     L25A6
000349r 2                       rts
000349r 2                 .else
000349r 2  20 rr rr             jsr     LINGET
00034Cr 2  D0 8C                bne     L2520
00034Er 2                 .endif
00034Er 2               L2598:
00034Er 2                 .ifndef MICROTAN
00034Er 2  68                   pla
00034Fr 2  68                   pla
000350r 2  A5 11                lda     LINNUM
000352r 2  05 12                ora     LINNUM+1
000354r 2  D0 06                bne     L25A6
000356r 2                 .endif
000356r 2  A9 FF                lda     #$FF
000358r 2  85 11                sta     LINNUM
00035Ar 2  85 12                sta     LINNUM+1
00035Cr 2               L25A6:
00035Cr 2                 .ifdef MICROTAN
00035Cr 2                       pla
00035Cr 2                       pla
00035Cr 2                 .endif
00035Cr 2               L25A6X:
00035Cr 2               .endif
00035Cr 2  A0 01                ldy     #$01
00035Er 2               .ifdef CONFIG_DATAFLG
00035Er 2  84 65                sty     DATAFLG
000360r 2               .endif
000360r 2  B1 B5                lda     (LOWTRX),y
000362r 2  F0 41                beq     L25E5
000364r 2               .ifdef MICROTAN
000364r 2                       jmp     LE21F
000364r 2               LC5A9:
000364r 2               .else
000364r 2  20 rr rr             jsr     ISCNTC
000367r 2               .endif
000367r 2               .ifndef KBD
000367r 2  20 rr rr             jsr     CRDO
00036Ar 2               .endif
00036Ar 2  C8                   iny
00036Br 2  B1 B5                lda     (LOWTRX),y
00036Dr 2  AA                   tax
00036Er 2  C8                   iny
00036Fr 2  B1 B5                lda     (LOWTRX),y
000371r 2  C5 12                cmp     LINNUM+1
000373r 2  D0 04                bne     L25C1
000375r 2  E4 11                cpx     LINNUM
000377r 2  F0 02                beq     L25C3
000379r 2               L25C1:
000379r 2  B0 2A                bcs     L25E5
00037Br 2               ; ---LIST ONE LINE----------------
00037Br 2               L25C3:
00037Br 2  84 A2                sty     FORPNT
00037Dr 2  20 rr rr             jsr     LINPRT
000380r 2  A9 20                lda     #$20
000382r 2               L25CA:
000382r 2  A4 A2                ldy     FORPNT
000384r 2  29 7F                and     #$7F
000386r 2               L25CE:
000386r 2  20 rr rr             jsr     OUTDO
000389r 2               .ifdef CONFIG_DATAFLG
000389r 2  C9 22                cmp     #$22
00038Br 2  D0 06                bne     LA519
00038Dr 2  A5 65                lda     DATAFLG
00038Fr 2  49 FF                eor     #$FF
000391r 2  85 65                sta     DATAFLG
000393r 2               LA519:
000393r 2               .endif
000393r 2  C8                   iny
000394r 2               .ifdef CONFIG_11
000394r 2                       beq     L25E5
000394r 2               .endif
000394r 2  B1 B5                lda     (LOWTRX),y
000396r 2  D0 10                bne     L25E8
000398r 2  A8                   tay
000399r 2  B1 B5                lda     (LOWTRX),y
00039Br 2  AA                   tax
00039Cr 2  C8                   iny
00039Dr 2  B1 B5                lda     (LOWTRX),y
00039Fr 2  86 B5                stx     LOWTRX
0003A1r 2  85 B6                sta     LOWTRX+1
0003A3r 2               .ifdef MICROTAN
0003A3r 2                       bne     L25A6X
0003A3r 2               .else
0003A3r 2  D0 B7                bne     L25A6
0003A5r 2               .endif
0003A5r 2               L25E5:
0003A5r 2  4C rr rr             jmp     RESTART
0003A8r 2               L25E8:
0003A8r 2  10 DC                bpl     L25CE
0003AAr 2               .ifdef CONFIG_DATAFLG
0003AAr 2  C9 FF                cmp     #$FF
0003ACr 2  F0 D8                beq     L25CE
0003AEr 2  24 65                bit     DATAFLG
0003B0r 2  30 D4                bmi     L25CE
0003B2r 2               .endif
0003B2r 2  38                   sec
0003B3r 2  E9 7F                sbc     #$7F
0003B5r 2  AA                   tax
0003B6r 2  84 A2                sty     FORPNT
0003B8r 2  A0 FF                ldy     #$FF
0003BAr 2               L25F2:
0003BAr 2  CA                   dex
0003BBr 2  F0 08                beq     L25FD
0003BDr 2               L25F5:
0003BDr 2  C8                   iny
0003BEr 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003C1r 2  10 FA                bpl     L25F5
0003C3r 2  30 F5                bmi     L25F2
0003C5r 2               L25FD:
0003C5r 2  C8                   iny
0003C6r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003C9r 2  30 B7                bmi     L25CA
0003CBr 2  20 rr rr             jsr     OUTDO
0003CEr 2  D0 F5                bne     L25FD	; always
0003D0r 2               
0003D0r 2               
0003D0r 1               .include "flow1.s"
0003D0r 2               .segment "CODE"
0003D0r 2               
0003D0r 2               ; ----------------------------------------------------------------------------
0003D0r 2               ; "FOR" STATEMENT
0003D0r 2               ;
0003D0r 2               ; FOR PUSHES 18 BYTES ON THE STACK:
0003D0r 2               ; 2 -- TXTPTR
0003D0r 2               ; 2 -- LINE NUMBER
0003D0r 2               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
0003D0r 2               ; 1 -- STEP SIGN
0003D0r 2               ; 5 -- STEP VALUE
0003D0r 2               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
0003D0r 2               ; 1 -- FOR TOKEN ($81)
0003D0r 2               ; ----------------------------------------------------------------------------
0003D0r 2               FOR:
0003D0r 2  A9 80                lda     #$80
0003D2r 2  85 66                sta     SUBFLG
0003D4r 2  20 rr rr             jsr     LET
0003D7r 2  20 rr rr             jsr     GTFORPNT
0003DAr 2  D0 05                bne     L2619
0003DCr 2  8A                   txa
0003DDr 2  69 0D                adc     #FOR_STACK1
0003DFr 2  AA                   tax
0003E0r 2  9A                   txs
0003E1r 2               L2619:
0003E1r 2  68                   pla
0003E2r 2  68                   pla
0003E3r 2  A9 08                lda     #FOR_STACK2
0003E5r 2  20 rr rr             jsr     CHKMEM
0003E8r 2  20 rr rr             jsr     DATAN
0003EBr 2  18                   clc
0003ECr 2  98                   tya
0003EDr 2  65 CE                adc     TXTPTR
0003EFr 2  48                   pha
0003F0r 2  A5 CF                lda     TXTPTR+1
0003F2r 2  69 00                adc     #$00
0003F4r 2  48                   pha
0003F5r 2  A5 93                lda     CURLIN+1
0003F7r 2  48                   pha
0003F8r 2  A5 92                lda     CURLIN
0003FAr 2  48                   pha
0003FBr 2  A9 A0                lda     #TOKEN_TO
0003FDr 2  20 rr rr             jsr     SYNCHR
000400r 2  20 rr rr             jsr     CHKNUM
000403r 2  20 rr rr             jsr     FRMNUM
000406r 2  A5 BB                lda     FACSIGN
000408r 2  09 7F                ora     #$7F
00040Ar 2  25 B8                and     FAC+1
00040Cr 2  85 B8                sta     FAC+1
00040Er 2  A9 rr                lda     #<STEP
000410r 2  A0 rr                ldy     #>STEP
000412r 2  85 7C                sta     INDEX
000414r 2  84 7D                sty     INDEX+1
000416r 2  4C rr rr             jmp     FRM_STACK3
000419r 2               
000419r 2               ; ----------------------------------------------------------------------------
000419r 2               ; "STEP" PHRASE OF "FOR" STATEMENT
000419r 2               ; ----------------------------------------------------------------------------
000419r 2               STEP:
000419r 2  A9 rr                lda     #<CON_ONE
00041Br 2  A0 rr                ldy     #>CON_ONE
00041Dr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
000420r 2  20 CD 00             jsr     CHRGOT
000423r 2  C9 A5                cmp     #TOKEN_STEP
000425r 2  D0 06                bne     L2665
000427r 2  20 C7 00             jsr     CHRGET
00042Ar 2  20 rr rr             jsr     FRMNUM
00042Dr 2               L2665:
00042Dr 2  20 rr rr             jsr     SIGN
000430r 2  20 rr rr             jsr     FRM_STACK2
000433r 2  A5 A3                lda     FORPNT+1
000435r 2  48                   pha
000436r 2  A5 A2                lda     FORPNT
000438r 2  48                   pha
000439r 2  A9 81                lda     #$81
00043Br 2  48                   pha
00043Cr 2               
00043Cr 2               ; ----------------------------------------------------------------------------
00043Cr 2               ; PERFORM NEXT STATEMENT
00043Cr 2               ; ----------------------------------------------------------------------------
00043Cr 2               NEWSTT:
00043Cr 2  20 rr rr             jsr     ISCNTC
00043Fr 2  A5 CE                lda     TXTPTR
000441r 2  A4 CF                ldy     TXTPTR+1
000443r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
000443r 2                       cpy     #>INPUTBUFFER
000443r 2                 .ifdef CBM2
000443r 2                       nop
000443r 2                 .endif
000443r 2                       beq     LC6D4
000443r 2               .else
000443r 2               ; BUG on AppleSoft I,
000443r 2               ; fixed differently on AppleSoft II (ldx/inx)
000443r 2  F0 06                beq     L2683
000445r 2               .endif
000445r 2  85 96                sta     OLDTEXT
000447r 2  84 97                sty     OLDTEXT+1
000449r 2               LC6D4:
000449r 2  A0 00                ldy     #$00
00044Br 2               L2683:
00044Br 2  B1 CE                lda     (TXTPTR),y
00044Dr 2               .ifndef CONFIG_11
00044Dr 2  F0 07                beq     LA5DC	; old: 1 cycle more on generic case
00044Fr 2  C9 3A                cmp     #$3A
000451r 2  F0 1D                beq     NEWSTT2
000453r 2               SYNERR1:
000453r 2  4C rr rr             jmp     SYNERR
000456r 2               LA5DC:
000456r 2               .else
000456r 2                       bne     COLON; new: 1 cycle more on ":" case
000456r 2               .endif
000456r 2  A0 02                ldy     #$02
000458r 2  B1 CE                lda     (TXTPTR),y
00045Ar 2  18                   clc
00045Br 2               .ifdef CONFIG_2
00045Br 2                       jeq     L2701
00045Br 2               .else
00045Br 2  F0 69                beq     L2701
00045Dr 2               .endif
00045Dr 2  C8                   iny
00045Er 2  B1 CE                lda     (TXTPTR),y
000460r 2  85 92                sta     CURLIN
000462r 2  C8                   iny
000463r 2  B1 CE                lda     (TXTPTR),y
000465r 2  85 93                sta     CURLIN+1
000467r 2  98                   tya
000468r 2  65 CE                adc     TXTPTR
00046Ar 2  85 CE                sta     TXTPTR
00046Cr 2  90 02                bcc     NEWSTT2
00046Er 2  E6 CF                inc     TXTPTR+1
000470r 2               NEWSTT2:
000470r 2  20 C7 00             jsr     CHRGET
000473r 2  20 rr rr             jsr     EXECUTE_STATEMENT
000476r 2  4C rr rr             jmp     NEWSTT
000479r 2               
000479r 2               ; ----------------------------------------------------------------------------
000479r 2               ; EXECUTE A STATEMENT
000479r 2               ;
000479r 2               ; (A) IS FIRST CHAR OF STATEMENT
000479r 2               ; CARRY IS SET
000479r 2               ; ----------------------------------------------------------------------------
000479r 2               EXECUTE_STATEMENT:
000479r 2               .ifndef CONFIG_11A
000479r 2  F0 74                beq     RET1
00047Br 2               .else
00047Br 2                       beq     RET2
00047Br 2               .endif
00047Br 2               .ifndef CONFIG_11
00047Br 2  38                   sec
00047Cr 2               .endif
00047Cr 2               EXECUTE_STATEMENT1:
00047Cr 2  E9 80                sbc     #$80
00047Er 2               .ifndef CONFIG_11
00047Er 2  B0 03 4C rr          jcc     LET	; old: 1 cycle more on instr.
000482r 2  rr           
000483r 2               .else
000483r 2                       bcc     LET1; new: 1 cycle more on assignment
000483r 2               .endif
000483r 2  C9 1F                cmp     #NUM_TOKENS
000485r 2               .ifdef CONFIG_2
000485r 2                       bcs     LC721
000485r 2               .else
000485r 2  B0 CC                bcs     SYNERR1
000487r 2               .endif
000487r 2  0A                   asl     a
000488r 2  A8                   tay
000489r 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE+1,y
00048Cr 2  48                   pha
00048Dr 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE,y
000490r 2  48                   pha
000491r 2  4C C7 00             jmp     CHRGET
000494r 2               
000494r 2               .ifdef CONFIG_11
000494r 2               LET1:
000494r 2                       jmp     LET
000494r 2               
000494r 2               COLON:
000494r 2                       cmp     #$3A
000494r 2                       beq     NEWSTT2
000494r 2               SYNERR1:
000494r 2                       jmp     SYNERR
000494r 2               .endif
000494r 2               
000494r 2               .ifdef CONFIG_2; GO TO
000494r 2               LC721:
000494r 2                       cmp     #TOKEN_GO-$80
000494r 2                       bne     SYNERR1
000494r 2                       jsr     CHRGET
000494r 2                       lda     #TOKEN_TO
000494r 2                       jsr     SYNCHR
000494r 2                       jmp     GOTO
000494r 2               .endif
000494r 2               
000494r 2               ; ----------------------------------------------------------------------------
000494r 2               ; "RESTORE" STATEMENT
000494r 2               ; ----------------------------------------------------------------------------
000494r 2               RESTORE:
000494r 2  38                   sec
000495r 2  A5 84                lda     TXTTAB
000497r 2  E9 01                sbc     #$01
000499r 2  A4 85                ldy     TXTTAB+1
00049Br 2  B0 01                bcs     SETDA
00049Dr 2  88                   dey
00049Er 2               SETDA:
00049Er 2  85 9A                sta     DATPTR
0004A0r 2  84 9B                sty     DATPTR+1
0004A2r 2               RET2:
0004A2r 2  60                   rts
0004A3r 2               
0004A3r 2               .include "iscntc.s"
0004A3r 3               .segment "CODE"
0004A3r 3               ; ----------------------------------------------------------------------------
0004A3r 3               ; SEE IF CONTROL-C TYPED
0004A3r 3               ; ----------------------------------------------------------------------------
0004A3r 3               .ifndef CONFIG_CBM_ALL
0004A3r 3               .include "cbm_iscntc.s"
0004A3r 4               ; nothing - ISCNTC is a KERNAL function
0004A3r 4               
0004A3r 3               .endif
0004A3r 3               .ifdef KBD
0004A3r 3               .include "kbd_iscntc.s"
0004A3r 3               .endif
0004A3r 3               .ifdef OSI
0004A3r 3               .include "osi_iscntc.s"
0004A3r 4               .segment "CODE"
0004A3r 4               ISCNTC:
0004A3r 4               .ifndef OSI
0004A3r 4                       lda     $D011           ; keyboard status
0004A3r 4                       bmi     L0ECC           ; branch if key pressed
0004A3r 4                       rts                     ; return
0004A3r 4               L0ECC:
0004A3r 4                       lda     $D010           ; get key data
0004A3r 4                       cmp     #$83            ; is it Ctrl-C ?
0004A3r 4               ;!!! *used*to* run into "STOP"
0004A3r 4               .else
0004A3r 4  20 rr rr             JSR     READ_BYTE_NB
0004A6r 4  B0 01                BCS     VER
0004A8r 4               NOT_CNTC:
0004A8r 4  60                   RTS
0004A9r 4               VER:
0004A9r 4  C9 03                CMP     #3
0004ABr 4  D0 FB                BNE     NOT_CNTC
0004ADr 4               .endif
0004ADr 4               
0004ADr 3               .endif
0004ADr 3               .ifdef APPLE
0004ADr 3               .include "apple_iscntc.s"
0004ADr 3               .endif
0004ADr 3               .ifdef KIM
0004ADr 3               .include "kim_iscntc.s"
0004ADr 3               .endif
0004ADr 3               .ifdef MICROTAN
0004ADr 3               .include "microtan_iscntc.s"
0004ADr 3               .endif
0004ADr 3               ;!!! runs into "STOP"
0004ADr 3               
0004ADr 2               ;!!! runs into "STOP"
0004ADr 2               ; ----------------------------------------------------------------------------
0004ADr 2               ; "STOP" STATEMENT
0004ADr 2               ; ----------------------------------------------------------------------------
0004ADr 2               STOP:
0004ADr 2  B0 01                bcs     END2
0004AFr 2               
0004AFr 2               ; ----------------------------------------------------------------------------
0004AFr 2               ; "END" STATEMENT
0004AFr 2               ; ----------------------------------------------------------------------------
0004AFr 2               END:
0004AFr 2  18                   clc
0004B0r 2               END2:
0004B0r 2  D0 3D                bne     RET1
0004B2r 2  A5 CE                lda     TXTPTR
0004B4r 2  A4 CF                ldy     TXTPTR+1
0004B6r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
0004B6r 2               ; BUG on AppleSoft I
0004B6r 2               ; fix exists on AppleSoft II
0004B6r 2               ; TXTPTR+1 will always be > 0
0004B6r 2                       ldx     CURLIN+1
0004B6r 2                       inx
0004B6r 2               .endif
0004B6r 2  F0 0C                beq     END4
0004B8r 2  85 96                sta     OLDTEXT
0004BAr 2  84 97                sty     OLDTEXT+1
0004BCr 2               CONTROL_C_TYPED:
0004BCr 2  A5 92                lda     CURLIN
0004BEr 2  A4 93                ldy     CURLIN+1
0004C0r 2  85 94                sta     OLDLIN
0004C2r 2  84 95                sty     OLDLIN+1
0004C4r 2               END4:
0004C4r 2  68                   pla
0004C5r 2  68                   pla
0004C6r 2               L2701:
0004C6r 2  A9 rr                lda     #<QT_BREAK
0004C8r 2  A0 rr                ldy     #>QT_BREAK
0004CAr 2               .ifndef KBD
0004CAr 2  A2 00                ldx     #$00
0004CCr 2  86 69                stx     Z14
0004CEr 2               .endif
0004CEr 2  90 03                bcc     L270E
0004D0r 2  4C rr rr             jmp     PRINT_ERROR_LINNUM
0004D3r 2               L270E:
0004D3r 2  4C rr rr             jmp     RESTART
0004D6r 2               .ifdef KBD
0004D6r 2               LE664:
0004D6r 2                       tay
0004D6r 2                       jmp     SNGFLT
0004D6r 2               .endif
0004D6r 2               
0004D6r 2               ; ----------------------------------------------------------------------------
0004D6r 2               ; "CONT" COMMAND
0004D6r 2               ; ----------------------------------------------------------------------------
0004D6r 2               CONT:
0004D6r 2  D0 17                bne     RET1
0004D8r 2  A2 1E                ldx     #ERR_CANTCONT
0004DAr 2  A4 97                ldy     OLDTEXT+1
0004DCr 2  D0 03                bne     L271C
0004DEr 2  4C rr rr             jmp     ERROR
0004E1r 2               L271C:
0004E1r 2  A5 96                lda     OLDTEXT
0004E3r 2  85 CE                sta     TXTPTR
0004E5r 2  84 CF                sty     TXTPTR+1
0004E7r 2  A5 94                lda     OLDLIN
0004E9r 2  A4 95                ldy     OLDLIN+1
0004EBr 2  85 92                sta     CURLIN
0004EDr 2  84 93                sty     CURLIN+1
0004EFr 2               RET1:
0004EFr 2  60                   rts
0004F0r 2               
0004F0r 2               .ifdef KBD
0004F0r 2               PRT:
0004F0r 2                       jsr     GETBYT
0004F0r 2                       txa
0004F0r 2               ; not ROR bug safe
0004F0r 2                       ror     a
0004F0r 2                       ror     a
0004F0r 2                       ror     a
0004F0r 2                       sta     $8F
0004F0r 2                       rts
0004F0r 2               
0004F0r 2               LE68C:
0004F0r 2                       ldy     #$12
0004F0r 2               LE68E:
0004F0r 2                       lda     LEA30,y
0004F0r 2                       sta     $03A2,y
0004F0r 2                       dey
0004F0r 2                       bpl     LE68E
0004F0r 2                       rts
0004F0r 2               .endif
0004F0r 2               
0004F0r 2               .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0004F0r 2               ; CBM1 has the keyword removed,
0004F0r 2               ; but the code is still here
0004F0r 2               NULL:
0004F0r 2  20 rr rr             jsr     GETBYT
0004F3r 2  D0 FA                bne     RET1
0004F5r 2  E8                   inx
0004F6r 2  E0 0A                cpx     #NULL_MAX
0004F8r 2  B0 04                bcs     L2739
0004FAr 2  CA                   dex
0004FBr 2  86 0D                stx     Z15
0004FDr 2  60                   rts
0004FEr 2               L2739:
0004FEr 2  4C rr rr             jmp     IQERR
000501r 2               .endif
000501r 2               .ifndef CONFIG_11A
000501r 2               CLEAR:
000501r 2  D0 EC                bne     RET1
000503r 2  4C rr rr             jmp     CLEARC
000506r 2               .endif
000506r 2               
000506r 1               .include "loadsave.s"
000506r 2               .segment "CODE"
000506r 2               
000506r 2               .ifdef APPLE
000506r 2               .include "apple_loadsave.s"
000506r 2               .endif
000506r 2               .ifdef KIM
000506r 2               .include "kim_loadsave.s"
000506r 2               .endif
000506r 2               .ifdef MICROTAN
000506r 2               .include "microtan_loadsave.s"
000506r 2               .endif
000506r 2               
000506r 1               .include "flow2.s"
000506r 2               .segment "CODE"
000506r 2               ; ----------------------------------------------------------------------------
000506r 2               ; "RUN" COMMAND
000506r 2               ; ----------------------------------------------------------------------------
000506r 2               RUN:
000506r 2  D0 03                bne     L27CF
000508r 2  4C rr rr             jmp     SETPTRS
00050Br 2               L27CF:
00050Br 2  20 rr rr             jsr     CLEARC
00050Er 2  4C rr rr             jmp     L27E9
000511r 2               
000511r 2               ; ----------------------------------------------------------------------------
000511r 2               ; "GOSUB" STATEMENT
000511r 2               ;
000511r 2               ; LEAVES 7 BYTES ON STACK:
000511r 2               ; 2 -- RETURN ADDRESS (NEWSTT)
000511r 2               ; 2 -- TXTPTR
000511r 2               ; 2 -- LINE #
000511r 2               ; 1 -- GOSUB TOKEN
000511r 2               ; ----------------------------------------------------------------------------
000511r 2               GOSUB:
000511r 2  A9 03                lda     #$03
000513r 2  20 rr rr             jsr     CHKMEM
000516r 2  A5 CF                lda     TXTPTR+1
000518r 2  48                   pha
000519r 2  A5 CE                lda     TXTPTR
00051Br 2  48                   pha
00051Cr 2  A5 93                lda     CURLIN+1
00051Er 2  48                   pha
00051Fr 2  A5 92                lda     CURLIN
000521r 2  48                   pha
000522r 2  A9 8F                lda     #TOKEN_GOSUB
000524r 2  48                   pha
000525r 2               L27E9:
000525r 2  20 CD 00             jsr     CHRGOT
000528r 2  20 rr rr             jsr     GOTO
00052Br 2  4C rr rr             jmp     NEWSTT
00052Er 2               
00052Er 2               ; ----------------------------------------------------------------------------
00052Er 2               ; "GOTO" STATEMENT
00052Er 2               ; ALSO USED BY "RUN" AND "GOSUB"
00052Er 2               ; ----------------------------------------------------------------------------
00052Er 2               GOTO:
00052Er 2  20 rr rr             jsr     LINGET
000531r 2  20 rr rr             jsr     REMN
000534r 2  A5 93                lda     CURLIN+1
000536r 2  C5 12                cmp     LINNUM+1
000538r 2  B0 0B                bcs     L2809
00053Ar 2  98                   tya
00053Br 2  38                   sec
00053Cr 2  65 CE                adc     TXTPTR
00053Er 2  A6 CF                ldx     TXTPTR+1
000540r 2  90 07                bcc     L280D
000542r 2  E8                   inx
000543r 2  B0 04                bcs     L280D
000545r 2               L2809:
000545r 2  A5 84                lda     TXTTAB
000547r 2  A6 85                ldx     TXTTAB+1
000549r 2               L280D:
000549r 2               .ifdef KBD
000549r 2                       jsr     LF457
000549r 2                       bne     UNDERR
000549r 2               .else
000549r 2  20 rr rr             jsr     FL1
00054Cr 2  90 1E                bcc     UNDERR
00054Er 2               .endif
00054Er 2  A5 B5                lda     LOWTRX
000550r 2  E9 01                sbc     #$01
000552r 2  85 CE                sta     TXTPTR
000554r 2  A5 B6                lda     LOWTRX+1
000556r 2  E9 00                sbc     #$00
000558r 2  85 CF                sta     TXTPTR+1
00055Ar 2               L281E:
00055Ar 2  60                   rts
00055Br 2               
00055Br 2               ; ----------------------------------------------------------------------------
00055Br 2               ; "POP" AND "RETURN" STATEMENTS
00055Br 2               ; ----------------------------------------------------------------------------
00055Br 2               POP:
00055Br 2  D0 FD                bne     L281E
00055Dr 2  A9 FF                lda     #$FF
00055Fr 2               .ifdef CONFIG_2A
00055Fr 2                       sta     FORPNT+1 ; bugfix, wrong in AppleSoft II
00055Fr 2               .else
00055Fr 2  85 A2                sta     FORPNT
000561r 2               .endif
000561r 2  20 rr rr             jsr     GTFORPNT
000564r 2  9A                   txs
000565r 2  C9 8F                cmp     #TOKEN_GOSUB
000567r 2  F0 0B                beq     RETURN
000569r 2  A2 04                ldx     #ERR_NOGOSUB
00056Br 2  2C                   .byte   $2C
00056Cr 2               UNDERR:
00056Cr 2  A2 0E                ldx     #ERR_UNDEFSTAT
00056Er 2  4C rr rr             jmp     ERROR
000571r 2               ; ----------------------------------------------------------------------------
000571r 2               SYNERR2:
000571r 2  4C rr rr             jmp     SYNERR
000574r 2               ; ----------------------------------------------------------------------------
000574r 2               RETURN:
000574r 2  68                   pla
000575r 2  68                   pla
000576r 2  85 92                sta     CURLIN
000578r 2  68                   pla
000579r 2  85 93                sta     CURLIN+1
00057Br 2  68                   pla
00057Cr 2  85 CE                sta     TXTPTR
00057Er 2  68                   pla
00057Fr 2  85 CF                sta     TXTPTR+1
000581r 2               
000581r 2               ; ----------------------------------------------------------------------------
000581r 2               ; "DATA" STATEMENT
000581r 2               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
000581r 2               ; ----------------------------------------------------------------------------
000581r 2               DATA:
000581r 2  20 rr rr             jsr     DATAN
000584r 2               
000584r 2               ; ----------------------------------------------------------------------------
000584r 2               ; ADD (Y) TO TXTPTR
000584r 2               ; ----------------------------------------------------------------------------
000584r 2               ADDON:
000584r 2  98                   tya
000585r 2  18                   clc
000586r 2  65 CE                adc     TXTPTR
000588r 2  85 CE                sta     TXTPTR
00058Ar 2  90 02                bcc     L2852
00058Cr 2  E6 CF                inc     TXTPTR+1
00058Er 2               L2852:
00058Er 2  60                   rts
00058Fr 2               
00058Fr 2               ; ----------------------------------------------------------------------------
00058Fr 2               ; SCAN AHEAD TO NEXT ":" OR EOL
00058Fr 2               ; ----------------------------------------------------------------------------
00058Fr 2               DATAN:
00058Fr 2  A2 3A                ldx     #$3A
000591r 2  2C                   .byte   $2C
000592r 2               REMN:
000592r 2  A2 00                ldx     #$00
000594r 2  86 60                stx     CHARAC
000596r 2  A0 00                ldy     #$00
000598r 2  84 61                sty     ENDCHR
00059Ar 2               L285E:
00059Ar 2  A5 61                lda     ENDCHR
00059Cr 2  A6 60                ldx     CHARAC
00059Er 2  85 60                sta     CHARAC
0005A0r 2  86 61                stx     ENDCHR
0005A2r 2               L2866:
0005A2r 2  B1 CE                lda     (TXTPTR),y
0005A4r 2  F0 E8                beq     L2852
0005A6r 2  C5 61                cmp     ENDCHR
0005A8r 2  F0 E4                beq     L2852
0005AAr 2  C8                   iny
0005ABr 2  C9 22                cmp     #$22
0005ADr 2               .ifndef CONFIG_11
0005ADr 2  F0 EB                beq     L285E; old: swap & cont is faster
0005AFr 2  D0 F1                bne     L2866
0005B1r 2               .else
0005B1r 2                       bne     L2866; new: cont is faster
0005B1r 2                       beq     L285E
0005B1r 2               .endif
0005B1r 2               
0005B1r 2               ; ----------------------------------------------------------------------------
0005B1r 2               ; "IF" STATEMENT
0005B1r 2               ; ----------------------------------------------------------------------------
0005B1r 2               IF:
0005B1r 2  20 rr rr             jsr     FRMEVL
0005B4r 2  20 CD 00             jsr     CHRGOT
0005B7r 2  C9 8B                cmp     #TOKEN_GOTO
0005B9r 2  F0 05                beq     L2884
0005BBr 2  A9 A3                lda     #TOKEN_THEN
0005BDr 2  20 rr rr             jsr     SYNCHR
0005C0r 2               L2884:
0005C0r 2  A5 B7                lda     FAC
0005C2r 2  D0 05                bne     L288D
0005C4r 2               
0005C4r 2               ; ----------------------------------------------------------------------------
0005C4r 2               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
0005C4r 2               ; ----------------------------------------------------------------------------
0005C4r 2               REM:
0005C4r 2  20 rr rr             jsr     REMN
0005C7r 2  F0 BB                beq     ADDON
0005C9r 2               L288D:
0005C9r 2  20 CD 00             jsr     CHRGOT
0005CCr 2  B0 03                bcs     L2895
0005CEr 2  4C rr rr             jmp     GOTO
0005D1r 2               L2895:
0005D1r 2  4C rr rr             jmp     EXECUTE_STATEMENT
0005D4r 2               
0005D4r 2               ; ----------------------------------------------------------------------------
0005D4r 2               ; "ON" STATEMENT
0005D4r 2               ;
0005D4r 2               ; ON <EXP> GOTO <LIST>
0005D4r 2               ; ON <EXP> GOSUB <LIST>
0005D4r 2               ; ----------------------------------------------------------------------------
0005D4r 2               ON:
0005D4r 2  20 rr rr             jsr     GETBYT
0005D7r 2  48                   pha
0005D8r 2  C9 8F                cmp     #TOKEN_GOSUB
0005DAr 2  F0 04                beq     L28A4
0005DCr 2               L28A0:
0005DCr 2  C9 8B                cmp     #TOKEN_GOTO
0005DEr 2  D0 91                bne     SYNERR2
0005E0r 2               L28A4:
0005E0r 2  C6 BA                dec     FAC_LAST
0005E2r 2  D0 04                bne     L28AC
0005E4r 2  68                   pla
0005E5r 2  4C rr rr             jmp     EXECUTE_STATEMENT1
0005E8r 2               L28AC:
0005E8r 2  20 C7 00             jsr     CHRGET
0005EBr 2  20 rr rr             jsr     LINGET
0005EEr 2  C9 2C                cmp     #$2C
0005F0r 2  F0 EE                beq     L28A4
0005F2r 2  68                   pla
0005F3r 2               L28B7:
0005F3r 2  60                   rts
0005F4r 2               
0005F4r 1               .include "misc1.s"
0005F4r 2               .segment "CODE"
0005F4r 2               
0005F4r 2               ; ----------------------------------------------------------------------------
0005F4r 2               ; CONVERT LINE NUMBER
0005F4r 2               ; ----------------------------------------------------------------------------
0005F4r 2               LINGET:
0005F4r 2  A2 00                ldx     #$00
0005F6r 2  86 11                stx     LINNUM
0005F8r 2  86 12                stx     LINNUM+1
0005FAr 2               L28BE:
0005FAr 2  B0 F7                bcs     L28B7
0005FCr 2  E9 2F                sbc     #$2F
0005FEr 2  85 60                sta     CHARAC
000600r 2  A5 12                lda     LINNUM+1
000602r 2  85 7C                sta     INDEX
000604r 2  C9 19                cmp     #$19
000606r 2  B0 D4                bcs     L28A0
000608r 2               ; <<<<<DANGEROUS CODE>>>>>
000608r 2               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
000608r 2               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
000608r 2               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
000608r 2               ; FOR OTHER CALLS TO LINGET.
000608r 2               ;
000608r 2               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
000608r 2               ; THEN TYPE "GO TO 437761".
000608r 2               ;
000608r 2               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
000608r 2               ; THE PROBLEM.  ($AB00 - $ABFF)
000608r 2               ; <<<<<DANGEROUS CODE>>>>>
000608r 2  A5 11                lda     LINNUM
00060Ar 2  0A                   asl     a
00060Br 2  26 7C                rol     INDEX
00060Dr 2  0A                   asl     a
00060Er 2  26 7C                rol     INDEX
000610r 2  65 11                adc     LINNUM
000612r 2  85 11                sta     LINNUM
000614r 2  A5 7C                lda     INDEX
000616r 2  65 12                adc     LINNUM+1
000618r 2  85 12                sta     LINNUM+1
00061Ar 2  06 11                asl     LINNUM
00061Cr 2  26 12                rol     LINNUM+1
00061Er 2  A5 11                lda     LINNUM
000620r 2  65 60                adc     CHARAC
000622r 2  85 11                sta     LINNUM
000624r 2  90 02                bcc     L28EC
000626r 2  E6 12                inc     LINNUM+1
000628r 2               L28EC:
000628r 2  20 C7 00             jsr     CHRGET
00062Br 2  4C rr rr             jmp     L28BE
00062Er 2               
00062Er 2               ; ----------------------------------------------------------------------------
00062Er 2               ; "LET" STATEMENT
00062Er 2               ;
00062Er 2               ; LET <VAR> = <EXP>
00062Er 2               ; <VAR> = <EXP>
00062Er 2               ; ----------------------------------------------------------------------------
00062Er 2               LET:
00062Er 2  20 rr rr             jsr     PTRGET
000631r 2  85 A2                sta     FORPNT
000633r 2  84 A3                sty     FORPNT+1
000635r 2  A9 AE                lda     #TOKEN_EQUAL
000637r 2  20 rr rr             jsr     SYNCHR
00063Ar 2               .ifndef CONFIG_SMALL
00063Ar 2                       lda     VALTYP+1
00063Ar 2                       pha
00063Ar 2               .endif
00063Ar 2  A5 64                lda     VALTYP
00063Cr 2  48                   pha
00063Dr 2  20 rr rr             jsr     FRMEVL
000640r 2  68                   pla
000641r 2  2A                   rol     a
000642r 2  20 rr rr             jsr     CHKVAL
000645r 2  D0 03                bne     LETSTRING
000647r 2               .ifndef CONFIG_SMALL
000647r 2                       pla
000647r 2               LET2:
000647r 2                       bpl     L2923
000647r 2                       jsr     ROUND_FAC
000647r 2                       jsr     AYINT
000647r 2                       ldy     #$00
000647r 2                       lda     FAC+3
000647r 2                       sta     (FORPNT),y
000647r 2                       iny
000647r 2                       lda     FAC+4
000647r 2                       sta     (FORPNT),y
000647r 2                       rts
000647r 2               L2923:
000647r 2               .endif
000647r 2               
000647r 2               ; ----------------------------------------------------------------------------
000647r 2               ; REAL VARIABLE = EXPRESSION
000647r 2               ; ----------------------------------------------------------------------------
000647r 2  4C rr rr             jmp     SETFOR
00064Ar 2               LETSTRING:
00064Ar 2               .ifndef CONFIG_SMALL
00064Ar 2                       pla
00064Ar 2               .endif
00064Ar 2               
00064Ar 2               ; ----------------------------------------------------------------------------
00064Ar 2               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
00064Ar 2               ; ----------------------------------------------------------------------------
00064Ar 2               PUTSTR:
00064Ar 2               .ifdef CONFIG_CBM_ALL
00064Ar 2                       ldy     FORPNT+1
00064Ar 2                 .ifdef CBM1
00064Ar 2                       cpy     #$D0	; TI$
00064Ar 2                 .else
00064Ar 2                       cpy     #$DE
00064Ar 2                 .endif
00064Ar 2                       bne     LC92B
00064Ar 2                       jsr     FREFAC
00064Ar 2                       cmp     #$06
00064Ar 2                 .ifdef CBM2
00064Ar 2                       bne     IQERR1
00064Ar 2                 .else
00064Ar 2                       jne     IQERR
00064Ar 2                 .endif
00064Ar 2                       ldy     #$00
00064Ar 2                       sty     FAC
00064Ar 2                       sty     FACSIGN
00064Ar 2               LC8E8:
00064Ar 2                       sty     STRNG2
00064Ar 2                       jsr     LC91C
00064Ar 2                       jsr     MUL10
00064Ar 2                       inc     STRNG2
00064Ar 2                       ldy     STRNG2
00064Ar 2                       jsr     LC91C
00064Ar 2                       jsr     COPY_FAC_TO_ARG_ROUNDED
00064Ar 2                       tax
00064Ar 2                       beq     LC902
00064Ar 2                       inx
00064Ar 2                       txa
00064Ar 2                       jsr     LD9BF
00064Ar 2               LC902:
00064Ar 2                       ldy     STRNG2
00064Ar 2                       iny
00064Ar 2                       cpy     #$06
00064Ar 2                       bne     LC8E8
00064Ar 2                       jsr     MUL10
00064Ar 2                       jsr     QINT
00064Ar 2                       ldx     #$02
00064Ar 2                       sei
00064Ar 2               LC912:
00064Ar 2                       lda     FAC+2,x
00064Ar 2                       sta     TISTR,x
00064Ar 2                       dex
00064Ar 2                       bpl     LC912
00064Ar 2                       cli
00064Ar 2                       rts
00064Ar 2               LC91C:
00064Ar 2                       lda     (INDEX),y
00064Ar 2                       jsr     CHRGOT2
00064Ar 2                       bcc     LC926
00064Ar 2               IQERR1:
00064Ar 2                       jmp     IQERR
00064Ar 2               LC926:
00064Ar 2                       sbc     #$2F
00064Ar 2                       jmp     ADDACC
00064Ar 2               LC92B:
00064Ar 2               .endif
00064Ar 2  A0 02                ldy     #$02
00064Cr 2  B1 B9                lda     (FAC_LAST-1),y
00064Er 2  C5 8D                cmp     FRETOP+1
000650r 2  90 17                bcc     L2946
000652r 2  D0 07                bne     L2938
000654r 2  88                   dey
000655r 2  B1 B9                lda     (FAC_LAST-1),y
000657r 2  C5 8C                cmp     FRETOP
000659r 2  90 0E                bcc     L2946
00065Br 2               L2938:
00065Br 2  A4 BA                ldy     FAC_LAST
00065Dr 2  C4 87                cpy     VARTAB+1
00065Fr 2  90 08                bcc     L2946
000661r 2  D0 0D                bne     L294D
000663r 2  A5 B9                lda     FAC_LAST-1
000665r 2  C5 86                cmp     VARTAB
000667r 2  B0 07                bcs     L294D
000669r 2               L2946:
000669r 2  A5 B9                lda     FAC_LAST-1
00066Br 2  A4 BA                ldy     FAC_LAST
00066Dr 2  4C rr rr             jmp     L2963
000670r 2               L294D:
000670r 2  A0 00                ldy     #$00
000672r 2  B1 B9                lda     (FAC_LAST-1),y
000674r 2  20 rr rr             jsr     STRINI
000677r 2  A5 A9                lda     DSCPTR
000679r 2  A4 AA                ldy     DSCPTR+1
00067Br 2  85 C3                sta     STRNG1
00067Dr 2  84 C4                sty     STRNG1+1
00067Fr 2  20 rr rr             jsr     MOVINS
000682r 2  A9 B7                lda     #FAC
000684r 2  A0 00                ldy     #$00
000686r 2               L2963:
000686r 2  85 A9                sta     DSCPTR
000688r 2  84 AA                sty     DSCPTR+1
00068Ar 2  20 rr rr             jsr     FRETMS
00068Dr 2  A0 00                ldy     #$00
00068Fr 2  B1 A9                lda     (DSCPTR),y
000691r 2  91 A2                sta     (FORPNT),y
000693r 2  C8                   iny
000694r 2  B1 A9                lda     (DSCPTR),y
000696r 2  91 A2                sta     (FORPNT),y
000698r 2  C8                   iny
000699r 2  B1 A9                lda     (DSCPTR),y
00069Br 2  91 A2                sta     (FORPNT),y
00069Dr 2  60                   rts
00069Er 2               .ifdef CONFIG_FILE
00069Er 2               PRINTH:
00069Er 2                       jsr     CMD
00069Er 2                       jmp     LCAD6
00069Er 2               CMD:
00069Er 2                       jsr     GETBYT
00069Er 2                       beq     LC98F
00069Er 2                       lda     #$2C
00069Er 2                       jsr     SYNCHR
00069Er 2               LC98F:
00069Er 2                       php
00069Er 2                       jsr     CHKOUT
00069Er 2                       stx     CURDVC
00069Er 2                       plp
00069Er 2                       jmp     PRINT
00069Er 2               .endif
00069Er 2               
00069Er 2               
00069Er 1               .include "print.s"
00069Er 2               .segment "CODE"
00069Er 2               
00069Er 2               PRSTRING:
00069Er 2  20 rr rr             jsr     STRPRT
0006A1r 2               L297E:
0006A1r 2  20 CD 00             jsr     CHRGOT
0006A4r 2               
0006A4r 2               ; ----------------------------------------------------------------------------
0006A4r 2               ; "PRINT" STATEMENT
0006A4r 2               ; ----------------------------------------------------------------------------
0006A4r 2               PRINT:
0006A4r 2  F0 3B                beq     CRDO
0006A6r 2               PRINT2:
0006A6r 2  F0 57                beq     L29DD
0006A8r 2  C9 9F                cmp     #TOKEN_TAB
0006AAr 2  F0 6B                beq     L29F5
0006ACr 2  C9 A2                cmp     #TOKEN_SPC
0006AEr 2               .ifdef CONFIG_2
0006AEr 2                       clc	; also AppleSoft II
0006AEr 2               .endif
0006AEr 2  F0 67                beq     L29F5
0006B0r 2  C9 2C                cmp     #','
0006B2r 2               ; Pre-KIM had no CLC. KIM added the CLC
0006B2r 2               ; here. Post-KIM moved the CLC up...
0006B2r 2               ; (makes no sense on KIM, liveness = 0)
0006B2r 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
0006B2r 2                       clc
0006B2r 2               .endif
0006B2r 2  F0 4C                beq     L29DE
0006B4r 2  C9 3B                cmp     #$3B
0006B6r 2  F0 7A                beq     L2A0D
0006B8r 2  20 rr rr             jsr     FRMEVL
0006BBr 2  24 64                bit     VALTYP
0006BDr 2  30 DF                bmi     PRSTRING
0006BFr 2  20 rr rr             jsr     FOUT
0006C2r 2  20 rr rr             jsr     STRLIT
0006C5r 2               .ifndef CONFIG_NO_CR
0006C5r 2  A0 00                ldy     #$00
0006C7r 2  B1 B9                lda     (FAC_LAST-1),y
0006C9r 2  18                   clc
0006CAr 2  65 0E                adc     POSX
0006CCr 2                 .ifdef KBD
0006CCr 2                       cmp     #$28
0006CCr 2                 .else
0006CCr 2  C5 0F                cmp     Z17
0006CEr 2                 .endif
0006CEr 2  90 03                bcc     L29B1
0006D0r 2  20 rr rr             jsr     CRDO
0006D3r 2               L29B1:
0006D3r 2               .endif
0006D3r 2  20 rr rr             jsr     STRPRT
0006D6r 2               .ifdef KBD
0006D6r 2                       jmp     L297E
0006D6r 2               .else
0006D6r 2  20 rr rr             jsr     OUTSP
0006D9r 2  D0 C6                bne     L297E ; branch always
0006DBr 2               .endif
0006DBr 2               
0006DBr 2               .ifdef KBD
0006DBr 2               ; PATCHES
0006DBr 2               LE86C:
0006DBr 2                       pla
0006DBr 2                       jmp     CONTROL_C_TYPED
0006DBr 2               LE870:
0006DBr 2                       jsr     GETBYT
0006DBr 2                       txa
0006DBr 2               LE874:
0006DBr 2                       beq     LE878
0006DBr 2                       bpl     LE8F2
0006DBr 2               LE878:
0006DBr 2                       jmp     IQERR
0006DBr 2               ; PATCHES
0006DBr 2               .endif
0006DBr 2               
0006DBr 2               
0006DBr 2               
0006DBr 2               .ifndef KBD
0006DBr 2               L29B9:
0006DBr 2                 .ifdef CBM2
0006DBr 2                       lda     #$00
0006DBr 2                       sta     INPUTBUFFER,x
0006DBr 2                       ldx     #<(INPUTBUFFER-1)
0006DBr 2                       ldy     #>(INPUTBUFFER-1)
0006DBr 2                 .else
0006DBr 2                   .ifndef APPLE
0006DBr 2  A0 00                ldy     #$00
0006DDr 2  94 13                sty     INPUTBUFFER,x
0006DFr 2  A2 12                ldx     #LINNUM+1
0006E1r 2                   .endif
0006E1r 2                   .ifdef MICROTAN
0006E1r 2                       bne     CRDO2
0006E1r 2               	.endif
0006E1r 2                 .endif
0006E1r 2                 .ifdef CONFIG_FILE
0006E1r 2                       lda     CURDVC
0006E1r 2                       bne     L29DD
0006E1r 2                 .endif
0006E1r 2               .endif
0006E1r 2               
0006E1r 2               
0006E1r 2               CRDO:
0006E1r 2               .if .def(CONFIG_PRINTNULLS) && .def(CONFIG_FILE)
0006E1r 2                       lda     CURDVC
0006E1r 2                       bne     LC9D8
0006E1r 2                       sta     POSX
0006E1r 2               LC9D8:
0006E1r 2               .endif
0006E1r 2  A9 0D                lda     #CRLF_1
0006E3r 2               .ifndef CONFIG_CBM_ALL
0006E3r 2  85 0E                sta     POSX
0006E5r 2               .endif
0006E5r 2  20 rr rr             jsr     OUTDO
0006E8r 2               CRDO2:
0006E8r 2  A9 00                lda     #CRLF_2
0006EAr 2  20 rr rr             jsr     OUTDO
0006EDr 2               
0006EDr 2               PRINTNULLS:
0006EDr 2               .ifdef KBD
0006EDr 2                       lda     #$00
0006EDr 2                       sta     POSX
0006EDr 2                       eor     #$FF
0006EDr 2               .else
0006EDr 2                 .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0006EDr 2                   .ifdef CONFIG_FILE
0006EDr 2                   ; Although there is no statement for it,
0006EDr 2                   ; CBM1 had NULL support and ignores
0006EDr 2                   ; it when not targeting the screen,
0006EDr 2                   ; CBM2 dropped it completely.
0006EDr 2                       lda     CURDVC
0006EDr 2                       bne     L29DD
0006EDr 2                   .endif
0006EDr 2  8A                   txa
0006EEr 2  48                   pha
0006EFr 2  A6 0D                ldx     Z15
0006F1r 2  F0 08                beq     L29D9
0006F3r 2  A9 00                lda     #$00
0006F5r 2               L29D3:
0006F5r 2  20 rr rr             jsr     OUTDO
0006F8r 2  CA                   dex
0006F9r 2  D0 FA                bne     L29D3
0006FBr 2               L29D9:
0006FBr 2  86 0E                stx     POSX
0006FDr 2  68                   pla
0006FEr 2  AA                   tax
0006FFr 2                 .else
0006FFr 2                   .ifndef CONFIG_2
0006FFr 2                       lda     #$00
0006FFr 2                       sta     POSX
0006FFr 2                   .endif
0006FFr 2                       eor     #$FF
0006FFr 2                 .endif
0006FFr 2               .endif
0006FFr 2               L29DD:
0006FFr 2  60                   rts
000700r 2               L29DE:
000700r 2  A5 0E                lda     POSX
000702r 2               .ifndef CONFIG_NO_CR
000702r 2                 .ifdef KBD
000702r 2                       cmp     #$1A
000702r 2                 .else
000702r 2  C5 10                cmp     Z18
000704r 2                 .endif
000704r 2  90 06                bcc     L29EA
000706r 2  20 rr rr             jsr     CRDO
000709r 2  4C rr rr             jmp     L2A0D
00070Cr 2               L29EA:
00070Cr 2               .endif
00070Cr 2  38                   sec
00070Dr 2               L29EB:
00070Dr 2               .ifdef CONFIG_CBM_ALL
00070Dr 2                       sbc     #$0A
00070Dr 2               .else
00070Dr 2                 .ifdef KBD
00070Dr 2                       sbc     #$0D
00070Dr 2                 .else
00070Dr 2  E9 0E                sbc     #$0E
00070Fr 2                 .endif
00070Fr 2               .endif
00070Fr 2  B0 FC                bcs     L29EB
000711r 2  49 FF                eor     #$FF
000713r 2  69 01                adc     #$01
000715r 2  D0 14                bne     L2A08
000717r 2               L29F5:
000717r 2               .ifdef CONFIG_11A
000717r 2                       php
000717r 2               .else
000717r 2  48                   pha
000718r 2               .endif
000718r 2  20 rr rr             jsr     GTBYTC
00071Br 2  C9 29                cmp     #')'
00071Dr 2               .ifdef CONFIG_11A
00071Dr 2                 .ifdef CONFIG_2
00071Dr 2                       bne     SYNERR4
00071Dr 2                 .else
00071Dr 2                       jne     SYNERR
00071Dr 2                 .endif
00071Dr 2                       plp
00071Dr 2                       bcc     L2A09
00071Dr 2               .else
00071Dr 2                 .ifdef CONFIG_11
00071Dr 2                       jne     SYNERR
00071Dr 2                 .else
00071Dr 2  D0 66                bne     SYNERR4
00071Fr 2                 .endif
00071Fr 2  68                   pla
000720r 2  C9 9F                cmp     #TOKEN_TAB
000722r 2                 .ifdef CONFIG_11
000722r 2                       bne     L2A09
000722r 2                 .else
000722r 2  D0 08                bne     L2A0A
000724r 2                 .endif
000724r 2               .endif
000724r 2  8A                   txa
000725r 2  E5 0E                sbc     POSX
000727r 2  90 09                bcc     L2A0D
000729r 2               .ifndef CONFIG_11
000729r 2  F0 07                beq     L2A0D
00072Br 2               .endif
00072Br 2               L2A08:
00072Br 2  AA                   tax
00072Cr 2               .ifdef CONFIG_11
00072Cr 2               L2A09:
00072Cr 2                       inx
00072Cr 2               .endif
00072Cr 2               L2A0A:
00072Cr 2               .ifndef CONFIG_11
00072Cr 2  20 rr rr             jsr     OUTSP
00072Fr 2               .endif
00072Fr 2  CA                   dex
000730r 2               .ifndef CONFIG_11
000730r 2  D0 FA                bne     L2A0A
000732r 2               .else
000732r 2                       bne     L2A13
000732r 2               .endif
000732r 2               L2A0D:
000732r 2  20 C7 00             jsr     CHRGET
000735r 2  4C rr rr             jmp     PRINT2
000738r 2               .ifdef CONFIG_11
000738r 2               L2A13:
000738r 2                       jsr     OUTSP
000738r 2                       bne     L2A0A
000738r 2               .endif
000738r 2               
000738r 2               ; ----------------------------------------------------------------------------
000738r 2               ; PRINT STRING AT (Y,A)
000738r 2               ; ----------------------------------------------------------------------------
000738r 2               STROUT:
000738r 2  20 rr rr             jsr     STRLIT
00073Br 2               
00073Br 2               ; ----------------------------------------------------------------------------
00073Br 2               ; PRINT STRING AT (FACMO,FACLO)
00073Br 2               ; ----------------------------------------------------------------------------
00073Br 2               STRPRT:
00073Br 2  20 rr rr             jsr     FREFAC
00073Er 2  AA                   tax
00073Fr 2  A0 00                ldy     #$00
000741r 2  E8                   inx
000742r 2               L2A22:
000742r 2  CA                   dex
000743r 2  F0 BA                beq     L29DD
000745r 2  B1 7C                lda     (INDEX),y
000747r 2  20 rr rr             jsr     OUTDO
00074Ar 2  C8                   iny
00074Br 2  C9 0D                cmp     #$0D
00074Dr 2  D0 F3                bne     L2A22
00074Fr 2  20 rr rr             jsr     PRINTNULLS
000752r 2  4C rr rr             jmp     L2A22
000755r 2               ; ----------------------------------------------------------------------------
000755r 2               OUTSP:
000755r 2               .ifdef CONFIG_FILE
000755r 2                 .ifndef CBM1
000755r 2               ; on non-screen devices, print SPACE
000755r 2               ; instead of CRSR RIGHT
000755r 2                       lda     CURDVC
000755r 2                       beq     LCA40
000755r 2                       lda     #$20
000755r 2                       .byte   $2C
000755r 2               LCA40:
000755r 2                 .endif
000755r 2                       lda     #$1D ; CRSR RIGHT
000755r 2               .else
000755r 2  A9 20                lda     #$20
000757r 2               .endif
000757r 2  2C                   .byte   $2C
000758r 2               OUTQUES:
000758r 2  A9 3F                lda     #$3F
00075Ar 2               
00075Ar 2               ; ----------------------------------------------------------------------------
00075Ar 2               ; PRINT CHAR FROM (A)
00075Ar 2               ; ----------------------------------------------------------------------------
00075Ar 2               OUTDO:
00075Ar 2               .ifndef KBD
00075Ar 2  24 69                bit     Z14
00075Cr 2  30 18                bmi     L2A56
00075Er 2               .endif
00075Er 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
00075Er 2               ; Commodore forgot to remove this in CBM1
00075Er 2  48                   pha
00075Fr 2               .endif
00075Fr 2               .ifdef CBM1
00075Fr 2                       cmp     #$1D ; CRSR RIGHT
00075Fr 2                       beq     LCA6A
00075Fr 2                       cmp     #$9D ; CRSR LEFT
00075Fr 2                       beq     LCA5A
00075Fr 2                       cmp     #$14 ; DEL
00075Fr 2                       bne     LCA64
00075Fr 2               LCA5A:
00075Fr 2                       lda     POSX
00075Fr 2                       beq     L2A4E
00075Fr 2                       lda     CURDVC
00075Fr 2                       bne     L2A4E
00075Fr 2                       dec     POSX
00075Fr 2               LCA64:
00075Fr 2                       and     #$7F
00075Fr 2               .endif
00075Fr 2               .ifndef CBM2
00075Fr 2  C9 20                cmp     #$20
000761r 2  90 0B                bcc     L2A4E
000763r 2               .endif
000763r 2               LCA6A:
000763r 2               .ifdef CONFIG_CBM1_PATCHES
000763r 2                       lda     CURDVC
000763r 2                       jsr     PATCH6
000763r 2                       nop
000763r 2               .endif
000763r 2               .ifdef CONFIG_PRINT_CR
000763r 2  A5 0E                lda     POSX
000765r 2  C5 0F                cmp     Z17
000767r 2  D0 03                bne     L2A4C
000769r 2                 .ifdef APPLE
000769r 2                       nop ; PATCH!
000769r 2                       nop ; don't print CR
000769r 2                       nop
000769r 2                 .else
000769r 2  20 rr rr             jsr     CRDO
00076Cr 2                 .endif
00076Cr 2               L2A4C:
00076Cr 2               .endif
00076Cr 2               .ifndef CONFIG_CBM_ALL
00076Cr 2  E6 0E                inc     POSX
00076Er 2               .endif
00076Er 2               L2A4E:
00076Er 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
00076Er 2               ; Commodore forgot to remove this in CBM1
00076Er 2  68                   pla
00076Fr 2               .endif
00076Fr 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
00076Fr 2                       sty     DIMFLG
00076Fr 2               .endif
00076Fr 2               .ifdef CONFIG_IO_MSB
00076Fr 2                       ora     #$80
00076Fr 2               .endif
00076Fr 2  20 rr rr             jsr     MONCOUT
000772r 2               .ifdef CONFIG_IO_MSB
000772r 2                       and     #$7F
000772r 2               .endif
000772r 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
000772r 2                       ldy     DIMFLG
000772r 2               .endif
000772r 2               .ifdef OSI
000772r 2  EA                   nop
000773r 2  EA                   nop
000774r 2  EA                   nop
000775r 2  EA                   nop
000776r 2               .endif
000776r 2               L2A56:
000776r 2  29 FF                and     #$FF
000778r 2               LE8F2:
000778r 2  60                   rts
000779r 2               
000779r 2               ; ----------------------------------------------------------------------------
000779r 2               ; ???
000779r 2               ; ----------------------------------------------------------------------------
000779r 2               .ifdef KBD
000779r 2               LE8F3:
000779r 2                       pha
000779r 2                       lda     $047F
000779r 2                       clc
000779r 2                       beq     LE900
000779r 2                       lda     #$00
000779r 2                       sta     $047F
000779r 2                       sec
000779r 2               LE900:
000779r 2                       pla
000779r 2                       rts
000779r 2               .endif
000779r 2               
000779r 1               .include "input.s"
000779r 2               .segment "CODE"
000779r 2               
000779r 2               ; ----------------------------------------------------------------------------
000779r 2               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
000779r 2               ; IN NUMERIC FIELD.  MUST DISTINGUISH
000779r 2               ; BETWEEN INPUT, READ, AND GET
000779r 2               ; ----------------------------------------------------------------------------
000779r 2               INPUTERR:
000779r 2  A5 67                lda     INPUTFLG
00077Br 2  F0 0B                beq     RESPERR	; INPUT
00077Dr 2               .ifndef CONFIG_SMALL
00077Dr 2               .ifdef CONFIG_10A
00077Dr 2               ; without this, it treats GET errors
00077Dr 2               ; like READ errors
00077Dr 2                       bmi     L2A63	; READ
00077Dr 2                       ldy     #$FF	; GET
00077Dr 2                       bne     L2A67
00077Dr 2               L2A63:
00077Dr 2               .endif
00077Dr 2               .endif
00077Dr 2               .ifdef CONFIG_CBM1_PATCHES
00077Dr 2                       jsr     PATCH5
00077Dr 2               		nop
00077Dr 2               .else
00077Dr 2  A5 98                lda     Z8C
00077Fr 2  A4 99                ldy     Z8C+1
000781r 2               .endif
000781r 2               L2A67:
000781r 2  85 92                sta     CURLIN
000783r 2  84 93                sty     CURLIN+1
000785r 2               SYNERR4:
000785r 2  4C rr rr             jmp     SYNERR
000788r 2               RESPERR:
000788r 2               .ifdef CONFIG_FILE
000788r 2                       lda     CURDVC
000788r 2                       beq     LCA8F
000788r 2                       ldx     #ERR_BADDATA
000788r 2                       jmp     ERROR
000788r 2               LCA8F:
000788r 2               .endif
000788r 2  A9 rr                lda     #<ERRREENTRY
00078Ar 2  A0 rr                ldy     #>ERRREENTRY
00078Cr 2  20 rr rr             jsr     STROUT
00078Fr 2  A5 96                lda     OLDTEXT
000791r 2  A4 97                ldy     OLDTEXT+1
000793r 2  85 CE                sta     TXTPTR
000795r 2  84 CF                sty     TXTPTR+1
000797r 2               RTS20:
000797r 2  60                   rts
000798r 2               
000798r 2               ; ----------------------------------------------------------------------------
000798r 2               ; "GET" STATEMENT
000798r 2               ; ----------------------------------------------------------------------------
000798r 2               .ifndef CONFIG_SMALL
000798r 2               GET:
000798r 2                       jsr     ERRDIR
000798r 2               ; CBM: if GET#, then switch input
000798r 2               .ifdef CONFIG_FILE
000798r 2                       cmp     #'#'
000798r 2                       bne     LCAB6
000798r 2                       jsr     CHRGET
000798r 2                       jsr     GETBYT
000798r 2                       lda     #','
000798r 2                       jsr     SYNCHR
000798r 2                       jsr     CHKIN
000798r 2                       stx     CURDVC
000798r 2               LCAB6:
000798r 2               .endif
000798r 2                       ldx     #<(INPUTBUFFER+1)
000798r 2                       ldy     #>(INPUTBUFFER+1)
000798r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000798r 2                       lda     #$00
000798r 2                       sta     INPUTBUFFER+1
000798r 2               .else
000798r 2                       sty     INPUTBUFFER+1
000798r 2               .endif
000798r 2                       lda     #$40
000798r 2                       jsr     PROCESS_INPUT_LIST
000798r 2               ; CBM: if GET#, then switch input back
000798r 2               .ifdef CONFIG_FILE
000798r 2                       ldx     CURDVC
000798r 2                       bne     LCAD8
000798r 2               .endif
000798r 2                       rts
000798r 2               .endif
000798r 2               
000798r 2               ; ----------------------------------------------------------------------------
000798r 2               ; "INPUT#" STATEMENT
000798r 2               ; ----------------------------------------------------------------------------
000798r 2               .ifdef CONFIG_FILE
000798r 2               INPUTH:
000798r 2                       jsr     GETBYT
000798r 2                       lda     #$2C
000798r 2                       jsr     SYNCHR
000798r 2                       jsr     CHKIN
000798r 2                       stx     CURDVC
000798r 2                       jsr     L2A9E
000798r 2               LCAD6:
000798r 2                       lda     CURDVC
000798r 2               LCAD8:
000798r 2                       jsr     CLRCH
000798r 2                       ldx     #$00
000798r 2                       stx     CURDVC
000798r 2                       rts
000798r 2               LCAE0:
000798r 2               .endif
000798r 2               
000798r 2               ; ----------------------------------------------------------------------------
000798r 2               ; "INPUT" STATEMENT
000798r 2               ; ----------------------------------------------------------------------------
000798r 2               INPUT:
000798r 2               .ifndef KBD
000798r 2  46 69                lsr     Z14
00079Ar 2               .endif
00079Ar 2  C9 22                cmp     #$22
00079Cr 2  D0 0B                bne     L2A9E
00079Er 2  20 rr rr             jsr     STRTXT
0007A1r 2  A9 3B                lda     #$3B
0007A3r 2  20 rr rr             jsr     SYNCHR
0007A6r 2  20 rr rr             jsr     STRPRT
0007A9r 2               L2A9E:
0007A9r 2  20 rr rr             jsr     ERRDIR
0007ACr 2  A9 2C                lda     #$2C
0007AEr 2  85 12                sta     INPUTBUFFER-1
0007B0r 2               LCAF8:
0007B0r 2               .ifdef APPLE
0007B0r 2                       jsr     INLINX
0007B0r 2               .else
0007B0r 2  20 rr rr             jsr     NXIN
0007B3r 2               .endif
0007B3r 2               .ifdef KBD
0007B3r 2                       bmi     L2ABE
0007B3r 2               .else
0007B3r 2                 .ifdef CONFIG_FILE
0007B3r 2                       lda     CURDVC
0007B3r 2                       beq     LCB0C
0007B3r 2                       lda     Z96
0007B3r 2                       and     #$02
0007B3r 2                       beq     LCB0C
0007B3r 2                       jsr     LCAD6
0007B3r 2                       jmp     DATA
0007B3r 2               LCB0C:
0007B3r 2                 .endif
0007B3r 2  A5 13                lda     INPUTBUFFER
0007B5r 2  D0 12                bne     L2ABE
0007B7r 2                 .ifdef CONFIG_FILE
0007B7r 2                       lda     CURDVC
0007B7r 2                       bne     LCAF8
0007B7r 2                 .endif
0007B7r 2                 .ifdef CONFIG_CBM1_PATCHES
0007B7r 2                       jmp     PATCH1
0007B7r 2                 .else
0007B7r 2  18                   clc
0007B8r 2  4C rr rr             jmp     CONTROL_C_TYPED
0007BBr 2                 .endif
0007BBr 2               .endif
0007BBr 2               
0007BBr 2               NXIN:
0007BBr 2               .ifdef KBD
0007BBr 2                       jsr     INLIN
0007BBr 2                       bmi     RTS20
0007BBr 2                       pla
0007BBr 2                       jmp     LE86C
0007BBr 2               .else
0007BBr 2                 .ifdef CONFIG_FILE
0007BBr 2                       lda     CURDVC
0007BBr 2                       bne     LCB21
0007BBr 2                 .endif
0007BBr 2  20 rr rr             jsr     OUTQUES	; '?'
0007BEr 2  20 rr rr             jsr     OUTSP
0007C1r 2               LCB21:
0007C1r 2  4C rr rr             jmp     INLIN
0007C4r 2               .endif
0007C4r 2               
0007C4r 2               ; ----------------------------------------------------------------------------
0007C4r 2               ; "GETC" STATEMENT
0007C4r 2               ; ----------------------------------------------------------------------------
0007C4r 2               .ifdef KBD
0007C4r 2               GETC:
0007C4r 2                       jsr     CONINT
0007C4r 2                       jsr     LF43D
0007C4r 2                       jmp     LE664
0007C4r 2               .endif
0007C4r 2               
0007C4r 2               ; ----------------------------------------------------------------------------
0007C4r 2               ; "READ" STATEMENT
0007C4r 2               ; ----------------------------------------------------------------------------
0007C4r 2               READ:
0007C4r 2  A6 9A                ldx     DATPTR
0007C6r 2  A4 9B                ldy     DATPTR+1
0007C8r 2               .ifdef CONFIG_NO_READ_Y_IS_ZERO_HACK
0007C8r 2               ; AppleSoft II, too
0007C8r 2                       lda     #$98	; READ
0007C8r 2                       .byte   $2C
0007C8r 2               L2ABE:
0007C8r 2                       lda     #$00	; INPUT
0007C8r 2               .else
0007C8r 2  A9                   .byte   $A9	; LDA #$98
0007C9r 2               L2ABE:
0007C9r 2  98                   tya
0007CAr 2               .endif
0007CAr 2               
0007CAr 2               ; ----------------------------------------------------------------------------
0007CAr 2               ; PROCESS INPUT LIST
0007CAr 2               ;
0007CAr 2               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
0007CAr 2               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
0007CAr 2               ; 				$40 FOR GET
0007CAr 2               ;				$98 FOR READ
0007CAr 2               ; ----------------------------------------------------------------------------
0007CAr 2               PROCESS_INPUT_LIST:
0007CAr 2  85 67                sta     INPUTFLG
0007CCr 2  86 9C                stx     INPTR
0007CEr 2  84 9D                sty     INPTR+1
0007D0r 2               PROCESS_INPUT_ITEM:
0007D0r 2  20 rr rr             jsr     PTRGET
0007D3r 2  85 A2                sta     FORPNT
0007D5r 2  84 A3                sty     FORPNT+1
0007D7r 2  A5 CE                lda     TXTPTR
0007D9r 2  A4 CF                ldy     TXTPTR+1
0007DBr 2  85 11                sta     TXPSV
0007DDr 2  84 12                sty     TXPSV+1
0007DFr 2  A6 9C                ldx     INPTR
0007E1r 2  A4 9D                ldy     INPTR+1
0007E3r 2  86 CE                stx     TXTPTR
0007E5r 2  84 CF                sty     TXTPTR+1
0007E7r 2  20 CD 00             jsr     CHRGOT
0007EAr 2  D0 0E                bne     INSTART
0007ECr 2  24 67                bit     INPUTFLG
0007EEr 2               .ifndef CONFIG_SMALL ; GET
0007EEr 2                       bvc     L2AF0
0007EEr 2                 .ifdef MICROTAN
0007EEr 2                       jsr     MONRDKEY2
0007EEr 2                 .else
0007EEr 2                       jsr     MONRDKEY
0007EEr 2                 .endif
0007EEr 2                 .ifdef CONFIG_IO_MSB
0007EEr 2                       and     #$7F
0007EEr 2                 .endif
0007EEr 2                       sta     INPUTBUFFER
0007EEr 2               ; BUG: The beq/bne L2AF8 below is supposed
0007EEr 2               ; to be always taken. For this to happen,
0007EEr 2               ; the last load must be a 0 for beq
0007EEr 2               ; and != 0 for bne. The original Microsoft
0007EEr 2               ; code had ldx/ldy/bne here, which was only
0007EEr 2               ; correct for a non-ZP INPUTBUFFER. Commodore
0007EEr 2               ; fixed it in CBMBASIC V1 by swapping the
0007EEr 2               ; ldx and the ldy. It was broken on KIM,
0007EEr 2               ; but okay on APPLE and CBM2, because
0007EEr 2               ; these used a non-ZP INPUTBUFFER.
0007EEr 2               ; Microsoft fixed this somewhere after KIM
0007EEr 2               ; and before MICROTAN, by using beq instead
0007EEr 2               ; of bne in the ZP case.
0007EEr 2                 .ifdef CBM1
0007EEr 2                       ldy     #>(INPUTBUFFER-1)
0007EEr 2                       ldx     #<(INPUTBUFFER-1)
0007EEr 2                 .else
0007EEr 2                       ldx     #<(INPUTBUFFER-1)
0007EEr 2                       ldy     #>(INPUTBUFFER-1)
0007EEr 2                 .endif
0007EEr 2                 .if .def(CONFIG_2) && (!.def(CONFIG_NO_INPUTBUFFER_ZP))
0007EEr 2                       beq     L2AF8	; always
0007EEr 2                 .else
0007EEr 2                       bne     L2AF8	; always
0007EEr 2                 .endif
0007EEr 2               L2AF0:
0007EEr 2               .endif
0007EEr 2  30 62                bmi     FINDATA
0007F0r 2               .ifdef CONFIG_FILE
0007F0r 2                       lda     CURDVC
0007F0r 2                       bne     LCB64
0007F0r 2               .endif
0007F0r 2               .ifdef KBD
0007F0r 2                       jsr     OUTQUESSP
0007F0r 2               .else
0007F0r 2  20 rr rr             jsr     OUTQUES
0007F3r 2               .endif
0007F3r 2               LCB64:
0007F3r 2  20 rr rr             jsr     NXIN
0007F6r 2               L2AF8:
0007F6r 2  86 CE                stx     TXTPTR
0007F8r 2  84 CF                sty     TXTPTR+1
0007FAr 2               
0007FAr 2               ; ----------------------------------------------------------------------------
0007FAr 2               INSTART:
0007FAr 2  20 C7 00             jsr     CHRGET
0007FDr 2  24 64                bit     VALTYP
0007FFr 2  10 24                bpl     L2B34
000801r 2               .ifndef CONFIG_SMALL ; GET
000801r 2                       bit     INPUTFLG
000801r 2                       bvc     L2B10
000801r 2                 .ifdef CONFIG_CBM1_PATCHES
000801r 2                       lda     #$00
000801r 2                       jsr     PATCH4
000801r 2                       nop
000801r 2                 .else
000801r 2                       inx
000801r 2                       stx     TXTPTR
000801r 2                       lda     #$00
000801r 2                       sta     CHARAC
000801r 2                       beq     L2B1C
000801r 2                 .endif
000801r 2               L2B10:
000801r 2               .endif
000801r 2  85 60                sta     CHARAC
000803r 2  C9 22                cmp     #$22
000805r 2  F0 07                beq     L2B1D
000807r 2  A9 3A                lda     #$3A
000809r 2  85 60                sta     CHARAC
00080Br 2  A9 2C                lda     #$2C
00080Dr 2               L2B1C:
00080Dr 2  18                   clc
00080Er 2               L2B1D:
00080Er 2  85 61                sta     ENDCHR
000810r 2  A5 CE                lda     TXTPTR
000812r 2  A4 CF                ldy     TXTPTR+1
000814r 2  69 00                adc     #$00
000816r 2  90 01                bcc     L2B28
000818r 2  C8                   iny
000819r 2               L2B28:
000819r 2  20 rr rr             jsr     STRLT2
00081Cr 2  20 rr rr             jsr     POINT
00081Fr 2               .ifdef CONFIG_SMALL
00081Fr 2  20 rr rr             jsr     LETSTRING
000822r 2               .else
000822r 2                       jsr     PUTSTR
000822r 2               .endif
000822r 2  4C rr rr             jmp     INPUT_MORE
000825r 2               ; ----------------------------------------------------------------------------
000825r 2               L2B34:
000825r 2  20 rr rr             jsr     FIN
000828r 2               .ifdef CONFIG_SMALL
000828r 2  20 rr rr             jsr     SETFOR
00082Br 2               .else
00082Br 2                       lda     VALTYP+1
00082Br 2                       jsr     LET2
00082Br 2               .endif
00082Br 2               ; ----------------------------------------------------------------------------
00082Br 2               INPUT_MORE:
00082Br 2  20 CD 00             jsr     CHRGOT
00082Er 2  F0 07                beq     L2B48
000830r 2  C9 2C                cmp     #$2C
000832r 2  F0 03                beq     L2B48
000834r 2  4C rr rr             jmp     INPUTERR
000837r 2               L2B48:
000837r 2  A5 CE                lda     TXTPTR
000839r 2  A4 CF                ldy     TXTPTR+1
00083Br 2  85 9C                sta     INPTR
00083Dr 2  84 9D                sty     INPTR+1
00083Fr 2  A5 11                lda     TXPSV
000841r 2  A4 12                ldy     TXPSV+1
000843r 2  85 CE                sta     TXTPTR
000845r 2  84 CF                sty     TXTPTR+1
000847r 2  20 CD 00             jsr     CHRGOT
00084Ar 2  F0 2C                beq     INPDONE
00084Cr 2  20 rr rr             jsr     CHKCOM
00084Fr 2  4C rr rr             jmp     PROCESS_INPUT_ITEM
000852r 2               ; ----------------------------------------------------------------------------
000852r 2               FINDATA:
000852r 2  20 rr rr             jsr     DATAN
000855r 2  C8                   iny
000856r 2  AA                   tax
000857r 2  D0 12                bne     L2B7C
000859r 2  A2 06                ldx     #ERR_NODATA
00085Br 2  C8                   iny
00085Cr 2  B1 CE                lda     (TXTPTR),y
00085Er 2  F0 69                beq     GERR
000860r 2  C8                   iny
000861r 2  B1 CE                lda     (TXTPTR),y
000863r 2  85 98                sta     Z8C
000865r 2  C8                   iny
000866r 2  B1 CE                lda     (TXTPTR),y
000868r 2  C8                   iny
000869r 2  85 99                sta     Z8C+1
00086Br 2               L2B7C:
00086Br 2  B1 CE                lda     (TXTPTR),y
00086Dr 2  AA                   tax
00086Er 2  20 rr rr             jsr     ADDON
000871r 2  E0 83                cpx     #$83
000873r 2  D0 DD                bne     FINDATA
000875r 2  4C rr rr             jmp     INSTART
000878r 2               ; ---NO MORE INPUT REQUESTED------
000878r 2               INPDONE:
000878r 2  A5 9C                lda     INPTR
00087Ar 2  A4 9D                ldy     INPTR+1
00087Cr 2  A6 67                ldx     INPUTFLG
00087Er 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_11))
00087Er 2  F0 03                beq     L2B94 ; INPUT
000880r 2               .else
000880r 2                       bpl     L2B94; INPUT or GET
000880r 2               .endif
000880r 2  4C rr rr             jmp     SETDA
000883r 2               L2B94:
000883r 2  A0 00                ldy     #$00
000885r 2  B1 9C                lda     (INPTR),y
000887r 2  F0 07                beq     L2BA1
000889r 2               .ifdef CONFIG_FILE
000889r 2                       lda     CURDVC
000889r 2                       bne     L2BA1
000889r 2               .endif
000889r 2  A9 rr                lda     #<ERREXTRA
00088Br 2  A0 rr                ldy     #>ERREXTRA
00088Dr 2  4C rr rr             jmp     STROUT
000890r 2               L2BA1:
000890r 2  60                   rts
000891r 2               
000891r 2               ; ----------------------------------------------------------------------------
000891r 2               ERREXTRA:
000891r 2               .ifdef KBD
000891r 2                       .byte   "?Extra"
000891r 2               .else
000891r 2  3F 45 58 54          .byte   "?EXTRA IGNORED"
000895r 2  52 41 20 49  
000899r 2  47 4E 4F 52  
00089Fr 2               .endif
00089Fr 2  0D 0A 00             .byte   $0D,$0A,$00
0008A2r 2               ERRREENTRY:
0008A2r 2               .ifdef KBD
0008A2r 2                       .byte   "What?"
0008A2r 2               .else
0008A2r 2  3F 52 45 44          .byte   "?REDO FROM START"
0008A6r 2  4F 20 46 52  
0008AAr 2  4F 4D 20 53  
0008B2r 2               .endif
0008B2r 2  0D 0A 00             .byte   $0D,$0A,$00
0008B5r 2               .ifdef KBD
0008B5r 2               LEA30:
0008B5r 2                       .byte   "B"
0008B5r 2                       .byte   $FD
0008B5r 2                       .byte   "GsBASIC"
0008B5r 2                       .byte   $00,$1B,$0D,$13
0008B5r 2                       .byte   " BASIC"
0008B5r 2               .endif
0008B5r 2               
0008B5r 1               .include "eval.s"
0008B5r 2               .segment "CODE"
0008B5r 2               
0008B5r 2               ; ----------------------------------------------------------------------------
0008B5r 2               ; "NEXT" STATEMENT
0008B5r 2               ; ----------------------------------------------------------------------------
0008B5r 2               NEXT:
0008B5r 2  D0 04                bne     NEXT1
0008B7r 2  A0 00                ldy     #$00
0008B9r 2  F0 03                beq     NEXT2
0008BBr 2               NEXT1:
0008BBr 2  20 rr rr             jsr     PTRGET
0008BEr 2               NEXT2:
0008BEr 2  85 A2                sta     FORPNT
0008C0r 2  84 A3                sty     FORPNT+1
0008C2r 2  20 rr rr             jsr     GTFORPNT
0008C5r 2  F0 04                beq     NEXT3
0008C7r 2  A2 00                ldx     #$00
0008C9r 2               GERR:
0008C9r 2  F0 68                beq     JERROR
0008CBr 2               NEXT3:
0008CBr 2  9A                   txs
0008CCr 2               .ifndef CONFIG_2
0008CCr 2  E8                   inx
0008CDr 2  E8                   inx
0008CEr 2  E8                   inx
0008CFr 2  E8                   inx
0008D0r 2               .endif
0008D0r 2  8A                   txa
0008D1r 2               .ifdef CONFIG_2
0008D1r 2                       clc
0008D1r 2                       adc     #$04
0008D1r 2                       pha
0008D1r 2                       adc     #BYTES_FP+1
0008D1r 2                       sta     DEST
0008D1r 2                       pla
0008D1r 2               .else
0008D1r 2  E8                   inx
0008D2r 2  E8                   inx
0008D3r 2  E8                   inx
0008D4r 2  E8                   inx
0008D5r 2  E8                   inx
0008D6r 2               .ifndef CONFIG_SMALL
0008D6r 2                       inx
0008D6r 2               .endif
0008D6r 2  86 7E                stx     DEST
0008D8r 2               .endif
0008D8r 2  A0 01                ldy     #>STACK
0008DAr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0008DDr 2  BA                   tsx
0008DEr 2  BD 08 01             lda     STACK+BYTES_FP+4,x
0008E1r 2  85 BB                sta     FACSIGN
0008E3r 2  A5 A2                lda     FORPNT
0008E5r 2  A4 A3                ldy     FORPNT+1
0008E7r 2  20 rr rr             jsr     FADD
0008EAr 2  20 rr rr             jsr     SETFOR
0008EDr 2  A0 01                ldy     #>STACK
0008EFr 2  20 rr rr             jsr     FCOMP2
0008F2r 2  BA                   tsx
0008F3r 2  38                   sec
0008F4r 2  FD 08 01             sbc     STACK+BYTES_FP+4,x
0008F7r 2  F0 17                beq     L2C22
0008F9r 2  BD 0D 01             lda     STACK+2*BYTES_FP+5,x
0008FCr 2  85 92                sta     CURLIN
0008FEr 2  BD 0E 01             lda     STACK+2*BYTES_FP+6,x
000901r 2  85 93                sta     CURLIN+1
000903r 2  BD 10 01             lda     STACK+2*BYTES_FP+8,x
000906r 2  85 CE                sta     TXTPTR
000908r 2  BD 0F 01             lda     STACK+2*BYTES_FP+7,x
00090Br 2  85 CF                sta     TXTPTR+1
00090Dr 2               L2C1F:
00090Dr 2  4C rr rr             jmp     NEWSTT
000910r 2               L2C22:
000910r 2  8A                   txa
000911r 2  69 0F                adc     #2*BYTES_FP+7
000913r 2  AA                   tax
000914r 2  9A                   txs
000915r 2  20 CD 00             jsr     CHRGOT
000918r 2  C9 2C                cmp     #$2C
00091Ar 2  D0 F1                bne     L2C1F
00091Cr 2  20 C7 00             jsr     CHRGET
00091Fr 2  20 rr rr             jsr     NEXT1
000922r 2               
000922r 2               ; ----------------------------------------------------------------------------
000922r 2               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
000922r 2               ; ----------------------------------------------------------------------------
000922r 2               FRMNUM:
000922r 2  20 rr rr             jsr     FRMEVL
000925r 2               
000925r 2               ; ----------------------------------------------------------------------------
000925r 2               ; MAKE SURE (FAC) IS NUMERIC
000925r 2               ; ----------------------------------------------------------------------------
000925r 2               CHKNUM:
000925r 2  18                   clc
000926r 2  24                   .byte   $24
000927r 2               
000927r 2               ; ----------------------------------------------------------------------------
000927r 2               ; MAKE SURE (FAC) IS STRING
000927r 2               ; ----------------------------------------------------------------------------
000927r 2               CHKSTR:
000927r 2  38                   sec
000928r 2               
000928r 2               ; ----------------------------------------------------------------------------
000928r 2               ; MAKE SURE (FAC) IS CORRECT TYPE
000928r 2               ; IF C=0, TYPE MUST BE NUMERIC
000928r 2               ; IF C=1, TYPE MUST BE STRING
000928r 2               ; ----------------------------------------------------------------------------
000928r 2               CHKVAL:
000928r 2  24 64                bit     VALTYP
00092Ar 2  30 03                bmi     L2C41
00092Cr 2  B0 03                bcs     L2C43
00092Er 2               L2C40:
00092Er 2  60                   rts
00092Fr 2               L2C41:
00092Fr 2  B0 FD                bcs     L2C40
000931r 2               L2C43:
000931r 2  A2 18                ldx     #ERR_BADTYPE
000933r 2               JERROR:
000933r 2  4C rr rr             jmp     ERROR
000936r 2               
000936r 2               ; ----------------------------------------------------------------------------
000936r 2               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
000936r 2               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
000936r 2               ; EXPRESSIONS.
000936r 2               ; ----------------------------------------------------------------------------
000936r 2               FRMEVL:
000936r 2  A6 CE                ldx     TXTPTR
000938r 2  D0 02                bne     L2C4E
00093Ar 2  C6 CF                dec     TXTPTR+1
00093Cr 2               L2C4E:
00093Cr 2  C6 CE                dec     TXTPTR
00093Er 2  A2 00                ldx     #$00
000940r 2  24                   .byte   $24
000941r 2               FRMEVL1:
000941r 2  48                   pha
000942r 2  8A                   txa
000943r 2  48                   pha
000944r 2  A9 01                lda     #$01
000946r 2  20 rr rr             jsr     CHKMEM
000949r 2  20 rr rr             jsr     FRM_ELEMENT
00094Cr 2  A9 00                lda     #$00
00094Er 2  85 A6                sta     CPRTYP
000950r 2               FRMEVL2:
000950r 2  20 CD 00             jsr     CHRGOT
000953r 2               L2C65:
000953r 2  38                   sec
000954r 2  E9 AD                sbc     #TOKEN_GREATER
000956r 2  90 17                bcc     L2C81
000958r 2  C9 03                cmp     #$03
00095Ar 2  B0 13                bcs     L2C81
00095Cr 2  C9 01                cmp     #$01
00095Er 2  2A                   rol     a
00095Fr 2  49 01                eor     #$01
000961r 2  45 A6                eor     CPRTYP
000963r 2  C5 A6                cmp     CPRTYP
000965r 2  90 61                bcc     SNTXERR
000967r 2  85 A6                sta     CPRTYP
000969r 2  20 C7 00             jsr     CHRGET
00096Cr 2  4C rr rr             jmp     L2C65
00096Fr 2               L2C81:
00096Fr 2  A6 A6                ldx     CPRTYP
000971r 2  D0 2C                bne     FRM_RELATIONAL
000973r 2  B0 78                bcs     L2D02
000975r 2  69 07                adc     #$07
000977r 2  90 74                bcc     L2D02
000979r 2  65 64                adc     VALTYP
00097Br 2  D0 03                bne     L2C92
00097Dr 2  4C rr rr             jmp     CAT
000980r 2               L2C92:
000980r 2  69 FF                adc     #$FF
000982r 2  85 7C                sta     INDEX
000984r 2  0A                   asl     a
000985r 2  65 7C                adc     INDEX
000987r 2  A8                   tay
000988r 2               FRM_PRECEDENCE_TEST:
000988r 2  68                   pla
000989r 2  D9 rr rr             cmp     MATHTBL,y
00098Cr 2  B0 64                bcs     FRM_PERFORM1
00098Er 2  20 rr rr             jsr     CHKNUM
000991r 2               L2CA3:
000991r 2  48                   pha
000992r 2               L2CA4:
000992r 2  20 rr rr             jsr     FRM_RECURSE
000995r 2  68                   pla
000996r 2  A4 A4                ldy     LASTOP
000998r 2  10 17                bpl     PREFNC
00099Ar 2  AA                   tax
00099Br 2  F0 53                beq     GOEX
00099Dr 2  D0 5C                bne     FRM_PERFORM2
00099Fr 2               
00099Fr 2               ; ----------------------------------------------------------------------------
00099Fr 2               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
00099Fr 2               ; ----------------------------------------------------------------------------
00099Fr 2               FRM_RELATIONAL:
00099Fr 2  46 64                lsr     VALTYP
0009A1r 2  8A                   txa
0009A2r 2  2A                   rol     a
0009A3r 2  A6 CE                ldx     TXTPTR
0009A5r 2  D0 02                bne     L2CBB
0009A7r 2  C6 CF                dec     TXTPTR+1
0009A9r 2               L2CBB:
0009A9r 2  C6 CE                dec     TXTPTR
0009ABr 2  A0 1B                ldy     #$1B
0009ADr 2  85 A6                sta     CPRTYP
0009AFr 2  D0 D7                bne     FRM_PRECEDENCE_TEST
0009B1r 2               PREFNC:
0009B1r 2  D9 rr rr             cmp     MATHTBL,y
0009B4r 2  B0 45                bcs     FRM_PERFORM2
0009B6r 2  90 D9                bcc     L2CA3
0009B8r 2               
0009B8r 2               ; ----------------------------------------------------------------------------
0009B8r 2               ; STACK THIS OPERATION AND CALL FRMEVL FOR
0009B8r 2               ; ANOTHER ONE
0009B8r 2               ; ----------------------------------------------------------------------------
0009B8r 2               FRM_RECURSE:
0009B8r 2  B9 rr rr             lda     MATHTBL+2,y
0009BBr 2  48                   pha
0009BCr 2  B9 rr rr             lda     MATHTBL+1,y
0009BFr 2  48                   pha
0009C0r 2  20 rr rr             jsr     FRM_STACK1
0009C3r 2  A5 A6                lda     CPRTYP
0009C5r 2  4C rr rr             jmp     FRMEVL1
0009C8r 2               SNTXERR:
0009C8r 2  4C rr rr             jmp     SYNERR
0009CBr 2               
0009CBr 2               ; ----------------------------------------------------------------------------
0009CBr 2               ; STACK (FAC)
0009CBr 2               ; THREE ENTRY POINTS:
0009CBr 2               ; 	1, FROM FRMEVL
0009CBr 2               ;	2, FROM "STEP"
0009CBr 2               ;	3, FROM "FOR"
0009CBr 2               ; ----------------------------------------------------------------------------
0009CBr 2               FRM_STACK1:
0009CBr 2  A5 BB                lda     FACSIGN
0009CDr 2  BE rr rr             ldx     MATHTBL,y
0009D0r 2               
0009D0r 2               ; ----------------------------------------------------------------------------
0009D0r 2               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
0009D0r 2               ; ----------------------------------------------------------------------------
0009D0r 2               FRM_STACK2:
0009D0r 2  A8                   tay
0009D1r 2  68                   pla
0009D2r 2  85 7C                sta     INDEX
0009D4r 2               .ifndef CONFIG_2B
0009D4r 2  E6 7C                inc     INDEX ; bug: assumes not on page boundary
0009D6r 2               ; bug exists on AppleSoft II
0009D6r 2               .endif
0009D6r 2  68                   pla
0009D7r 2  85 7D                sta     INDEX+1
0009D9r 2               .ifdef CONFIG_2B
0009D9r 2                       inc     INDEX
0009D9r 2                       bne     LEB69
0009D9r 2                       inc     INDEX+1
0009D9r 2               LEB69:
0009D9r 2               .endif
0009D9r 2  98                   tya
0009DAr 2  48                   pha
0009DBr 2               
0009DBr 2               ; ----------------------------------------------------------------------------
0009DBr 2               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
0009DBr 2               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
0009DBr 2               ; ----------------------------------------------------------------------------
0009DBr 2               FRM_STACK3:
0009DBr 2  20 rr rr             jsr     ROUND_FAC
0009DEr 2               .ifndef CONFIG_SMALL
0009DEr 2                       lda     FAC+4
0009DEr 2                       pha
0009DEr 2               .endif
0009DEr 2  A5 BA                lda     FAC+3
0009E0r 2  48                   pha
0009E1r 2  A5 B9                lda     FAC+2
0009E3r 2  48                   pha
0009E4r 2  A5 B8                lda     FAC+1
0009E6r 2  48                   pha
0009E7r 2  A5 B7                lda     FAC
0009E9r 2  48                   pha
0009EAr 2  6C 7C 00             jmp     (INDEX)
0009EDr 2               L2D02:
0009EDr 2  A0 FF                ldy     #$FF
0009EFr 2  68                   pla
0009F0r 2               GOEX:
0009F0r 2  F0 20                beq     EXIT
0009F2r 2               
0009F2r 2               ; ----------------------------------------------------------------------------
0009F2r 2               ; PERFORM STACKED OPERATION
0009F2r 2               ;
0009F2r 2               ; (A) = PRECEDENCE BYTE
0009F2r 2               ; STACK:  1 -- CPRMASK
0009F2r 2               ;	5 -- (ARG)
0009F2r 2               ;	2 -- ADDR OF PERFORMER
0009F2r 2               ; ----------------------------------------------------------------------------
0009F2r 2               FRM_PERFORM1:
0009F2r 2  C9 64                cmp     #$64
0009F4r 2  F0 03                beq     L2D0E
0009F6r 2  20 rr rr             jsr     CHKNUM
0009F9r 2               L2D0E:
0009F9r 2  84 A4                sty     LASTOP
0009FBr 2               FRM_PERFORM2:
0009FBr 2  68                   pla
0009FCr 2  4A                   lsr     a
0009FDr 2  85 68                sta     CPRMASK
0009FFr 2  68                   pla
000A00r 2  85 BE                sta     ARG
000A02r 2  68                   pla
000A03r 2  85 BF                sta     ARG+1
000A05r 2  68                   pla
000A06r 2  85 C0                sta     ARG+2
000A08r 2  68                   pla
000A09r 2  85 C1                sta     ARG+3
000A0Br 2  68                   pla
000A0Cr 2               .ifndef CONFIG_SMALL
000A0Cr 2                       sta     ARG+4
000A0Cr 2                       pla
000A0Cr 2               .endif
000A0Cr 2  85 C2                sta     ARGSIGN
000A0Er 2  45 BB                eor     FACSIGN
000A10r 2  85 C3                sta     SGNCPR
000A12r 2               EXIT:
000A12r 2  A5 B7                lda     FAC
000A14r 2  60                   rts
000A15r 2               
000A15r 2               ; ----------------------------------------------------------------------------
000A15r 2               ; GET ELEMENT IN EXPRESSION
000A15r 2               ;
000A15r 2               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
000A15r 2               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
000A15r 2               ; ----------------------------------------------------------------------------
000A15r 2               FRM_ELEMENT:
000A15r 2  A9 00                lda     #$00
000A17r 2  85 64                sta     VALTYP
000A19r 2               L2D31:
000A19r 2  20 C7 00             jsr     CHRGET
000A1Cr 2  B0 03                bcs     L2D39
000A1Er 2               L2D36:
000A1Er 2  4C rr rr             jmp     FIN
000A21r 2               L2D39:
000A21r 2  20 rr rr             jsr     ISLETC
000A24r 2  B0 67                bcs     FRM_VARIABLE
000A26r 2               .ifdef CONFIG_CBM_ALL
000A26r 2                       cmp     #$FF
000A26r 2                       bne     LCDC1
000A26r 2                       lda     #<CON_PI
000A26r 2                       ldy     #>CON_PI
000A26r 2                       jsr     LOAD_FAC_FROM_YA
000A26r 2                       jmp     CHRGET
000A26r 2               CON_PI:
000A26r 2                       .byte   $82,$49,$0f,$DA,$A1
000A26r 2               LCDC1:
000A26r 2               .endif
000A26r 2  C9 2E                cmp     #$2E
000A28r 2  F0 F4                beq     L2D36
000A2Ar 2  C9 A7                cmp     #TOKEN_MINUS
000A2Cr 2  F0 58                beq     MIN
000A2Er 2  C9 A6                cmp     #TOKEN_PLUS
000A30r 2  F0 E7                beq     L2D31
000A32r 2  C9 22                cmp     #$22
000A34r 2  D0 0F                bne     NOT_
000A36r 2               
000A36r 2               ; ----------------------------------------------------------------------------
000A36r 2               ; STRING CONSTANT ELEMENT
000A36r 2               ;
000A36r 2               ; SET Y,A = (TXTPTR)+CARRY
000A36r 2               ; ----------------------------------------------------------------------------
000A36r 2               STRTXT:
000A36r 2  A5 CE                lda     TXTPTR
000A38r 2  A4 CF                ldy     TXTPTR+1
000A3Ar 2  69 00                adc     #$00
000A3Cr 2  90 01                bcc     L2D57
000A3Er 2  C8                   iny
000A3Fr 2               L2D57:
000A3Fr 2  20 rr rr             jsr     STRLIT
000A42r 2  4C rr rr             jmp     POINT
000A45r 2               
000A45r 2               ; ----------------------------------------------------------------------------
000A45r 2               ; "NOT" FUNCTION
000A45r 2               ; IF FAC=0, RETURN FAC=1
000A45r 2               ; IF FAC<>0, RETURN FAC=0
000A45r 2               ; ----------------------------------------------------------------------------
000A45r 2               NOT_:
000A45r 2  C9 A4                cmp     #TOKEN_NOT
000A47r 2  D0 13                bne     L2D74
000A49r 2  A0 18                ldy     #$18
000A4Br 2  D0 3B                bne     EQUL
000A4Dr 2               
000A4Dr 2               ; ----------------------------------------------------------------------------
000A4Dr 2               ; COMPARISON FOR EQUALITY (= OPERATOR)
000A4Dr 2               ; ALSO USED TO EVALUATE "NOT" FUNCTION
000A4Dr 2               ; ----------------------------------------------------------------------------
000A4Dr 2               EQUOP:
000A4Dr 2  20 rr rr             jsr     AYINT
000A50r 2  A5 BA                lda     FAC_LAST
000A52r 2  49 FF                eor     #$FF
000A54r 2  A8                   tay
000A55r 2  A5 B9                lda     FAC_LAST-1
000A57r 2  49 FF                eor     #$FF
000A59r 2  4C rr rr             jmp     GIVAYF
000A5Cr 2               L2D74:
000A5Cr 2  C9 A1                cmp     #TOKEN_FN
000A5Er 2  D0 03                bne     L2D7B
000A60r 2  4C rr rr             jmp     L31F3
000A63r 2               L2D7B:
000A63r 2  C9 B0                cmp     #TOKEN_SGN
000A65r 2  90 03                bcc     PARCHK
000A67r 2  4C rr rr             jmp     UNARY
000A6Ar 2               
000A6Ar 2               ; ----------------------------------------------------------------------------
000A6Ar 2               ; EVALUATE "(EXPRESSION)"
000A6Ar 2               ; ----------------------------------------------------------------------------
000A6Ar 2               PARCHK:
000A6Ar 2  20 rr rr             jsr     CHKOPN
000A6Dr 2  20 rr rr             jsr     FRMEVL
000A70r 2               CHKCLS:
000A70r 2  A9 29                lda     #$29
000A72r 2  2C                   .byte   $2C
000A73r 2               CHKOPN:
000A73r 2  A9 28                lda     #$28
000A75r 2  2C                   .byte   $2C
000A76r 2               CHKCOM:
000A76r 2  A9 2C                lda     #$2C
000A78r 2               
000A78r 2               ; ----------------------------------------------------------------------------
000A78r 2               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
000A78r 2               ; ----------------------------------------------------------------------------
000A78r 2               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
000A78r 2  A0 00                ldy     #$00
000A7Ar 2  D1 CE                cmp     (TXTPTR),y
000A7Cr 2  D0 03                bne     SYNERR
000A7Er 2  4C C7 00             jmp     CHRGET
000A81r 2               ; ----------------------------------------------------------------------------
000A81r 2               SYNERR:
000A81r 2  A2 02                ldx     #ERR_SYNTAX
000A83r 2  4C rr rr             jmp     ERROR
000A86r 2               ; ----------------------------------------------------------------------------
000A86r 2               MIN:
000A86r 2  A0 15                ldy     #$15
000A88r 2               EQUL:
000A88r 2  68                   pla
000A89r 2  68                   pla
000A8Ar 2  4C rr rr             jmp     L2CA4
000A8Dr 2               ; ----------------------------------------------------------------------------
000A8Dr 2               FRM_VARIABLE:
000A8Dr 2  20 rr rr             jsr     PTRGET
000A90r 2               FRM_VARIABLE_CALL	= *-1
000A90r 2  85 B9                sta     FAC_LAST-1
000A92r 2  84 BA                sty     FAC_LAST
000A94r 2               .ifdef CONFIG_CBM_ALL
000A94r 2                       lda     VARNAM
000A94r 2                       ldy     VARNAM+1
000A94r 2               .endif
000A94r 2  A6 64                ldx     VALTYP
000A96r 2  F0 01                beq     L2DB1
000A98r 2               .ifdef CONFIG_CBM_ALL
000A98r 2                 .ifdef CONFIG_CBM1_PATCHES
000A98r 2                       jmp     PATCH2
000A98r 2                       clc
000A98r 2               LCE3B:
000A98r 2                 .else
000A98r 2                       ldx     #$00
000A98r 2                       stx     STRNG1+1
000A98r 2                       bit     FAC+4
000A98r 2                       bpl     LCE53
000A98r 2                       cmp     #$54	; T
000A98r 2                       bne     LCE53
000A98r 2                 .endif
000A98r 2                       cpy     #$C9	; I$
000A98r 2                       bne     LCE53
000A98r 2                       jsr     LCE76
000A98r 2                       sty     EXPON
000A98r 2                       dey
000A98r 2                       sty     STRNG2
000A98r 2                       ldy     #$06
000A98r 2                       sty     INDX
000A98r 2                       ldy     #$24
000A98r 2                       jsr     LDD3A
000A98r 2                       jmp     LD353
000A98r 2               LCE53:
000A98r 2               .endif
000A98r 2               .ifdef CONFIG_2
000A98r 2                 .ifndef CBM2
000A98r 2               ; bugfix?
000A98r 2               ; fixed on AppleSoft II, not on any CBM
000A98r 2                       ldx     #$00
000A98r 2                       stx     STRNG1+1
000A98r 2                 .endif
000A98r 2               .endif
000A98r 2  60                   rts
000A99r 2               L2DB1:
000A99r 2               .ifndef CONFIG_SMALL
000A99r 2                       ldx     VALTYP+1
000A99r 2                       bpl     L2DC2
000A99r 2                       ldy     #$00
000A99r 2                       lda     (FAC+3),y
000A99r 2                       tax
000A99r 2                       iny
000A99r 2                       lda     (FAC+3),y
000A99r 2                       tay
000A99r 2                       txa
000A99r 2                       jmp     GIVAYF
000A99r 2               L2DC2:
000A99r 2               .endif
000A99r 2               .ifdef CONFIG_CBM1_PATCHES
000A99r 2                       jmp     PATCH3
000A99r 2                       .byte   $19
000A99r 2               .endif
000A99r 2               .ifdef CBM2
000A99r 2                       bit     FAC+4
000A99r 2                       bpl     LCE90
000A99r 2                       cmp     #$54
000A99r 2                       bne     LCE82
000A99r 2               .endif
000A99r 2               .ifndef CONFIG_CBM_ALL
000A99r 2  4C rr rr             jmp     LOAD_FAC_FROM_YA
000A9Cr 2               .endif
000A9Cr 2               .ifdef CONFIG_CBM_ALL
000A9Cr 2               LCE69:
000A9Cr 2                       cpy     #$49
000A9Cr 2               .ifdef CBM1
000A9Cr 2                       bne     LCE82
000A9Cr 2               .else
000A9Cr 2                       bne     LCE90
000A9Cr 2               .endif
000A9Cr 2                       jsr     LCE76
000A9Cr 2                       tya
000A9Cr 2                       ldx     #$A0
000A9Cr 2                       jmp     LDB21
000A9Cr 2               LCE76:
000A9Cr 2               .ifdef CBM1
000A9Cr 2                       lda     #$FE
000A9Cr 2                       ldy     #$01
000A9Cr 2               .else
000A9Cr 2                       lda     #$8B
000A9Cr 2                       ldy     #$00
000A9Cr 2               .endif
000A9Cr 2                       sei
000A9Cr 2                       jsr     LOAD_FAC_FROM_YA
000A9Cr 2                       cli
000A9Cr 2                       sty     FAC+1
000A9Cr 2                       rts
000A9Cr 2               LCE82:
000A9Cr 2                       cmp     #$53
000A9Cr 2                       bne     LCE90
000A9Cr 2                       cpy     #$54
000A9Cr 2                       bne     LCE90
000A9Cr 2                       lda     Z96
000A9Cr 2                       jmp     FLOAT
000A9Cr 2               LCE90:
000A9Cr 2                       lda     FAC+3
000A9Cr 2                       ldy     FAC+4
000A9Cr 2                       jmp     LOAD_FAC_FROM_YA
000A9Cr 2               .endif
000A9Cr 2               
000A9Cr 2               ; ----------------------------------------------------------------------------
000A9Cr 2               UNARY:
000A9Cr 2  0A                   asl     a
000A9Dr 2  48                   pha
000A9Er 2  AA                   tax
000A9Fr 2  20 C7 00             jsr     CHRGET
000AA2r 2  E0 87                cpx     #<(TOKEN_LEFTSTR*2-1)
000AA4r 2  90 20                bcc     L2DEF
000AA6r 2  20 rr rr             jsr     CHKOPN
000AA9r 2  20 rr rr             jsr     FRMEVL
000AACr 2  20 rr rr             jsr     CHKCOM
000AAFr 2  20 rr rr             jsr     CHKSTR
000AB2r 2  68                   pla
000AB3r 2  AA                   tax
000AB4r 2  A5 BA                lda     FAC_LAST
000AB6r 2  48                   pha
000AB7r 2  A5 B9                lda     FAC_LAST-1
000AB9r 2  48                   pha
000ABAr 2  8A                   txa
000ABBr 2  48                   pha
000ABCr 2  20 rr rr             jsr     GETBYT
000ABFr 2  68                   pla
000AC0r 2  A8                   tay
000AC1r 2  8A                   txa
000AC2r 2  48                   pha
000AC3r 2  4C rr rr             jmp     L2DF4
000AC6r 2               L2DEF:
000AC6r 2  20 rr rr             jsr     PARCHK
000AC9r 2  68                   pla
000ACAr 2  A8                   tay
000ACBr 2               L2DF4:
000ACBr 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$100,y
000ACEr 2  85 AD                sta     JMPADRS+1
000AD0r 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$101,y
000AD3r 2  85 AE                sta     JMPADRS+2
000AD5r 2               .ifdef KBD
000AD5r 2                       jsr     LF47D
000AD5r 2               .else
000AD5r 2  20 AC 00             jsr     JMPADRS
000AD8r 2               .endif
000AD8r 2  4C rr rr             jmp     CHKNUM
000ADBr 2               
000ADBr 2               ; ----------------------------------------------------------------------------
000ADBr 2               OR:
000ADBr 2  A0 FF                ldy     #$FF
000ADDr 2  2C                   .byte   $2C
000ADEr 2               ; ----------------------------------------------------------------------------
000ADEr 2               TAND:
000ADEr 2  A0 00                ldy     #$00
000AE0r 2  84 62                sty     EOLPNTR
000AE2r 2  20 rr rr             jsr     AYINT
000AE5r 2  A5 B9                lda     FAC_LAST-1
000AE7r 2  45 62                eor     EOLPNTR
000AE9r 2  85 60                sta     CHARAC
000AEBr 2  A5 BA                lda     FAC_LAST
000AEDr 2  45 62                eor     EOLPNTR
000AEFr 2  85 61                sta     ENDCHR
000AF1r 2  20 rr rr             jsr     COPY_ARG_TO_FAC
000AF4r 2  20 rr rr             jsr     AYINT
000AF7r 2  A5 BA                lda     FAC_LAST
000AF9r 2  45 62                eor     EOLPNTR
000AFBr 2  25 61                and     ENDCHR
000AFDr 2  45 62                eor     EOLPNTR
000AFFr 2  A8                   tay
000B00r 2  A5 B9                lda     FAC_LAST-1
000B02r 2  45 62                eor     EOLPNTR
000B04r 2  25 60                and     CHARAC
000B06r 2  45 62                eor     EOLPNTR
000B08r 2  4C rr rr             jmp     GIVAYF
000B0Br 2               
000B0Br 2               ; ----------------------------------------------------------------------------
000B0Br 2               ; PERFORM RELATIONAL OPERATIONS
000B0Br 2               ; ----------------------------------------------------------------------------
000B0Br 2               RELOPS:
000B0Br 2  20 rr rr             jsr     CHKVAL
000B0Er 2  B0 13                bcs     STRCMP
000B10r 2  A5 C2                lda     ARGSIGN
000B12r 2  09 7F                ora     #$7F
000B14r 2  25 BF                and     ARG+1
000B16r 2  85 BF                sta     ARG+1
000B18r 2  A9 BE                lda     #<ARG
000B1Ar 2  A0 00                ldy     #$00
000B1Cr 2  20 rr rr             jsr     FCOMP
000B1Fr 2  AA                   tax
000B20r 2  4C rr rr             jmp     NUMCMP
000B23r 2               
000B23r 2               ; ----------------------------------------------------------------------------
000B23r 2               ; STRING COMPARISON
000B23r 2               ; ----------------------------------------------------------------------------
000B23r 2               STRCMP:
000B23r 2  A9 00                lda     #$00
000B25r 2  85 64                sta     VALTYP
000B27r 2  C6 A6                dec     CPRTYP
000B29r 2  20 rr rr             jsr     FREFAC
000B2Cr 2  85 B7                sta     FAC
000B2Er 2  86 B8                stx     FAC+1
000B30r 2  84 B9                sty     FAC+2
000B32r 2  A5 C0                lda     ARG_LAST-1
000B34r 2  A4 C1                ldy     ARG_LAST
000B36r 2  20 rr rr             jsr     FRETMP
000B39r 2  86 C0                stx     ARG_LAST-1
000B3Br 2  84 C1                sty     ARG_LAST
000B3Dr 2  AA                   tax
000B3Er 2  38                   sec
000B3Fr 2  E5 B7                sbc     FAC
000B41r 2  F0 08                beq     L2E74
000B43r 2  A9 01                lda     #$01
000B45r 2  90 04                bcc     L2E74
000B47r 2  A6 B7                ldx     FAC
000B49r 2  A9 FF                lda     #$FF
000B4Br 2               L2E74:
000B4Br 2  85 BB                sta     FACSIGN
000B4Dr 2  A0 FF                ldy     #$FF
000B4Fr 2  E8                   inx
000B50r 2               STRCMP1:
000B50r 2  C8                   iny
000B51r 2  CA                   dex
000B52r 2  D0 07                bne     L2E84
000B54r 2  A6 BB                ldx     FACSIGN
000B56r 2               NUMCMP:
000B56r 2  30 0F                bmi     CMPDONE
000B58r 2  18                   clc
000B59r 2  90 0C                bcc     CMPDONE
000B5Br 2               L2E84:
000B5Br 2  B1 C0                lda     (ARG_LAST-1),y
000B5Dr 2  D1 B8                cmp     (FAC+1),y
000B5Fr 2  F0 EF                beq     STRCMP1
000B61r 2  A2 FF                ldx     #$FF
000B63r 2  B0 02                bcs     CMPDONE
000B65r 2  A2 01                ldx     #$01
000B67r 2               CMPDONE:
000B67r 2  E8                   inx
000B68r 2  8A                   txa
000B69r 2  2A                   rol     a
000B6Ar 2  25 68                and     CPRMASK
000B6Cr 2  F0 02                beq     L2E99
000B6Er 2  A9 FF                lda     #$FF
000B70r 2               L2E99:
000B70r 2  4C rr rr             jmp     FLOAT
000B73r 2               
000B73r 1               .include "var.s"
000B73r 2               .segment "CODE"
000B73r 2               
000B73r 2               ; ----------------------------------------------------------------------------
000B73r 2               ; "DIM" STATEMENT
000B73r 2               ; ----------------------------------------------------------------------------
000B73r 2               NXDIM:
000B73r 2  20 rr rr             jsr     CHKCOM
000B76r 2               DIM:
000B76r 2  AA                   tax
000B77r 2  20 rr rr             jsr     PTRGET2
000B7Ar 2  20 CD 00             jsr     CHRGOT
000B7Dr 2  D0 F4                bne     NXDIM
000B7Fr 2  60                   rts
000B80r 2               
000B80r 2               ; ----------------------------------------------------------------------------
000B80r 2               ; PTRGET -- GENERAL VARIABLE SCAN
000B80r 2               ;
000B80r 2               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
000B80r 2               ; VARTAB AND ARYTAB FOR THE NAME.
000B80r 2               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
000B80r 2               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
000B80r 2               ;
000B80r 2               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
000B80r 2               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
000B80r 2               ;		ELSE = 0
000B80r 2               ;
000B80r 2               ;	SUBFLG -- = $00
000B80r 2               ;		= $40 IF CALLED FROM "GETARYPT"
000B80r 2               ; ----------------------------------------------------------------------------
000B80r 2               PTRGET:
000B80r 2  A2 00                ldx     #$00
000B82r 2  20 CD 00             jsr     CHRGOT
000B85r 2               PTRGET2:
000B85r 2  86 63                stx     DIMFLG
000B87r 2               PTRGET3:
000B87r 2  85 9E                sta     VARNAM
000B89r 2  20 CD 00             jsr     CHRGOT
000B8Cr 2  20 rr rr             jsr     ISLETC
000B8Fr 2  B0 03                bcs     NAMOK
000B91r 2               SYNERR3:
000B91r 2  4C rr rr             jmp     SYNERR
000B94r 2               NAMOK:
000B94r 2  A2 00                ldx     #$00
000B96r 2  86 64                stx     VALTYP
000B98r 2               .ifndef CONFIG_SMALL
000B98r 2                       stx     VALTYP+1
000B98r 2               .endif
000B98r 2  20 C7 00             jsr     CHRGET
000B9Br 2  90 05                bcc     L2ECD
000B9Dr 2  20 rr rr             jsr     ISLETC
000BA0r 2  90 0B                bcc     L2ED8
000BA2r 2               L2ECD:
000BA2r 2  AA                   tax
000BA3r 2               L2ECE:
000BA3r 2  20 C7 00             jsr     CHRGET
000BA6r 2  90 FB                bcc     L2ECE
000BA8r 2  20 rr rr             jsr     ISLETC
000BABr 2  B0 F6                bcs     L2ECE
000BADr 2               L2ED8:
000BADr 2  C9 24                cmp     #$24
000BAFr 2               .ifdef CONFIG_SMALL
000BAFr 2  D0 0B                bne     L2EF9
000BB1r 2               .else
000BB1r 2                       bne     L2EE2
000BB1r 2               .endif
000BB1r 2  A9 FF                lda     #$FF
000BB3r 2  85 64                sta     VALTYP
000BB5r 2               .ifndef CONFIG_SMALL
000BB5r 2                       bne     L2EF2
000BB5r 2               L2EE2:
000BB5r 2                       cmp     #$25
000BB5r 2                       bne     L2EF9
000BB5r 2                       lda     SUBFLG
000BB5r 2                       bne     SYNERR3
000BB5r 2                       lda     #$80
000BB5r 2                       sta     VALTYP+1
000BB5r 2                       ora     VARNAM
000BB5r 2                       sta     VARNAM
000BB5r 2               L2EF2:
000BB5r 2               .endif
000BB5r 2  8A                   txa
000BB6r 2  09 80                ora     #$80
000BB8r 2  AA                   tax
000BB9r 2  20 C7 00             jsr     CHRGET
000BBCr 2               L2EF9:
000BBCr 2  86 9F                stx     VARNAM+1
000BBEr 2  38                   sec
000BBFr 2  05 66                ora     SUBFLG
000BC1r 2  E9 28                sbc     #$28
000BC3r 2  D0 03                bne     L2F05
000BC5r 2  4C rr rr             jmp     ARRAY
000BC8r 2               L2F05:
000BC8r 2  A9 00                lda     #$00
000BCAr 2  85 66                sta     SUBFLG
000BCCr 2  A5 86                lda     VARTAB
000BCEr 2  A6 87                ldx     VARTAB+1
000BD0r 2  A0 00                ldy     #$00
000BD2r 2               L2F0F:
000BD2r 2  86 B6                stx     LOWTR+1
000BD4r 2               L2F11:
000BD4r 2  85 B5                sta     LOWTR
000BD6r 2  E4 89                cpx     ARYTAB+1
000BD8r 2  D0 04                bne     L2F1B
000BDAr 2  C5 88                cmp     ARYTAB
000BDCr 2  F0 22                beq     NAMENOTFOUND
000BDEr 2               L2F1B:
000BDEr 2  A5 9E                lda     VARNAM
000BE0r 2  D1 B5                cmp     (LOWTR),y
000BE2r 2  D0 08                bne     L2F29
000BE4r 2  A5 9F                lda     VARNAM+1
000BE6r 2  C8                   iny
000BE7r 2  D1 B5                cmp     (LOWTR),y
000BE9r 2  F0 61                beq     SET_VARPNT_AND_YA
000BEBr 2  88                   dey
000BECr 2               L2F29:
000BECr 2  18                   clc
000BEDr 2  A5 B5                lda     LOWTR
000BEFr 2  69 06                adc     #BYTES_PER_VARIABLE
000BF1r 2  90 E1                bcc     L2F11
000BF3r 2  E8                   inx
000BF4r 2  D0 DC                bne     L2F0F
000BF6r 2               
000BF6r 2               ; ----------------------------------------------------------------------------
000BF6r 2               ; CHECK IF (A) IS ASCII LETTER A-Z
000BF6r 2               ;
000BF6r 2               ; RETURN CARRY = 1 IF A-Z
000BF6r 2               ;	= 0 IF NOT
000BF6r 2               ; ----------------------------------------------------------------------------
000BF6r 2               ISLETC:
000BF6r 2  C9 41                cmp     #$41
000BF8r 2  90 05                bcc     L2F3C
000BFAr 2  E9 5B                sbc     #$5B
000BFCr 2  38                   sec
000BFDr 2  E9 A5                sbc     #$A5
000BFFr 2               L2F3C:
000BFFr 2  60                   rts
000C00r 2               
000C00r 2               ; ----------------------------------------------------------------------------
000C00r 2               ; VARIABLE NOT FOUND, SO MAKE ONE
000C00r 2               ; ----------------------------------------------------------------------------
000C00r 2               NAMENOTFOUND:
000C00r 2  68                   pla
000C01r 2  48                   pha
000C02r 2  C9 rr                cmp     #<FRM_VARIABLE_CALL
000C04r 2  D0 07                bne     MAKENEWVARIABLE
000C06r 2               .ifdef CONFIG_SAFE_NAMENOTFOUND
000C06r 2                       tsx
000C06r 2                       lda     STACK+2,x
000C06r 2                       cmp     #>FRM_VARIABLE_CALL
000C06r 2                       bne     MAKENEWVARIABLE
000C06r 2               .endif
000C06r 2               LD015:
000C06r 2  A9 rr                lda     #<C_ZERO
000C08r 2  A0 rr                ldy     #>C_ZERO
000C0Ar 2  60                   rts
000C0Br 2               
000C0Br 2               ; ----------------------------------------------------------------------------
000C0Br 2               .ifndef CONFIG_2
000C0Br 2               C_ZERO:
000C0Br 2  00 00                .byte   $00,$00
000C0Dr 2               .endif
000C0Dr 2               
000C0Dr 2               ; ----------------------------------------------------------------------------
000C0Dr 2               ; MAKE A NEW SIMPLE VARIABLE
000C0Dr 2               ;
000C0Dr 2               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
000C0Dr 2               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
000C0Dr 2               ; ----------------------------------------------------------------------------
000C0Dr 2               MAKENEWVARIABLE:
000C0Dr 2               .ifdef CONFIG_CBM_ALL
000C0Dr 2                       lda     VARNAM
000C0Dr 2                       ldy     VARNAM+1
000C0Dr 2                       cmp     #$54
000C0Dr 2                       bne     LD02F
000C0Dr 2                       cpy     #$C9
000C0Dr 2                       beq     LD015
000C0Dr 2                       cpy     #$49
000C0Dr 2                       bne     LD02F
000C0Dr 2               LD02C:
000C0Dr 2                       jmp     SYNERR
000C0Dr 2               LD02F:
000C0Dr 2                       cmp     #$53
000C0Dr 2                       bne     LD037
000C0Dr 2                       cpy     #$54
000C0Dr 2                       beq     LD02C
000C0Dr 2               LD037:
000C0Dr 2               .endif
000C0Dr 2  A5 88                lda     ARYTAB
000C0Fr 2  A4 89                ldy     ARYTAB+1
000C11r 2  85 B5                sta     LOWTR
000C13r 2  84 B6                sty     LOWTR+1
000C15r 2  A5 8A                lda     STREND
000C17r 2  A4 8B                ldy     STREND+1
000C19r 2  85 B1                sta     HIGHTR
000C1Br 2  84 B2                sty     HIGHTR+1
000C1Dr 2  18                   clc
000C1Er 2  69 06                adc     #BYTES_PER_VARIABLE
000C20r 2  90 01                bcc     L2F68
000C22r 2  C8                   iny
000C23r 2               L2F68:
000C23r 2  85 AF                sta     HIGHDS
000C25r 2  84 B0                sty     HIGHDS+1
000C27r 2  20 rr rr             jsr     BLTU
000C2Ar 2  A5 AF                lda     HIGHDS
000C2Cr 2  A4 B0                ldy     HIGHDS+1
000C2Er 2  C8                   iny
000C2Fr 2  85 88                sta     ARYTAB
000C31r 2  84 89                sty     ARYTAB+1
000C33r 2  A0 00                ldy     #$00
000C35r 2  A5 9E                lda     VARNAM
000C37r 2  91 B5                sta     (LOWTR),y
000C39r 2  C8                   iny
000C3Ar 2  A5 9F                lda     VARNAM+1
000C3Cr 2  91 B5                sta     (LOWTR),y
000C3Er 2  A9 00                lda     #$00
000C40r 2  C8                   iny
000C41r 2  91 B5                sta     (LOWTR),y
000C43r 2  C8                   iny
000C44r 2  91 B5                sta     (LOWTR),y
000C46r 2  C8                   iny
000C47r 2  91 B5                sta     (LOWTR),y
000C49r 2  C8                   iny
000C4Ar 2  91 B5                sta     (LOWTR),y
000C4Cr 2               .ifndef CONFIG_SMALL
000C4Cr 2                       iny
000C4Cr 2                       sta     (LOWTR),y
000C4Cr 2               .endif
000C4Cr 2               
000C4Cr 2               ; ----------------------------------------------------------------------------
000C4Cr 2               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
000C4Cr 2               ; ----------------------------------------------------------------------------
000C4Cr 2               SET_VARPNT_AND_YA:
000C4Cr 2  A5 B5                lda     LOWTR
000C4Er 2  18                   clc
000C4Fr 2  69 02                adc     #$02
000C51r 2  A4 B6                ldy     LOWTR+1
000C53r 2  90 01                bcc     L2F9E
000C55r 2  C8                   iny
000C56r 2               L2F9E:
000C56r 2  85 A0                sta     VARPNT
000C58r 2  84 A1                sty     VARPNT+1
000C5Ar 2  60                   rts
000C5Br 2               
000C5Br 1               .include "array.s"
000C5Br 2               .segment "CODE"
000C5Br 2               
000C5Br 2               ; ----------------------------------------------------------------------------
000C5Br 2               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
000C5Br 2               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
000C5Br 2               ; ----------------------------------------------------------------------------
000C5Br 2               GETARY:
000C5Br 2  A5 62                lda     EOLPNTR
000C5Dr 2  0A                   asl     a
000C5Er 2  69 05                adc     #$05
000C60r 2  65 B5                adc     LOWTR
000C62r 2  A4 B6                ldy     LOWTR+1
000C64r 2  90 01                bcc     L2FAF
000C66r 2  C8                   iny
000C67r 2               L2FAF:
000C67r 2  85 AF                sta     HIGHDS
000C69r 2  84 B0                sty     HIGHDS+1
000C6Br 2  60                   rts
000C6Cr 2               
000C6Cr 2               ; ----------------------------------------------------------------------------
000C6Cr 2               NEG32768:
000C6Cr 2  90 80 00 00          .byte   $90,$80,$00,$00
000C70r 2               
000C70r 2               .ifdef CONFIG_2C
000C70r 2               		.byte	$00; bugfix: short number
000C70r 2               .endif
000C70r 2               
000C70r 2               ; ----------------------------------------------------------------------------
000C70r 2               ; EVALUATE NUMERIC FORMULA AT TXTPTR
000C70r 2               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
000C70r 2               ; IN FAC+3,4
000C70r 2               ; ----------------------------------------------------------------------------
000C70r 2               MAKINT:
000C70r 2  20 C7 00             jsr     CHRGET
000C73r 2               .ifdef CONFIG_2
000C73r 2                       jsr     FRMEVL
000C73r 2               .else
000C73r 2  20 rr rr             jsr     FRMNUM
000C76r 2               .endif
000C76r 2               
000C76r 2               ; ----------------------------------------------------------------------------
000C76r 2               ; CONVERT FAC TO INTEGER
000C76r 2               ; MUST BE POSITIVE AND LESS THAN 32768
000C76r 2               ; ----------------------------------------------------------------------------
000C76r 2               MKINT:
000C76r 2               .ifdef CONFIG_2
000C76r 2                       jsr     CHKNUM
000C76r 2               .endif
000C76r 2  A5 BB                lda     FACSIGN
000C78r 2  30 0D                bmi     MI1
000C7Ar 2               
000C7Ar 2               ; ----------------------------------------------------------------------------
000C7Ar 2               ; CONVERT FAC TO INTEGER
000C7Ar 2               ; MUST BE -32767 <= FAC <= 32767
000C7Ar 2               ; ----------------------------------------------------------------------------
000C7Ar 2               AYINT:
000C7Ar 2  A5 B7                lda     FAC
000C7Cr 2  C9 90                cmp     #$90
000C7Er 2  90 09                bcc     MI2
000C80r 2  A9 rr                lda     #<NEG32768
000C82r 2  A0 rr                ldy     #>NEG32768
000C84r 2  20 rr rr             jsr     FCOMP
000C87r 2               MI1:
000C87r 2  D0 74                bne     IQERR
000C89r 2               MI2:
000C89r 2  4C rr rr             jmp     QINT
000C8Cr 2               
000C8Cr 2               ; ----------------------------------------------------------------------------
000C8Cr 2               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
000C8Cr 2               ; ----------------------------------------------------------------------------
000C8Cr 2               ARRAY:
000C8Cr 2  A5 63                lda     DIMFLG
000C8Er 2               .ifndef CONFIG_SMALL
000C8Er 2                       ora     VALTYP+1
000C8Er 2               .endif
000C8Er 2  48                   pha
000C8Fr 2  A5 64                lda     VALTYP
000C91r 2  48                   pha
000C92r 2  A0 00                ldy     #$00
000C94r 2               L2FDE:
000C94r 2  98                   tya
000C95r 2  48                   pha
000C96r 2  A5 9F                lda     VARNAM+1
000C98r 2  48                   pha
000C99r 2  A5 9E                lda     VARNAM
000C9Br 2  48                   pha
000C9Cr 2  20 rr rr             jsr     MAKINT
000C9Fr 2  68                   pla
000CA0r 2  85 9E                sta     VARNAM
000CA2r 2  68                   pla
000CA3r 2  85 9F                sta     VARNAM+1
000CA5r 2  68                   pla
000CA6r 2  A8                   tay
000CA7r 2  BA                   tsx
000CA8r 2  BD 02 01             lda     STACK+2,x
000CABr 2  48                   pha
000CACr 2  BD 01 01             lda     STACK+1,x
000CAFr 2  48                   pha
000CB0r 2  A5 B9                lda     FAC_LAST-1
000CB2r 2  9D 02 01             sta     STACK+2,x
000CB5r 2  A5 BA                lda     FAC_LAST
000CB7r 2  9D 01 01             sta     STACK+1,x
000CBAr 2  C8                   iny
000CBBr 2  20 CD 00             jsr     CHRGOT
000CBEr 2  C9 2C                cmp     #$2C
000CC0r 2  F0 D2                beq     L2FDE
000CC2r 2  84 62                sty     EOLPNTR
000CC4r 2  20 rr rr             jsr     CHKCLS
000CC7r 2  68                   pla
000CC8r 2  85 64                sta     VALTYP
000CCAr 2  68                   pla
000CCBr 2               .ifndef CONFIG_SMALL
000CCBr 2                       sta     VALTYP+1
000CCBr 2                       and     #$7F
000CCBr 2               .endif
000CCBr 2  85 63                sta     DIMFLG
000CCDr 2               ; ----------------------------------------------------------------------------
000CCDr 2               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
000CCDr 2               ; ----------------------------------------------------------------------------
000CCDr 2  A6 88                ldx     ARYTAB
000CCFr 2  A5 89                lda     ARYTAB+1
000CD1r 2               L301F:
000CD1r 2  86 B5                stx     LOWTR
000CD3r 2  85 B6                sta     LOWTR+1
000CD5r 2  C5 8B                cmp     STREND+1
000CD7r 2  D0 04                bne     L302B
000CD9r 2  E4 8A                cpx     STREND
000CDBr 2  F0 39                beq     MAKE_NEW_ARRAY
000CDDr 2               L302B:
000CDDr 2  A0 00                ldy     #$00
000CDFr 2  B1 B5                lda     (LOWTR),y
000CE1r 2  C8                   iny
000CE2r 2  C5 9E                cmp     VARNAM
000CE4r 2  D0 06                bne     L303A
000CE6r 2  A5 9F                lda     VARNAM+1
000CE8r 2  D1 B5                cmp     (LOWTR),y
000CEAr 2  F0 16                beq     USE_OLD_ARRAY
000CECr 2               L303A:
000CECr 2  C8                   iny
000CEDr 2  B1 B5                lda     (LOWTR),y
000CEFr 2  18                   clc
000CF0r 2  65 B5                adc     LOWTR
000CF2r 2  AA                   tax
000CF3r 2  C8                   iny
000CF4r 2  B1 B5                lda     (LOWTR),y
000CF6r 2  65 B6                adc     LOWTR+1
000CF8r 2  90 D7                bcc     L301F
000CFAr 2               
000CFAr 2               ; ----------------------------------------------------------------------------
000CFAr 2               ; ERROR:  BAD SUBSCRIPTS
000CFAr 2               ; ----------------------------------------------------------------------------
000CFAr 2               SUBERR:
000CFAr 2  A2 10                ldx     #ERR_BADSUBS
000CFCr 2  2C                   .byte   $2C
000CFDr 2               
000CFDr 2               ; ----------------------------------------------------------------------------
000CFDr 2               ; ERROR:  ILLEGAL QUANTITY
000CFDr 2               ; ----------------------------------------------------------------------------
000CFDr 2               IQERR:
000CFDr 2  A2 08                ldx     #ERR_ILLQTY
000CFFr 2               JER:
000CFFr 2  4C rr rr             jmp     ERROR
000D02r 2               
000D02r 2               ; ----------------------------------------------------------------------------
000D02r 2               ; FOUND THE ARRAY
000D02r 2               ; ----------------------------------------------------------------------------
000D02r 2               USE_OLD_ARRAY:
000D02r 2  A2 12                ldx     #ERR_REDIMD
000D04r 2  A5 63                lda     DIMFLG
000D06r 2  D0 F7                bne     JER
000D08r 2  20 rr rr             jsr     GETARY
000D0Br 2  A5 62                lda     EOLPNTR
000D0Dr 2  A0 04                ldy     #$04
000D0Fr 2  D1 B5                cmp     (LOWTR),y
000D11r 2  D0 E7                bne     SUBERR
000D13r 2  4C rr rr             jmp     FIND_ARRAY_ELEMENT
000D16r 2               
000D16r 2               ; ----------------------------------------------------------------------------
000D16r 2               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
000D16r 2               ; ----------------------------------------------------------------------------
000D16r 2               MAKE_NEW_ARRAY:
000D16r 2  20 rr rr             jsr     GETARY
000D19r 2  20 rr rr             jsr     REASON
000D1Cr 2  A9 00                lda     #$00
000D1Er 2  A8                   tay
000D1Fr 2  85 C6                sta     STRNG2+1
000D21r 2  A2 04                ldx     #BYTES_PER_ELEMENT
000D23r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000D23r 2  86 C5                stx     STRNG2
000D25r 2               .endif
000D25r 2  A5 9E                lda     VARNAM
000D27r 2  91 B5                sta     (LOWTR),y
000D29r 2               .ifndef CONFIG_SMALL
000D29r 2                       bpl     L3078
000D29r 2                       dex
000D29r 2               L3078:
000D29r 2               .endif
000D29r 2  C8                   iny
000D2Ar 2  A5 9F                lda     VARNAM+1
000D2Cr 2  91 B5                sta     (LOWTR),y
000D2Er 2               .if (!.def(CONFIG_SMALL)) || .def(CONFIG_2)
000D2Er 2                       bpl     L3081
000D2Er 2                       dex
000D2Er 2                 .if !(.def(CONFIG_SMALL) && .def(CONFIG_2))
000D2Er 2                       dex
000D2Er 2                 .endif
000D2Er 2               L3081:
000D2Er 2                       stx     STRNG2
000D2Er 2               .endif
000D2Er 2  A5 62                lda     EOLPNTR
000D30r 2  C8                   iny
000D31r 2  C8                   iny
000D32r 2  C8                   iny
000D33r 2  91 B5                sta     (LOWTR),y
000D35r 2               L308A:
000D35r 2  A2 0B                ldx     #$0B
000D37r 2  A9 00                lda     #$00
000D39r 2  24 63                bit     DIMFLG
000D3Br 2  50 08                bvc     L309A
000D3Dr 2  68                   pla
000D3Er 2  18                   clc
000D3Fr 2  69 01                adc     #$01
000D41r 2  AA                   tax
000D42r 2  68                   pla
000D43r 2  69 00                adc     #$00
000D45r 2               L309A:
000D45r 2  C8                   iny
000D46r 2  91 B5                sta     (LOWTR),y
000D48r 2  C8                   iny
000D49r 2  8A                   txa
000D4Ar 2  91 B5                sta     (LOWTR),y
000D4Cr 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000D4Fr 2  86 C5                stx     STRNG2
000D51r 2  85 C6                sta     STRNG2+1
000D53r 2  A4 7C                ldy     INDEX
000D55r 2  C6 62                dec     EOLPNTR
000D57r 2  D0 DC                bne     L308A
000D59r 2  65 B0                adc     HIGHDS+1
000D5Br 2  B0 5D                bcs     GME
000D5Dr 2  85 B0                sta     HIGHDS+1
000D5Fr 2  A8                   tay
000D60r 2  8A                   txa
000D61r 2  65 AF                adc     HIGHDS
000D63r 2  90 03                bcc     L30BD
000D65r 2  C8                   iny
000D66r 2  F0 52                beq     GME
000D68r 2               L30BD:
000D68r 2  20 rr rr             jsr     REASON
000D6Br 2  85 8A                sta     STREND
000D6Dr 2  84 8B                sty     STREND+1
000D6Fr 2  A9 00                lda     #$00
000D71r 2  E6 C6                inc     STRNG2+1
000D73r 2  A4 C5                ldy     STRNG2
000D75r 2  F0 05                beq     L30D1
000D77r 2               L30CC:
000D77r 2  88                   dey
000D78r 2  91 AF                sta     (HIGHDS),y
000D7Ar 2  D0 FB                bne     L30CC
000D7Cr 2               L30D1:
000D7Cr 2  C6 B0                dec     HIGHDS+1
000D7Er 2  C6 C6                dec     STRNG2+1
000D80r 2  D0 F5                bne     L30CC
000D82r 2  E6 B0                inc     HIGHDS+1
000D84r 2  38                   sec
000D85r 2  A5 8A                lda     STREND
000D87r 2  E5 B5                sbc     LOWTR
000D89r 2  A0 02                ldy     #$02
000D8Br 2  91 B5                sta     (LOWTR),y
000D8Dr 2  A5 8B                lda     STREND+1
000D8Fr 2  C8                   iny
000D90r 2  E5 B6                sbc     LOWTR+1
000D92r 2  91 B5                sta     (LOWTR),y
000D94r 2  A5 63                lda     DIMFLG
000D96r 2  D0 58                bne     RTS9
000D98r 2  C8                   iny
000D99r 2               
000D99r 2               ; ----------------------------------------------------------------------------
000D99r 2               ; FIND SPECIFIED ARRAY ELEMENT
000D99r 2               ;
000D99r 2               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
000D99r 2               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
000D99r 2               ; ----------------------------------------------------------------------------
000D99r 2               FIND_ARRAY_ELEMENT:
000D99r 2  B1 B5                lda     (LOWTR),y
000D9Br 2  85 62                sta     EOLPNTR
000D9Dr 2  A9 00                lda     #$00
000D9Fr 2  85 C5                sta     STRNG2
000DA1r 2               L30F6:
000DA1r 2  85 C6                sta     STRNG2+1
000DA3r 2  C8                   iny
000DA4r 2  68                   pla
000DA5r 2  AA                   tax
000DA6r 2  85 B9                sta     FAC_LAST-1
000DA8r 2  68                   pla
000DA9r 2  85 BA                sta     FAC_LAST
000DABr 2  D1 B5                cmp     (LOWTR),y
000DADr 2  90 0E                bcc     FAE2
000DAFr 2  D0 06                bne     GSE
000DB1r 2  C8                   iny
000DB2r 2  8A                   txa
000DB3r 2  D1 B5                cmp     (LOWTR),y
000DB5r 2  90 07                bcc     FAE3
000DB7r 2               ; ----------------------------------------------------------------------------
000DB7r 2               GSE:
000DB7r 2  4C rr rr             jmp     SUBERR
000DBAr 2               GME:
000DBAr 2  4C rr rr             jmp     MEMERR
000DBDr 2               ; ----------------------------------------------------------------------------
000DBDr 2               FAE2:
000DBDr 2  C8                   iny
000DBEr 2               FAE3:
000DBEr 2  A5 C6                lda     STRNG2+1
000DC0r 2  05 C5                ora     STRNG2
000DC2r 2  18                   clc
000DC3r 2  F0 0A                beq     L3124
000DC5r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000DC8r 2  8A                   txa
000DC9r 2  65 B9                adc     FAC_LAST-1
000DCBr 2  AA                   tax
000DCCr 2  98                   tya
000DCDr 2  A4 7C                ldy     INDEX
000DCFr 2               L3124:
000DCFr 2  65 BA                adc     FAC_LAST
000DD1r 2  86 C5                stx     STRNG2
000DD3r 2  C6 62                dec     EOLPNTR
000DD5r 2  D0 CA                bne     L30F6
000DD7r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000DD7r 2  06 C5                asl     STRNG2
000DD9r 2  2A                   rol     a
000DDAr 2  B0 DB                bcs     GSE
000DDCr 2  06 C5                asl     STRNG2
000DDEr 2  2A                   rol     a
000DDFr 2  B0 D6                bcs     GSE
000DE1r 2  A8                   tay
000DE2r 2  A5 C5                lda     STRNG2
000DE4r 2               .else
000DE4r 2                 .ifdef CONFIG_11A
000DE4r 2                       sta     STRNG2+1
000DE4r 2                 .endif
000DE4r 2                       ldx     #BYTES_FP
000DE4r 2                 .ifdef CONFIG_SMALL
000DE4r 2                       lda     VARNAM+1
000DE4r 2                 .else
000DE4r 2                       lda     VARNAM
000DE4r 2                 .endif
000DE4r 2                       bpl     L3135
000DE4r 2                       dex
000DE4r 2               L3135:
000DE4r 2                 .ifdef CONFIG_SMALL
000DE4r 2                       stx     RESULT+1
000DE4r 2                 .else
000DE4r 2                       lda     VARNAM+1
000DE4r 2                       bpl     L313B
000DE4r 2                       dex
000DE4r 2                       dex
000DE4r 2               L313B:
000DE4r 2                       stx     RESULT+2
000DE4r 2                 .endif
000DE4r 2                       lda     #$00
000DE4r 2                       jsr     MULTIPLY_SUBS1
000DE4r 2                       txa
000DE4r 2               .endif
000DE4r 2  65 AF                adc     HIGHDS
000DE6r 2  85 A0                sta     VARPNT
000DE8r 2  98                   tya
000DE9r 2  65 B0                adc     HIGHDS+1
000DEBr 2  85 A1                sta     VARPNT+1
000DEDr 2  A8                   tay
000DEEr 2  A5 A0                lda     VARPNT
000DF0r 2               RTS9:
000DF0r 2  60                   rts
000DF1r 2               
000DF1r 2               ; ----------------------------------------------------------------------------
000DF1r 2               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
000DF1r 2               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
000DF1r 2               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
000DF1r 2               ; ----------------------------------------------------------------------------
000DF1r 2               MULTIPLY_SUBSCRIPT:
000DF1r 2  84 7C                sty     INDEX
000DF3r 2  B1 B5                lda     (LOWTR),y
000DF5r 2  85 81                sta     RESULT_LAST-2
000DF7r 2  88                   dey
000DF8r 2  B1 B5                lda     (LOWTR),y
000DFAr 2               MULTIPLY_SUBS1:
000DFAr 2  85 82                sta     RESULT_LAST-1
000DFCr 2  A9 10                lda     #$10
000DFEr 2  85 B3                sta     INDX
000E00r 2  A2 00                ldx     #$00
000E02r 2  A0 00                ldy     #$00
000E04r 2               L3163:
000E04r 2  8A                   txa
000E05r 2  0A                   asl     a
000E06r 2  AA                   tax
000E07r 2  98                   tya
000E08r 2  2A                   rol     a
000E09r 2  A8                   tay
000E0Ar 2  B0 AE                bcs     GME
000E0Cr 2  06 C5                asl     STRNG2
000E0Er 2  26 C6                rol     STRNG2+1
000E10r 2  90 0B                bcc     L317C
000E12r 2  18                   clc
000E13r 2  8A                   txa
000E14r 2  65 81                adc     RESULT_LAST-2
000E16r 2  AA                   tax
000E17r 2  98                   tya
000E18r 2  65 82                adc     RESULT_LAST-1
000E1Ar 2  A8                   tay
000E1Br 2  B0 9D                bcs     GME
000E1Dr 2               L317C:
000E1Dr 2  C6 B3                dec     INDX
000E1Fr 2  D0 E3                bne     L3163
000E21r 2  60                   rts
000E22r 2               
000E22r 2               
000E22r 1               .include "misc2.s"
000E22r 2               .segment "CODE"
000E22r 2               
000E22r 2               ; ----------------------------------------------------------------------------
000E22r 2               ; "FRE" FUNCTION
000E22r 2               ;
000E22r 2               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
000E22r 2               ; ----------------------------------------------------------------------------
000E22r 2               FRE:
000E22r 2  A5 64                lda     VALTYP
000E24r 2  F0 03                beq     L3188
000E26r 2  20 rr rr             jsr     FREFAC
000E29r 2               L3188:
000E29r 2  20 rr rr             jsr     GARBAG
000E2Cr 2  38                   sec
000E2Dr 2  A5 8C                lda     FRETOP
000E2Fr 2  E5 8A                sbc     STREND
000E31r 2  A8                   tay
000E32r 2  A5 8D                lda     FRETOP+1
000E34r 2  E5 8B                sbc     STREND+1
000E36r 2               ; FALL INTO GIVAYF TO FLOAT THE VALUE
000E36r 2               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
000E36r 2               
000E36r 2               ; ----------------------------------------------------------------------------
000E36r 2               ; FLOAT THE SIGNED INTEGER IN A,Y
000E36r 2               ; ----------------------------------------------------------------------------
000E36r 2               GIVAYF:
000E36r 2  A2 00                ldx     #$00
000E38r 2  86 64                stx     VALTYP
000E3Ar 2  85 B8                sta     FAC+1
000E3Cr 2  84 B9                sty     FAC+2
000E3Er 2  A2 90                ldx     #$90
000E40r 2  4C rr rr             jmp     FLOAT1
000E43r 2               POS:
000E43r 2  A4 0E                ldy     POSX
000E45r 2               
000E45r 2               ; ----------------------------------------------------------------------------
000E45r 2               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
000E45r 2               ; ----------------------------------------------------------------------------
000E45r 2               SNGFLT:
000E45r 2  A9 00                lda     #$00
000E47r 2  F0 ED                beq     GIVAYF
000E49r 2               
000E49r 2               ; ----------------------------------------------------------------------------
000E49r 2               ; CHECK FOR DIRECT OR RUNNING MODE
000E49r 2               ; GIVING ERROR IF DIRECT MODE
000E49r 2               ; ----------------------------------------------------------------------------
000E49r 2               ERRDIR:
000E49r 2  A6 93                ldx     CURLIN+1
000E4Br 2  E8                   inx
000E4Cr 2  D0 A2                bne     RTS9
000E4Er 2  A2 16                ldx     #ERR_ILLDIR
000E50r 2               .ifdef CONFIG_2
000E50r 2                       .byte   $2C
000E50r 2               LD288:
000E50r 2                       ldx     #ERR_UNDEFFN
000E50r 2               .endif
000E50r 2               L31AF:
000E50r 2  4C rr rr             jmp     ERROR
000E53r 2               DEF:
000E53r 2  20 rr rr             jsr     FNC
000E56r 2  20 rr rr             jsr     ERRDIR
000E59r 2  20 rr rr             jsr     CHKOPN
000E5Cr 2  A9 80                lda     #$80
000E5Er 2  85 66                sta     SUBFLG
000E60r 2  20 rr rr             jsr     PTRGET
000E63r 2  20 rr rr             jsr     CHKNUM
000E66r 2  20 rr rr             jsr     CHKCLS
000E69r 2  A9 AE                lda     #TOKEN_EQUAL
000E6Br 2  20 rr rr             jsr     SYNCHR
000E6Er 2               .ifndef CONFIG_SMALL
000E6Er 2                       pha
000E6Er 2               .endif
000E6Er 2  A5 A1                lda     VARPNT+1
000E70r 2  48                   pha
000E71r 2  A5 A0                lda     VARPNT
000E73r 2  48                   pha
000E74r 2  A5 CF                lda     TXTPTR+1
000E76r 2  48                   pha
000E77r 2  A5 CE                lda     TXTPTR
000E79r 2  48                   pha
000E7Ar 2  20 rr rr             jsr     DATA
000E7Dr 2  4C rr rr             jmp     L3250
000E80r 2               FNC:
000E80r 2  A9 A1                lda     #TOKEN_FN
000E82r 2  20 rr rr             jsr     SYNCHR
000E85r 2  09 80                ora     #$80
000E87r 2  85 66                sta     SUBFLG
000E89r 2  20 rr rr             jsr     PTRGET3
000E8Cr 2  85 A7                sta     FNCNAM
000E8Er 2  84 A8                sty     FNCNAM+1
000E90r 2  4C rr rr             jmp     CHKNUM
000E93r 2               L31F3:
000E93r 2  20 rr rr             jsr     FNC
000E96r 2  A5 A8                lda     FNCNAM+1
000E98r 2  48                   pha
000E99r 2  A5 A7                lda     FNCNAM
000E9Br 2  48                   pha
000E9Cr 2  20 rr rr             jsr     PARCHK
000E9Fr 2  20 rr rr             jsr     CHKNUM
000EA2r 2  68                   pla
000EA3r 2  85 A7                sta     FNCNAM
000EA5r 2  68                   pla
000EA6r 2  85 A8                sta     FNCNAM+1
000EA8r 2  A0 02                ldy     #$02
000EAAr 2               .ifndef CONFIG_2
000EAAr 2  A2 20                ldx     #ERR_UNDEFFN
000EACr 2               .endif
000EACr 2  B1 A7                lda     (FNCNAM),y
000EAEr 2               .ifndef CONFIG_2
000EAEr 2  F0 A0                beq     L31AF
000EB0r 2               .endif
000EB0r 2  85 A0                sta     VARPNT
000EB2r 2  AA                   tax
000EB3r 2  C8                   iny
000EB4r 2  B1 A7                lda     (FNCNAM),y
000EB6r 2               .ifdef CONFIG_2
000EB6r 2                       beq     LD288
000EB6r 2               .endif
000EB6r 2  85 A1                sta     VARPNT+1
000EB8r 2               .ifndef CONFIG_SMALL
000EB8r 2                       iny
000EB8r 2               .endif
000EB8r 2               L3219:
000EB8r 2  B1 A0                lda     (VARPNT),y
000EBAr 2  48                   pha
000EBBr 2  88                   dey
000EBCr 2  10 FA                bpl     L3219
000EBEr 2  A4 A1                ldy     VARPNT+1
000EC0r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
000EC3r 2  A5 CF                lda     TXTPTR+1
000EC5r 2  48                   pha
000EC6r 2  A5 CE                lda     TXTPTR
000EC8r 2  48                   pha
000EC9r 2  B1 A7                lda     (FNCNAM),y
000ECBr 2  85 CE                sta     TXTPTR
000ECDr 2  C8                   iny
000ECEr 2  B1 A7                lda     (FNCNAM),y
000ED0r 2  85 CF                sta     TXTPTR+1
000ED2r 2  A5 A1                lda     VARPNT+1
000ED4r 2  48                   pha
000ED5r 2  A5 A0                lda     VARPNT
000ED7r 2  48                   pha
000ED8r 2  20 rr rr             jsr     FRMNUM
000EDBr 2  68                   pla
000EDCr 2  85 A7                sta     FNCNAM
000EDEr 2  68                   pla
000EDFr 2  85 A8                sta     FNCNAM+1
000EE1r 2  20 CD 00             jsr     CHRGOT
000EE4r 2  F0 03                beq     L324A
000EE6r 2  4C rr rr             jmp     SYNERR
000EE9r 2               L324A:
000EE9r 2  68                   pla
000EEAr 2  85 CE                sta     TXTPTR
000EECr 2  68                   pla
000EEDr 2  85 CF                sta     TXTPTR+1
000EEFr 2               L3250:
000EEFr 2  A0 00                ldy     #$00
000EF1r 2  68                   pla
000EF2r 2  91 A7                sta     (FNCNAM),y
000EF4r 2  68                   pla
000EF5r 2  C8                   iny
000EF6r 2  91 A7                sta     (FNCNAM),y
000EF8r 2  68                   pla
000EF9r 2  C8                   iny
000EFAr 2  91 A7                sta     (FNCNAM),y
000EFCr 2  68                   pla
000EFDr 2  C8                   iny
000EFEr 2  91 A7                sta     (FNCNAM),y
000F00r 2               .ifndef CONFIG_SMALL
000F00r 2                       pla
000F00r 2                       iny
000F00r 2                       sta     (FNCNAM),y
000F00r 2               .endif
000F00r 2  60                   rts
000F01r 2               
000F01r 1               .include "string.s"
000F01r 2               .segment "CODE"
000F01r 2               ; ----------------------------------------------------------------------------
000F01r 2               ; "STR$" FUNCTION
000F01r 2               ; ----------------------------------------------------------------------------
000F01r 2               STR:
000F01r 2  20 rr rr             jsr     CHKNUM
000F04r 2  A0 00                ldy     #$00
000F06r 2  20 rr rr             jsr     FOUT1
000F09r 2  68                   pla
000F0Ar 2  68                   pla
000F0Br 2               LD353:
000F0Br 2  A9 FF                lda     #$FF
000F0Dr 2  A0 00                ldy     #$00
000F0Fr 2  F0 12                beq     STRLIT
000F11r 2               
000F11r 2               ; ----------------------------------------------------------------------------
000F11r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000F11r 2               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
000F11r 2               ; ----------------------------------------------------------------------------
000F11r 2               STRINI:
000F11r 2  A6 B9                ldx     FAC_LAST-1
000F13r 2  A4 BA                ldy     FAC_LAST
000F15r 2  86 A9                stx     DSCPTR
000F17r 2  84 AA                sty     DSCPTR+1
000F19r 2               
000F19r 2               ; ----------------------------------------------------------------------------
000F19r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000F19r 2               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
000F19r 2               ; ----------------------------------------------------------------------------
000F19r 2               STRSPA:
000F19r 2  20 rr rr             jsr     GETSPA
000F1Cr 2  86 B8                stx     FAC+1
000F1Er 2  84 B9                sty     FAC+2
000F20r 2  85 B7                sta     FAC
000F22r 2  60                   rts
000F23r 2               
000F23r 2               ; ----------------------------------------------------------------------------
000F23r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000F23r 2               ; AND TERMINATED BY $00 OR QUOTATION MARK
000F23r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000F23r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000F23r 2               ; ----------------------------------------------------------------------------
000F23r 2               STRLIT:
000F23r 2  A2 22                ldx     #$22
000F25r 2  86 60                stx     CHARAC
000F27r 2  86 61                stx     ENDCHR
000F29r 2               
000F29r 2               ; ----------------------------------------------------------------------------
000F29r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000F29r 2               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
000F29r 2               ;
000F29r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000F29r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000F29r 2               ; ----------------------------------------------------------------------------
000F29r 2               STRLT2:
000F29r 2  85 C3                sta     STRNG1
000F2Br 2  84 C4                sty     STRNG1+1
000F2Dr 2  85 B8                sta     FAC+1
000F2Fr 2  84 B9                sty     FAC+2
000F31r 2  A0 FF                ldy     #$FF
000F33r 2               L3298:
000F33r 2  C8                   iny
000F34r 2  B1 C3                lda     (STRNG1),y
000F36r 2  F0 0C                beq     L32A9
000F38r 2  C5 60                cmp     CHARAC
000F3Ar 2  F0 04                beq     L32A5
000F3Cr 2  C5 61                cmp     ENDCHR
000F3Er 2  D0 F3                bne     L3298
000F40r 2               L32A5:
000F40r 2  C9 22                cmp     #$22
000F42r 2  F0 01                beq     L32AA
000F44r 2               L32A9:
000F44r 2  18                   clc
000F45r 2               L32AA:
000F45r 2  84 B7                sty     FAC
000F47r 2  98                   tya
000F48r 2  65 C3                adc     STRNG1
000F4Ar 2  85 C5                sta     STRNG2
000F4Cr 2  A6 C4                ldx     STRNG1+1
000F4Er 2  90 01                bcc     L32B6
000F50r 2  E8                   inx
000F51r 2               L32B6:
000F51r 2  86 C6                stx     STRNG2+1
000F53r 2  A5 C4                lda     STRNG1+1
000F55r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000F55r 2                       beq     LD399
000F55r 2                       cmp     #>INPUTBUFFER
000F55r 2               .endif
000F55r 2  D0 0B                bne     PUTNEW
000F57r 2               LD399:
000F57r 2  98                   tya
000F58r 2  20 rr rr             jsr     STRINI
000F5Br 2  A6 C3                ldx     STRNG1
000F5Dr 2  A4 C4                ldy     STRNG1+1
000F5Fr 2  20 rr rr             jsr     MOVSTR
000F62r 2               
000F62r 2               ; ----------------------------------------------------------------------------
000F62r 2               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
000F62r 2               ;
000F62r 2               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
000F62r 2               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
000F62r 2               ; ----------------------------------------------------------------------------
000F62r 2               PUTNEW:
000F62r 2  A6 70                ldx     TEMPPT
000F64r 2  E0 7C                cpx     #TEMPST+9
000F66r 2  D0 05                bne     PUTEMP
000F68r 2  A2 1C                ldx     #ERR_FRMCPX
000F6Ar 2               JERR:
000F6Ar 2  4C rr rr             jmp     ERROR
000F6Dr 2               PUTEMP:
000F6Dr 2  A5 B7                lda     FAC
000F6Fr 2  95 00                sta     0,x
000F71r 2  A5 B8                lda     FAC+1
000F73r 2  95 01                sta     1,x
000F75r 2  A5 B9                lda     FAC+2
000F77r 2  95 02                sta     2,x
000F79r 2  A0 00                ldy     #$00
000F7Br 2  86 B9                stx     FAC_LAST-1
000F7Dr 2  84 BA                sty     FAC_LAST
000F7Fr 2               .ifdef CONFIG_2
000F7Fr 2                       sty     FACEXTENSION
000F7Fr 2               .endif
000F7Fr 2  88                   dey
000F80r 2  84 64                sty     VALTYP
000F82r 2  86 71                stx     LASTPT
000F84r 2  E8                   inx
000F85r 2  E8                   inx
000F86r 2  E8                   inx
000F87r 2  86 70                stx     TEMPPT
000F89r 2  60                   rts
000F8Ar 2               
000F8Ar 2               ; ----------------------------------------------------------------------------
000F8Ar 2               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
000F8Ar 2               ; (A)=# BYTES SPACE TO MAKE
000F8Ar 2               ;
000F8Ar 2               ; RETURN WITH (A) SAME,
000F8Ar 2               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
000F8Ar 2               ; ----------------------------------------------------------------------------
000F8Ar 2               GETSPA:
000F8Ar 2  46 65                lsr     DATAFLG
000F8Cr 2               L32F1:
000F8Cr 2  48                   pha
000F8Dr 2  49 FF                eor     #$FF
000F8Fr 2  38                   sec
000F90r 2  65 8C                adc     FRETOP
000F92r 2  A4 8D                ldy     FRETOP+1
000F94r 2  B0 01                bcs     L32FC
000F96r 2  88                   dey
000F97r 2               L32FC:
000F97r 2  C4 8B                cpy     STREND+1
000F99r 2  90 11                bcc     L3311
000F9Br 2  D0 04                bne     L3306
000F9Dr 2  C5 8A                cmp     STREND
000F9Fr 2  90 0B                bcc     L3311
000FA1r 2               L3306:
000FA1r 2  85 8C                sta     FRETOP
000FA3r 2  84 8D                sty     FRETOP+1
000FA5r 2  85 8E                sta     FRESPC
000FA7r 2  84 8F                sty     FRESPC+1
000FA9r 2  AA                   tax
000FAAr 2  68                   pla
000FABr 2  60                   rts
000FACr 2               L3311:
000FACr 2  A2 0C                ldx     #ERR_MEMFULL
000FAEr 2  A5 65                lda     DATAFLG
000FB0r 2  30 B8                bmi     JERR
000FB2r 2  20 rr rr             jsr     GARBAG
000FB5r 2  A9 80                lda     #$80
000FB7r 2  85 65                sta     DATAFLG
000FB9r 2  68                   pla
000FBAr 2  D0 D0                bne     L32F1
000FBCr 2               
000FBCr 2               ; ----------------------------------------------------------------------------
000FBCr 2               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
000FBCr 2               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
000FBCr 2               ; BELOW STRING AREA DOWN TO STREND.
000FBCr 2               ; ----------------------------------------------------------------------------
000FBCr 2               GARBAG:
000FBCr 2               
000FBCr 2               .ifdef CONST_MEMSIZ
000FBCr 2                       ldx     #<CONST_MEMSIZ
000FBCr 2                       lda     #>CONST_MEMSIZ
000FBCr 2               .else
000FBCr 2  A6 90                ldx     MEMSIZ
000FBEr 2  A5 91                lda     MEMSIZ+1
000FC0r 2               .endif
000FC0r 2               FINDHIGHESTSTRING:
000FC0r 2  86 8C                stx     FRETOP
000FC2r 2  85 8D                sta     FRETOP+1
000FC4r 2  A0 00                ldy     #$00
000FC6r 2  84 A8                sty     FNCNAM+1
000FC8r 2               .ifdef CONFIG_2
000FC8r 2                       sty     FNCNAM	; GC bugfix!
000FC8r 2               .endif
000FC8r 2  A5 8A                lda     STREND
000FCAr 2  A6 8B                ldx     STREND+1
000FCCr 2  85 B5                sta     LOWTR
000FCEr 2  86 B6                stx     LOWTR+1
000FD0r 2  A9 73                lda     #TEMPST
000FD2r 2  A2 00                ldx     #$00
000FD4r 2  85 7C                sta     INDEX
000FD6r 2  86 7D                stx     INDEX+1
000FD8r 2               L333D:
000FD8r 2  C5 70                cmp     TEMPPT
000FDAr 2  F0 05                beq     L3346
000FDCr 2  20 rr rr             jsr     CHECK_VARIABLE
000FDFr 2  F0 F7                beq     L333D
000FE1r 2               L3346:
000FE1r 2  A9 06                lda     #BYTES_PER_VARIABLE
000FE3r 2  85 AB                sta     DSCLEN
000FE5r 2  A5 86                lda     VARTAB
000FE7r 2  A6 87                ldx     VARTAB+1
000FE9r 2  85 7C                sta     INDEX
000FEBr 2  86 7D                stx     INDEX+1
000FEDr 2               L3352:
000FEDr 2  E4 89                cpx     ARYTAB+1
000FEFr 2  D0 04                bne     L335A
000FF1r 2  C5 88                cmp     ARYTAB
000FF3r 2  F0 05                beq     L335F
000FF5r 2               L335A:
000FF5r 2  20 rr rr             jsr     CHECK_SIMPLE_VARIABLE
000FF8r 2  F0 F3                beq     L3352
000FFAr 2               L335F:
000FFAr 2  85 AF                sta     HIGHDS
000FFCr 2  86 B0                stx     HIGHDS+1
000FFEr 2  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
001000r 2  85 AB                sta     DSCLEN
001002r 2               L3367:
001002r 2  A5 AF                lda     HIGHDS
001004r 2  A6 B0                ldx     HIGHDS+1
001006r 2               L336B:
001006r 2  E4 8B                cpx     STREND+1
001008r 2  D0 07                bne     L3376
00100Ar 2  C5 8A                cmp     STREND
00100Cr 2  D0 03                bne     L3376
00100Er 2  4C rr rr             jmp     MOVE_HIGHEST_STRING_TO_TOP
001011r 2               L3376:
001011r 2  85 7C                sta     INDEX
001013r 2  86 7D                stx     INDEX+1
001015r 2               .ifdef CONFIG_SMALL
001015r 2  A0 01                ldy     #$01
001017r 2               .else
001017r 2                       ldy     #$00
001017r 2                       lda     (INDEX),y
001017r 2                       tax
001017r 2                       iny
001017r 2               .endif
001017r 2  B1 7C                lda     (INDEX),y
001019r 2  08                   php
00101Ar 2  C8                   iny
00101Br 2  B1 7C                lda     (INDEX),y
00101Dr 2  65 AF                adc     HIGHDS
00101Fr 2  85 AF                sta     HIGHDS
001021r 2  C8                   iny
001022r 2  B1 7C                lda     (INDEX),y
001024r 2  65 B0                adc     HIGHDS+1
001026r 2  85 B0                sta     HIGHDS+1
001028r 2  28                   plp
001029r 2  10 D7                bpl     L3367
00102Br 2               .ifndef CONFIG_SMALL
00102Br 2                       txa
00102Br 2                       bmi     L3367
00102Br 2               .endif
00102Br 2  C8                   iny
00102Cr 2  B1 7C                lda     (INDEX),y
00102Er 2               .ifdef CONFIG_CBM1_PATCHES
00102Er 2                       jsr     LE7F3 ; XXX patch, call into screen editor
00102Er 2               .else
00102Er 2                 .ifdef CONFIG_11
00102Er 2                       ldy     #$00	; GC bugfix
00102Er 2                 .endif
00102Er 2  0A                   asl     a
00102Fr 2  69 05                adc     #$05
001031r 2               .endif
001031r 2  65 7C                adc     INDEX
001033r 2  85 7C                sta     INDEX
001035r 2  90 02                bcc     L33A7
001037r 2  E6 7D                inc     INDEX+1
001039r 2               L33A7:
001039r 2  A6 7D                ldx     INDEX+1
00103Br 2               L33A9:
00103Br 2  E4 B0                cpx     HIGHDS+1
00103Dr 2  D0 04                bne     L33B1
00103Fr 2  C5 AF                cmp     HIGHDS
001041r 2  F0 C3                beq     L336B
001043r 2               L33B1:
001043r 2  20 rr rr             jsr     CHECK_VARIABLE
001046r 2  F0 F3                beq     L33A9
001048r 2               
001048r 2               ; ----------------------------------------------------------------------------
001048r 2               ; PROCESS A SIMPLE VARIABLE
001048r 2               ; ----------------------------------------------------------------------------
001048r 2               CHECK_SIMPLE_VARIABLE:
001048r 2               .ifndef CONFIG_SMALL
001048r 2                       lda     (INDEX),y
001048r 2                       bmi     CHECK_BUMP
001048r 2               .endif
001048r 2  C8                   iny
001049r 2  B1 7C                lda     (INDEX),y
00104Br 2  10 30                bpl     CHECK_BUMP
00104Dr 2  C8                   iny
00104Er 2               
00104Er 2               ; ----------------------------------------------------------------------------
00104Er 2               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
00104Er 2               ; ----------------------------------------------------------------------------
00104Er 2               CHECK_VARIABLE:
00104Er 2  B1 7C                lda     (INDEX),y
001050r 2  F0 2B                beq     CHECK_BUMP
001052r 2  C8                   iny
001053r 2  B1 7C                lda     (INDEX),y
001055r 2  AA                   tax
001056r 2  C8                   iny
001057r 2  B1 7C                lda     (INDEX),y
001059r 2  C5 8D                cmp     FRETOP+1
00105Br 2  90 06                bcc     L33D5
00105Dr 2  D0 1E                bne     CHECK_BUMP
00105Fr 2  E4 8C                cpx     FRETOP
001061r 2  B0 1A                bcs     CHECK_BUMP
001063r 2               L33D5:
001063r 2  C5 B6                cmp     LOWTR+1
001065r 2  90 16                bcc     CHECK_BUMP
001067r 2  D0 04                bne     L33DF
001069r 2  E4 B5                cpx     LOWTR
00106Br 2  90 10                bcc     CHECK_BUMP
00106Dr 2               L33DF:
00106Dr 2  86 B5                stx     LOWTR
00106Fr 2  85 B6                sta     LOWTR+1
001071r 2  A5 7C                lda     INDEX
001073r 2  A6 7D                ldx     INDEX+1
001075r 2  85 A7                sta     FNCNAM
001077r 2  86 A8                stx     FNCNAM+1
001079r 2  A5 AB                lda     DSCLEN
00107Br 2  85 AD                sta     Z52
00107Dr 2               
00107Dr 2               ; ----------------------------------------------------------------------------
00107Dr 2               ; ADD (DSCLEN) TO PNTR IN INDEX
00107Dr 2               ; RETURN WITH Y=0, PNTR ALSO IN X,A
00107Dr 2               ; ----------------------------------------------------------------------------
00107Dr 2               CHECK_BUMP:
00107Dr 2  A5 AB                lda     DSCLEN
00107Fr 2  18                   clc
001080r 2  65 7C                adc     INDEX
001082r 2  85 7C                sta     INDEX
001084r 2  90 02                bcc     L33FA
001086r 2  E6 7D                inc     INDEX+1
001088r 2               L33FA:
001088r 2  A6 7D                ldx     INDEX+1
00108Ar 2  A0 00                ldy     #$00
00108Cr 2  60                   rts
00108Dr 2               
00108Dr 2               ; ----------------------------------------------------------------------------
00108Dr 2               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
00108Dr 2               ; TO TOP AND GO BACK FOR ANOTHER
00108Dr 2               ; ----------------------------------------------------------------------------
00108Dr 2               MOVE_HIGHEST_STRING_TO_TOP:
00108Dr 2               .ifdef CONFIG_2
00108Dr 2                       lda     FNCNAM+1	; GC bugfix
00108Dr 2                       ora     FNCNAM
00108Dr 2               .else
00108Dr 2  A6 A8                ldx     FNCNAM+1
00108Fr 2               .endif
00108Fr 2  F0 F7                beq     L33FA
001091r 2  A5 AD                lda     Z52
001093r 2               .ifndef CONFIG_10A
001093r 2                       sbc     #$03
001093r 2               .else
001093r 2  29 04                and     #$04
001095r 2               .endif
001095r 2  4A                   lsr     a
001096r 2  A8                   tay
001097r 2  85 AD                sta     Z52
001099r 2  B1 A7                lda     (FNCNAM),y
00109Br 2  65 B5                adc     LOWTR
00109Dr 2  85 B1                sta     HIGHTR
00109Fr 2  A5 B6                lda     LOWTR+1
0010A1r 2  69 00                adc     #$00
0010A3r 2  85 B2                sta     HIGHTR+1
0010A5r 2  A5 8C                lda     FRETOP
0010A7r 2  A6 8D                ldx     FRETOP+1
0010A9r 2  85 AF                sta     HIGHDS
0010ABr 2  86 B0                stx     HIGHDS+1
0010ADr 2  20 rr rr             jsr     BLTU2
0010B0r 2  A4 AD                ldy     Z52
0010B2r 2  C8                   iny
0010B3r 2  A5 AF                lda     HIGHDS
0010B5r 2  91 A7                sta     (FNCNAM),y
0010B7r 2  AA                   tax
0010B8r 2  E6 B0                inc     HIGHDS+1
0010BAr 2  A5 B0                lda     HIGHDS+1
0010BCr 2  C8                   iny
0010BDr 2  91 A7                sta     (FNCNAM),y
0010BFr 2  4C rr rr             jmp     FINDHIGHESTSTRING
0010C2r 2               
0010C2r 2               ; ----------------------------------------------------------------------------
0010C2r 2               ; CONCATENATE TWO STRINGS
0010C2r 2               ; ----------------------------------------------------------------------------
0010C2r 2               CAT:
0010C2r 2  A5 BA                lda     FAC_LAST
0010C4r 2  48                   pha
0010C5r 2  A5 B9                lda     FAC_LAST-1
0010C7r 2  48                   pha
0010C8r 2  20 rr rr             jsr     FRM_ELEMENT
0010CBr 2  20 rr rr             jsr     CHKSTR
0010CEr 2  68                   pla
0010CFr 2  85 C3                sta     STRNG1
0010D1r 2  68                   pla
0010D2r 2  85 C4                sta     STRNG1+1
0010D4r 2  A0 00                ldy     #$00
0010D6r 2  B1 C3                lda     (STRNG1),y
0010D8r 2  18                   clc
0010D9r 2  71 B9                adc     (FAC_LAST-1),y
0010DBr 2  90 05                bcc     L3454
0010DDr 2  A2 1A                ldx     #ERR_STRLONG
0010DFr 2  4C rr rr             jmp     ERROR
0010E2r 2               L3454:
0010E2r 2  20 rr rr             jsr     STRINI
0010E5r 2  20 rr rr             jsr     MOVINS
0010E8r 2  A5 A9                lda     DSCPTR
0010EAr 2  A4 AA                ldy     DSCPTR+1
0010ECr 2  20 rr rr             jsr     FRETMP
0010EFr 2  20 rr rr             jsr     MOVSTR1
0010F2r 2  A5 C3                lda     STRNG1
0010F4r 2  A4 C4                ldy     STRNG1+1
0010F6r 2  20 rr rr             jsr     FRETMP
0010F9r 2  20 rr rr             jsr     PUTNEW
0010FCr 2  4C rr rr             jmp     FRMEVL2
0010FFr 2               
0010FFr 2               ; ----------------------------------------------------------------------------
0010FFr 2               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
0010FFr 2               ; AND MOVE DESCRIBED STRING TO (FRESPC)
0010FFr 2               ; ----------------------------------------------------------------------------
0010FFr 2               MOVINS:
0010FFr 2  A0 00                ldy     #$00
001101r 2  B1 C3                lda     (STRNG1),y
001103r 2  48                   pha
001104r 2  C8                   iny
001105r 2  B1 C3                lda     (STRNG1),y
001107r 2  AA                   tax
001108r 2  C8                   iny
001109r 2  B1 C3                lda     (STRNG1),y
00110Br 2  A8                   tay
00110Cr 2  68                   pla
00110Dr 2               
00110Dr 2               ; ----------------------------------------------------------------------------
00110Dr 2               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
00110Dr 2               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
00110Dr 2               ; ----------------------------------------------------------------------------
00110Dr 2               MOVSTR:
00110Dr 2  86 7C                stx     INDEX
00110Fr 2  84 7D                sty     INDEX+1
001111r 2               MOVSTR1:
001111r 2  A8                   tay
001112r 2  F0 0A                beq     L3490
001114r 2  48                   pha
001115r 2               L3487:
001115r 2  88                   dey
001116r 2  B1 7C                lda     (INDEX),y
001118r 2  91 8E                sta     (FRESPC),y
00111Ar 2  98                   tya
00111Br 2  D0 F8                bne     L3487
00111Dr 2  68                   pla
00111Er 2               L3490:
00111Er 2  18                   clc
00111Fr 2  65 8E                adc     FRESPC
001121r 2  85 8E                sta     FRESPC
001123r 2  90 02                bcc     L3499
001125r 2  E6 8F                inc     FRESPC+1
001127r 2               L3499:
001127r 2  60                   rts
001128r 2               
001128r 2               ; ----------------------------------------------------------------------------
001128r 2               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
001128r 2               ; ----------------------------------------------------------------------------
001128r 2               FRESTR:
001128r 2  20 rr rr             jsr     CHKSTR
00112Br 2               
00112Br 2               ; ----------------------------------------------------------------------------
00112Br 2               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
00112Br 2               ; A TEMPORARY STRING, RELEASE IT.
00112Br 2               ; ----------------------------------------------------------------------------
00112Br 2               FREFAC:
00112Br 2  A5 B9                lda     FAC_LAST-1
00112Dr 2  A4 BA                ldy     FAC_LAST
00112Fr 2               
00112Fr 2               ; ----------------------------------------------------------------------------
00112Fr 2               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
00112Fr 2               ; A TEMPORARY STRING, RELEASE IT.
00112Fr 2               ; ----------------------------------------------------------------------------
00112Fr 2               FRETMP:
00112Fr 2  85 7C                sta     INDEX
001131r 2  84 7D                sty     INDEX+1
001133r 2  20 rr rr             jsr     FRETMS
001136r 2  08                   php
001137r 2  A0 00                ldy     #$00
001139r 2  B1 7C                lda     (INDEX),y
00113Br 2  48                   pha
00113Cr 2  C8                   iny
00113Dr 2  B1 7C                lda     (INDEX),y
00113Fr 2  AA                   tax
001140r 2  C8                   iny
001141r 2  B1 7C                lda     (INDEX),y
001143r 2  A8                   tay
001144r 2  68                   pla
001145r 2  28                   plp
001146r 2  D0 13                bne     L34CD
001148r 2  C4 8D                cpy     FRETOP+1
00114Ar 2  D0 0F                bne     L34CD
00114Cr 2  E4 8C                cpx     FRETOP
00114Er 2  D0 0B                bne     L34CD
001150r 2  48                   pha
001151r 2  18                   clc
001152r 2  65 8C                adc     FRETOP
001154r 2  85 8C                sta     FRETOP
001156r 2  90 02                bcc     L34CC
001158r 2  E6 8D                inc     FRETOP+1
00115Ar 2               L34CC:
00115Ar 2  68                   pla
00115Br 2               L34CD:
00115Br 2  86 7C                stx     INDEX
00115Dr 2  84 7D                sty     INDEX+1
00115Fr 2  60                   rts
001160r 2               
001160r 2               ; ----------------------------------------------------------------------------
001160r 2               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
001160r 2               ; ----------------------------------------------------------------------------
001160r 2               FRETMS:
001160r 2               .ifdef KBD
001160r 2                       cpy     #$00
001160r 2               .else
001160r 2  C4 72                cpy     LASTPT+1
001162r 2               .endif
001162r 2  D0 0C                bne     L34E2
001164r 2  C5 71                cmp     LASTPT
001166r 2  D0 08                bne     L34E2
001168r 2  85 70                sta     TEMPPT
00116Ar 2  E9 03                sbc     #$03
00116Cr 2  85 71                sta     LASTPT
00116Er 2  A0 00                ldy     #$00
001170r 2               L34E2:
001170r 2  60                   rts
001171r 2               
001171r 2               ; ----------------------------------------------------------------------------
001171r 2               ; "CHR$" FUNCTION
001171r 2               ; ----------------------------------------------------------------------------
001171r 2               CHRSTR:
001171r 2  20 rr rr             jsr     CONINT
001174r 2  8A                   txa
001175r 2  48                   pha
001176r 2  A9 01                lda     #$01
001178r 2  20 rr rr             jsr     STRSPA
00117Br 2  68                   pla
00117Cr 2  A0 00                ldy     #$00
00117Er 2  91 B8                sta     (FAC+1),y
001180r 2  68                   pla
001181r 2  68                   pla
001182r 2  4C rr rr             jmp     PUTNEW
001185r 2               
001185r 2               ; ----------------------------------------------------------------------------
001185r 2               ; "LEFT$" FUNCTION
001185r 2               ; ----------------------------------------------------------------------------
001185r 2               LEFTSTR:
001185r 2  20 rr rr             jsr     SUBSTRING_SETUP
001188r 2  D1 A9                cmp     (DSCPTR),y
00118Ar 2  98                   tya
00118Br 2               SUBSTRING1:
00118Br 2  90 04                bcc     L3503
00118Dr 2  B1 A9                lda     (DSCPTR),y
00118Fr 2  AA                   tax
001190r 2  98                   tya
001191r 2               L3503:
001191r 2  48                   pha
001192r 2               SUBSTRING2:
001192r 2  8A                   txa
001193r 2               SUBSTRING3:
001193r 2  48                   pha
001194r 2  20 rr rr             jsr     STRSPA
001197r 2  A5 A9                lda     DSCPTR
001199r 2  A4 AA                ldy     DSCPTR+1
00119Br 2  20 rr rr             jsr     FRETMP
00119Er 2  68                   pla
00119Fr 2  A8                   tay
0011A0r 2  68                   pla
0011A1r 2  18                   clc
0011A2r 2  65 7C                adc     INDEX
0011A4r 2  85 7C                sta     INDEX
0011A6r 2  90 02                bcc     L351C
0011A8r 2  E6 7D                inc     INDEX+1
0011AAr 2               L351C:
0011AAr 2  98                   tya
0011ABr 2  20 rr rr             jsr     MOVSTR1
0011AEr 2  4C rr rr             jmp     PUTNEW
0011B1r 2               
0011B1r 2               ; ----------------------------------------------------------------------------
0011B1r 2               ; "RIGHT$" FUNCTION
0011B1r 2               ; ----------------------------------------------------------------------------
0011B1r 2               RIGHTSTR:
0011B1r 2  20 rr rr             jsr     SUBSTRING_SETUP
0011B4r 2  18                   clc
0011B5r 2  F1 A9                sbc     (DSCPTR),y
0011B7r 2  49 FF                eor     #$FF
0011B9r 2  4C rr rr             jmp     SUBSTRING1
0011BCr 2               
0011BCr 2               ; ----------------------------------------------------------------------------
0011BCr 2               ; "MID$" FUNCTION
0011BCr 2               ; ----------------------------------------------------------------------------
0011BCr 2               MIDSTR:
0011BCr 2  A9 FF                lda     #$FF
0011BEr 2  85 BA                sta     FAC_LAST
0011C0r 2  20 CD 00             jsr     CHRGOT
0011C3r 2  C9 29                cmp     #$29
0011C5r 2  F0 06                beq     L353F
0011C7r 2  20 rr rr             jsr     CHKCOM
0011CAr 2  20 rr rr             jsr     GETBYT
0011CDr 2               L353F:
0011CDr 2  20 rr rr             jsr     SUBSTRING_SETUP
0011D0r 2               .ifdef CONFIG_2
0011D0r 2                       beq     GOIQ
0011D0r 2               .endif
0011D0r 2  CA                   dex
0011D1r 2  8A                   txa
0011D2r 2  48                   pha
0011D3r 2  18                   clc
0011D4r 2  A2 00                ldx     #$00
0011D6r 2  F1 A9                sbc     (DSCPTR),y
0011D8r 2  B0 B8                bcs     SUBSTRING2
0011DAr 2  49 FF                eor     #$FF
0011DCr 2  C5 BA                cmp     FAC_LAST
0011DEr 2  90 B3                bcc     SUBSTRING3
0011E0r 2  A5 BA                lda     FAC_LAST
0011E2r 2  B0 AF                bcs     SUBSTRING3
0011E4r 2               
0011E4r 2               ; ----------------------------------------------------------------------------
0011E4r 2               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
0011E4r 2               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
0011E4r 2               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
0011E4r 2               ; ----------------------------------------------------------------------------
0011E4r 2               SUBSTRING_SETUP:
0011E4r 2  20 rr rr             jsr     CHKCLS
0011E7r 2  68                   pla
0011E8r 2               .ifndef CONFIG_11
0011E8r 2  85 AD                sta     JMPADRS+1
0011EAr 2  68                   pla
0011EBr 2  85 AE                sta     JMPADRS+2
0011EDr 2               .else
0011EDr 2                       tay
0011EDr 2                       pla
0011EDr 2                       sta     Z52
0011EDr 2               .endif
0011EDr 2  68                   pla
0011EEr 2  68                   pla
0011EFr 2  68                   pla
0011F0r 2  AA                   tax
0011F1r 2  68                   pla
0011F2r 2  85 A9                sta     DSCPTR
0011F4r 2  68                   pla
0011F5r 2  85 AA                sta     DSCPTR+1
0011F7r 2               .ifdef CONFIG_11
0011F7r 2                       lda     Z52
0011F7r 2                       pha
0011F7r 2                       tya
0011F7r 2                       pha
0011F7r 2               .endif
0011F7r 2  A0 00                ldy     #$00
0011F9r 2  8A                   txa
0011FAr 2               .ifndef CONFIG_2
0011FAr 2  F0 21                beq     GOIQ
0011FCr 2               .endif
0011FCr 2               .ifndef CONFIG_11
0011FCr 2  E6 AD                inc     JMPADRS+1
0011FEr 2  6C AD 00             jmp     (JMPADRS+1)
001201r 2               .else
001201r 2                       rts
001201r 2               .endif
001201r 2               
001201r 2               ; ----------------------------------------------------------------------------
001201r 2               ; "LEN" FUNCTION
001201r 2               ; ----------------------------------------------------------------------------
001201r 2               LEN:
001201r 2  20 rr rr             jsr     GETSTR
001204r 2               SNGFLT1:
001204r 2  4C rr rr             jmp     SNGFLT
001207r 2               
001207r 2               ; ----------------------------------------------------------------------------
001207r 2               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
001207r 2               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
001207r 2               ; ----------------------------------------------------------------------------
001207r 2               GETSTR:
001207r 2  20 rr rr             jsr     FRESTR
00120Ar 2  A2 00                ldx     #$00
00120Cr 2  86 64                stx     VALTYP
00120Er 2  A8                   tay
00120Fr 2  60                   rts
001210r 2               
001210r 2               ; ----------------------------------------------------------------------------
001210r 2               ; "ASC" FUNCTION
001210r 2               ; ----------------------------------------------------------------------------
001210r 2               ASC:
001210r 2  20 rr rr             jsr     GETSTR
001213r 2  F0 08                beq     GOIQ
001215r 2  A0 00                ldy     #$00
001217r 2  B1 7C                lda     (INDEX),y
001219r 2  A8                   tay
00121Ar 2               .ifndef CONFIG_11A
00121Ar 2  4C rr rr             jmp     SNGFLT1
00121Dr 2               .else
00121Dr 2                       jmp     SNGFLT
00121Dr 2               .endif
00121Dr 2               ; ----------------------------------------------------------------------------
00121Dr 2               GOIQ:
00121Dr 2  4C rr rr             jmp     IQERR
001220r 2               
001220r 2               ; ----------------------------------------------------------------------------
001220r 2               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
001220r 2               ; TO SINGLE BYTE IN X-REG
001220r 2               ; ----------------------------------------------------------------------------
001220r 2               GTBYTC:
001220r 2  20 C7 00             jsr     CHRGET
001223r 2               
001223r 2               ; ----------------------------------------------------------------------------
001223r 2               ; EVALUATE EXPRESSION AT TXTPTR, AND
001223r 2               ; CONVERT IT TO SINGLE BYTE IN X-REG
001223r 2               ; ----------------------------------------------------------------------------
001223r 2               GETBYT:
001223r 2  20 rr rr             jsr     FRMNUM
001226r 2               
001226r 2               ; ----------------------------------------------------------------------------
001226r 2               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
001226r 2               ; ----------------------------------------------------------------------------
001226r 2               CONINT:
001226r 2  20 rr rr             jsr     MKINT
001229r 2  A6 B9                ldx     FAC_LAST-1
00122Br 2  D0 F0                bne     GOIQ
00122Dr 2  A6 BA                ldx     FAC_LAST
00122Fr 2  4C CD 00             jmp     CHRGOT
001232r 2               
001232r 2               ; ----------------------------------------------------------------------------
001232r 2               ; "VAL" FUNCTION
001232r 2               ; ----------------------------------------------------------------------------
001232r 2               VAL:
001232r 2  20 rr rr             jsr     GETSTR
001235r 2  D0 03                bne     L35AC
001237r 2  4C rr rr             jmp     ZERO_FAC
00123Ar 2               L35AC:
00123Ar 2  A6 CE                ldx     TXTPTR
00123Cr 2  A4 CF                ldy     TXTPTR+1
00123Er 2  86 C5                stx     STRNG2
001240r 2  84 C6                sty     STRNG2+1
001242r 2  A6 7C                ldx     INDEX
001244r 2  86 CE                stx     TXTPTR
001246r 2  18                   clc
001247r 2  65 7C                adc     INDEX
001249r 2  85 7E                sta     DEST
00124Br 2  A6 7D                ldx     INDEX+1
00124Dr 2  86 CF                stx     TXTPTR+1
00124Fr 2  90 01                bcc     L35C4
001251r 2  E8                   inx
001252r 2               L35C4:
001252r 2  86 7F                stx     DEST+1
001254r 2  A0 00                ldy     #$00
001256r 2  B1 7E                lda     (DEST),y
001258r 2  48                   pha
001259r 2  A9 00                lda     #$00
00125Br 2  91 7E                sta     (DEST),y
00125Dr 2  20 CD 00             jsr     CHRGOT
001260r 2  20 rr rr             jsr     FIN
001263r 2  68                   pla
001264r 2  A0 00                ldy     #$00
001266r 2  91 7E                sta     (DEST),y
001268r 2               
001268r 2               ; ----------------------------------------------------------------------------
001268r 2               ; COPY STRNG2 INTO TXTPTR
001268r 2               ; ----------------------------------------------------------------------------
001268r 2               POINT:
001268r 2  A6 C5                ldx     STRNG2
00126Ar 2  A4 C6                ldy     STRNG2+1
00126Cr 2  86 CE                stx     TXTPTR
00126Er 2  84 CF                sty     TXTPTR+1
001270r 2  60                   rts
001271r 2               
001271r 2               
001271r 1               .include "misc3.s"
001271r 2               ; KBD specific patches
001271r 2               
001271r 2               .segment "CODE"
001271r 2               
001271r 2               .ifdef KBD
001271r 2               VARTAB_MINUS_2_TO_AY:
001271r 2                       lda     VARTAB
001271r 2                       sec
001271r 2                       sbc     #$02
001271r 2                       ldy     VARTAB+1
001271r 2                       bcs     LF42C
001271r 2                       dey
001271r 2               LF42C:
001271r 2                       rts
001271r 2               
001271r 2               ; ----------------------------------------------------------------------------
001271r 2               GET_UPPER:
001271r 2                       lda     INPUTBUFFERX,x
001271r 2               LF430:
001271r 2                       cmp     #'a'
001271r 2                       bcc     LF43A
001271r 2                       cmp     #'z'+1
001271r 2                       bcs     LF43A
001271r 2               LF438:
001271r 2                       sbc     #$1F
001271r 2               LF43A:
001271r 2                       rts
001271r 2               
001271r 2               ; ----------------------------------------------------------------------------
001271r 2               GETLN:
001271r 2                       ldx     #$5D
001271r 2               LF43D:
001271r 2                       txa
001271r 2                       and     #$7F
001271r 2                       cmp     $0340
001271r 2                       beq     LF44D
001271r 2                       sta     $0340
001271r 2                       lda     #$03
001271r 2                       jsr     LDE48
001271r 2               LF44D:
001271r 2                       jsr     LDE7F
001271r 2                       bne     RTS4
001271r 2                       cpx     #$80
001271r 2                       bcc     LF44D
001271r 2               RTS4:
001271r 2                       rts
001271r 2               
001271r 2               ; ----------------------------------------------------------------------------
001271r 2               LF457:
001271r 2                       lda     TXTTAB
001271r 2                       ldx     TXTTAB+1
001271r 2               LF45B:
001271r 2                       sta     JMPADRS+1
001271r 2                       stx     JMPADRS+2
001271r 2                       ldy     #$01
001271r 2                       lda     (JMPADRS+1),y
001271r 2                       beq     LF438
001271r 2                       iny
001271r 2                       iny
001271r 2                       lda     (JMPADRS+1),y
001271r 2                       dey
001271r 2                       cmp     LINNUM+1
001271r 2                       bne     LF472
001271r 2                       lda     (JMPADRS+1),y
001271r 2                       cmp     LINNUM
001271r 2               LF472:
001271r 2                       bcs     LF43A
001271r 2                       dey
001271r 2                       lda     (JMPADRS+1),y
001271r 2                       tax
001271r 2                       dey
001271r 2                       lda     (JMPADRS+1),y
001271r 2                       bcc     LF45B
001271r 2               LF47D:
001271r 2                       jmp     (JMPADRS+1)
001271r 2               .endif
001271r 2               
001271r 1               .include "poke.s"
001271r 2               .segment "CODE"
001271r 2               
001271r 2               .ifndef CONFIG_NO_POKE
001271r 2               ; ----------------------------------------------------------------------------
001271r 2               ; EVALUATE "EXP1,EXP2"
001271r 2               ;
001271r 2               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
001271r 2               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
001271r 2               ; ----------------------------------------------------------------------------
001271r 2               GTNUM:
001271r 2  20 rr rr             jsr     FRMNUM
001274r 2  20 rr rr             jsr     GETADR
001277r 2               
001277r 2               ; ----------------------------------------------------------------------------
001277r 2               ; EVALUATE ",EXPRESSION"
001277r 2               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
001277r 2               ; ----------------------------------------------------------------------------
001277r 2               COMBYTE:
001277r 2  20 rr rr             jsr     CHKCOM
00127Ar 2  4C rr rr             jmp     GETBYT
00127Dr 2               
00127Dr 2               ; ----------------------------------------------------------------------------
00127Dr 2               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
00127Dr 2               ; ----------------------------------------------------------------------------
00127Dr 2               GETADR:
00127Dr 2  A5 BB                lda     FACSIGN
00127Fr 2                 .ifdef APPLE
00127Fr 2                       nop ; PATCH
00127Fr 2                       nop
00127Fr 2                 .else
00127Fr 2  30 9C                bmi     GOIQ
001281r 2                 .endif
001281r 2  A5 B7                lda     FAC
001283r 2  C9 91                cmp     #$91
001285r 2  B0 96                bcs     GOIQ
001287r 2  20 rr rr             jsr     QINT
00128Ar 2  A5 B9                lda     FAC_LAST-1
00128Cr 2  A4 BA                ldy     FAC_LAST
00128Er 2  84 11                sty     LINNUM
001290r 2  85 12                sta     LINNUM+1
001292r 2  60                   rts
001293r 2               
001293r 2               ; ----------------------------------------------------------------------------
001293r 2               ; "PEEK" FUNCTION
001293r 2               ; ----------------------------------------------------------------------------
001293r 2               PEEK:
001293r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
001293r 2                       lda     LINNUM+1
001293r 2                       pha
001293r 2                       lda     LINNUM
001293r 2                       pha
001293r 2               .endif
001293r 2  20 rr rr             jsr     GETADR
001296r 2  A0 00                ldy     #$00
001298r 2               .ifdef CBM1
001298r 2               ; disallow PEEK between $C000 and $DFFF
001298r 2                       cmp     #$C0
001298r 2                       bcc     LD6F3
001298r 2                       cmp     #$E1
001298r 2                       bcc     LD6F6
001298r 2               LD6F3:
001298r 2               .endif
001298r 2               .ifdef CBM2
001298r 2               		nop ; patch that disables the compares above
001298r 2               		nop
001298r 2               		nop
001298r 2               		nop
001298r 2               		nop
001298r 2               		nop
001298r 2               		nop
001298r 2               		nop
001298r 2               .endif
001298r 2  B1 11                lda     (LINNUM),y
00129Ar 2  A8                   tay
00129Br 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
00129Br 2                       pla
00129Br 2                       sta     LINNUM
00129Br 2                       pla
00129Br 2                       sta     LINNUM+1
00129Br 2               .endif
00129Br 2               LD6F6:
00129Br 2  4C rr rr             jmp     SNGFLT
00129Er 2               
00129Er 2               ; ----------------------------------------------------------------------------
00129Er 2               ; "POKE" STATEMENT
00129Er 2               ; ----------------------------------------------------------------------------
00129Er 2               POKE:
00129Er 2  20 rr rr             jsr     GTNUM
0012A1r 2  8A                   txa
0012A2r 2  A0 00                ldy     #$00
0012A4r 2  91 11                sta     (LINNUM),y
0012A6r 2  60                   rts
0012A7r 2               
0012A7r 2               ; ----------------------------------------------------------------------------
0012A7r 2               ; "WAIT" STATEMENT
0012A7r 2               ; ----------------------------------------------------------------------------
0012A7r 2               WAIT:
0012A7r 2  20 rr rr             jsr     GTNUM
0012AAr 2  86 A2                stx     FORPNT
0012ACr 2  A2 00                ldx     #$00
0012AEr 2  20 CD 00             jsr     CHRGOT
0012B1r 2               .ifdef CONFIG_EASTER_EGG
0012B1r 2                       beq     EASTER_EGG
0012B1r 2               .else
0012B1r 2  F0 03                beq     L3628
0012B3r 2               .endif
0012B3r 2  20 rr rr             jsr     COMBYTE
0012B6r 2               L3628:
0012B6r 2  86 A3                stx     FORPNT+1
0012B8r 2  A0 00                ldy     #$00
0012BAr 2               L362C:
0012BAr 2  B1 11                lda     (LINNUM),y
0012BCr 2  45 A3                eor     FORPNT+1
0012BEr 2  25 A2                and     FORPNT
0012C0r 2  F0 F8                beq     L362C
0012C2r 2               RTS3:
0012C2r 2  60                   rts
0012C3r 2               .endif
0012C3r 2               
0012C3r 1               .include "float.s"
0012C3r 2               .segment "CODE"
0012C3r 2               
0012C3r 2               TEMP1X = TEMP1+(5-BYTES_FP)
0012C3r 2               
0012C3r 2               ; ----------------------------------------------------------------------------
0012C3r 2               ; ADD 0.5 TO FAC
0012C3r 2               ; ----------------------------------------------------------------------------
0012C3r 2               FADDH:
0012C3r 2  A9 rr                lda     #<CON_HALF
0012C5r 2  A0 rr                ldy     #>CON_HALF
0012C7r 2  4C rr rr             jmp     FADD
0012CAr 2               
0012CAr 2               ; ----------------------------------------------------------------------------
0012CAr 2               ; FAC = (Y,A) - FAC
0012CAr 2               ; ----------------------------------------------------------------------------
0012CAr 2               FSUB:
0012CAr 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0012CDr 2               
0012CDr 2               ; ----------------------------------------------------------------------------
0012CDr 2               ; FAC = ARG - FAC
0012CDr 2               ; ----------------------------------------------------------------------------
0012CDr 2               FSUBT:
0012CDr 2  A5 BB                lda     FACSIGN
0012CFr 2  49 FF                eor     #$FF
0012D1r 2  85 BB                sta     FACSIGN
0012D3r 2  45 C2                eor     ARGSIGN
0012D5r 2  85 C3                sta     SGNCPR
0012D7r 2  A5 B7                lda     FAC
0012D9r 2  4C rr rr             jmp     FADDT
0012DCr 2               
0012DCr 2               ; ----------------------------------------------------------------------------
0012DCr 2               ; Commodore BASIC V2 Easter Egg
0012DCr 2               ; ----------------------------------------------------------------------------
0012DCr 2               .ifdef CONFIG_EASTER_EGG
0012DCr 2               EASTER_EGG:
0012DCr 2                       lda     LINNUM
0012DCr 2                       cmp     #<6502
0012DCr 2                       bne     L3628
0012DCr 2                       lda     LINNUM+1
0012DCr 2                       sbc     #>6502
0012DCr 2                       bne     L3628
0012DCr 2                       sta     LINNUM
0012DCr 2                       tay
0012DCr 2                       lda     #$80
0012DCr 2                       sta     LINNUM+1
0012DCr 2               LD758:
0012DCr 2                       ldx     #$0A
0012DCr 2               LD75A:
0012DCr 2                       lda     MICROSOFT-1,x
0012DCr 2                       and     #$3F
0012DCr 2                       sta     (LINNUM),y
0012DCr 2                       iny
0012DCr 2                       bne     LD766
0012DCr 2                       inc     LINNUM+1
0012DCr 2               LD766:
0012DCr 2                       dex
0012DCr 2                       bne     LD75A
0012DCr 2                       dec     FORPNT
0012DCr 2                       bne     LD758
0012DCr 2                       rts
0012DCr 2               .endif
0012DCr 2               
0012DCr 2               ; ----------------------------------------------------------------------------
0012DCr 2               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
0012DCr 2               ; ----------------------------------------------------------------------------
0012DCr 2               FADD1:
0012DCr 2  20 rr rr             jsr     SHIFT_RIGHT
0012DFr 2  90 3C                bcc     FADD3
0012E1r 2               
0012E1r 2               ; ----------------------------------------------------------------------------
0012E1r 2               ; FAC = (Y,A) + FAC
0012E1r 2               ; ----------------------------------------------------------------------------
0012E1r 2               FADD:
0012E1r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0012E4r 2               
0012E4r 2               ; ----------------------------------------------------------------------------
0012E4r 2               ; FAC = ARG + FAC
0012E4r 2               ; ----------------------------------------------------------------------------
0012E4r 2               FADDT:
0012E4r 2  D0 03                bne     L365B
0012E6r 2  4C rr rr             jmp     COPY_ARG_TO_FAC
0012E9r 2               L365B:
0012E9r 2  A6 C4                ldx     FACEXTENSION
0012EBr 2  86 AE                stx     ARGEXTENSION
0012EDr 2  A2 BE                ldx     #ARG
0012EFr 2  A5 BE                lda     ARG
0012F1r 2               FADD2:
0012F1r 2  A8                   tay
0012F2r 2               .ifdef KBD
0012F2r 2                       beq     RTS4
0012F2r 2               .else
0012F2r 2  F0 CE                beq     RTS3
0012F4r 2               .endif
0012F4r 2  38                   sec
0012F5r 2  E5 B7                sbc     FAC
0012F7r 2  F0 24                beq     FADD3
0012F9r 2  90 12                bcc     L367F
0012FBr 2  84 B7                sty     FAC
0012FDr 2  A4 C2                ldy     ARGSIGN
0012FFr 2  84 BB                sty     FACSIGN
001301r 2  49 FF                eor     #$FF
001303r 2  69 00                adc     #$00
001305r 2  A0 00                ldy     #$00
001307r 2  84 AE                sty     ARGEXTENSION
001309r 2  A2 B7                ldx     #FAC
00130Br 2  D0 04                bne     L3683
00130Dr 2               L367F:
00130Dr 2  A0 00                ldy     #$00
00130Fr 2  84 C4                sty     FACEXTENSION
001311r 2               L3683:
001311r 2  C9 F9                cmp     #$F9
001313r 2  30 C7                bmi     FADD1
001315r 2  A8                   tay
001316r 2  A5 C4                lda     FACEXTENSION
001318r 2  56 01                lsr     1,x
00131Ar 2  20 rr rr             jsr     SHIFT_RIGHT4
00131Dr 2               FADD3:
00131Dr 2  24 C3                bit     SGNCPR
00131Fr 2  10 4C                bpl     FADD4
001321r 2  A0 B7                ldy     #FAC
001323r 2  E0 BE                cpx     #ARG
001325r 2  F0 02                beq     L369B
001327r 2  A0 BE                ldy     #ARG
001329r 2               L369B:
001329r 2  38                   sec
00132Ar 2  49 FF                eor     #$FF
00132Cr 2  65 AE                adc     ARGEXTENSION
00132Er 2  85 C4                sta     FACEXTENSION
001330r 2               .ifndef CONFIG_SMALL
001330r 2                       lda     4,y
001330r 2                       sbc     4,x
001330r 2                       sta     FAC+4
001330r 2               .endif
001330r 2  B9 03 00             lda     3,y
001333r 2  F5 03                sbc     3,x
001335r 2  85 BA                sta     FAC+3
001337r 2  B9 02 00             lda     2,y
00133Ar 2  F5 02                sbc     2,x
00133Cr 2  85 B9                sta     FAC+2
00133Er 2  B9 01 00             lda     1,y
001341r 2  F5 01                sbc     1,x
001343r 2  85 B8                sta     FAC+1
001345r 2               
001345r 2               ; ----------------------------------------------------------------------------
001345r 2               ; NORMALIZE VALUE IN FAC
001345r 2               ; ----------------------------------------------------------------------------
001345r 2               NORMALIZE_FAC1:
001345r 2  B0 03                bcs     NORMALIZE_FAC2
001347r 2  20 rr rr             jsr     COMPLEMENT_FAC
00134Ar 2               NORMALIZE_FAC2:
00134Ar 2  A0 00                ldy     #$00
00134Cr 2  98                   tya
00134Dr 2  18                   clc
00134Er 2               L36C7:
00134Er 2  A6 B8                ldx     FAC+1
001350r 2  D0 3E                bne     NORMALIZE_FAC4
001352r 2  A6 B9                ldx     FAC+2
001354r 2  86 B8                stx     FAC+1
001356r 2  A6 BA                ldx     FAC+3
001358r 2  86 B9                stx     FAC+2
00135Ar 2               .ifdef CONFIG_SMALL
00135Ar 2  A6 C4                ldx     FACEXTENSION
00135Cr 2  86 BA                stx     FAC+3
00135Er 2               .else
00135Er 2                       ldx     FAC+4
00135Er 2                       stx     FAC+3
00135Er 2                       ldx     FACEXTENSION
00135Er 2                       stx     FAC+4
00135Er 2               .endif
00135Er 2  84 C4                sty     FACEXTENSION
001360r 2  69 08                adc     #$08
001362r 2               .ifdef CONFIG_2B
001362r 2               ; bugfix?
001362r 2               ; fix does not exist on AppleSoft 2
001362r 2                       cmp     #(MANTISSA_BYTES+1)*8
001362r 2               .else
001362r 2  C9 18                cmp     #MANTISSA_BYTES*8
001364r 2               .endif
001364r 2  D0 E8                bne     L36C7
001366r 2               
001366r 2               ; ----------------------------------------------------------------------------
001366r 2               ; SET FAC = 0
001366r 2               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
001366r 2               ; ----------------------------------------------------------------------------
001366r 2               ZERO_FAC:
001366r 2  A9 00                lda     #$00
001368r 2               STA_IN_FAC_SIGN_AND_EXP:
001368r 2  85 B7                sta     FAC
00136Ar 2               STA_IN_FAC_SIGN:
00136Ar 2  85 BB                sta     FACSIGN
00136Cr 2  60                   rts
00136Dr 2               
00136Dr 2               ; ----------------------------------------------------------------------------
00136Dr 2               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
00136Dr 2               ; ----------------------------------------------------------------------------
00136Dr 2               FADD4:
00136Dr 2  65 AE                adc     ARGEXTENSION
00136Fr 2  85 C4                sta     FACEXTENSION
001371r 2               .ifndef CONFIG_SMALL
001371r 2                       lda     FAC+4
001371r 2                       adc     ARG+4
001371r 2                       sta     FAC+4
001371r 2               .endif
001371r 2  A5 BA                lda     FAC+3
001373r 2  65 C1                adc     ARG+3
001375r 2  85 BA                sta     FAC+3
001377r 2  A5 B9                lda     FAC+2
001379r 2  65 C0                adc     ARG+2
00137Br 2  85 B9                sta     FAC+2
00137Dr 2  A5 B8                lda     FAC+1
00137Fr 2  65 BF                adc     ARG+1
001381r 2  85 B8                sta     FAC+1
001383r 2  4C rr rr             jmp     NORMALIZE_FAC5
001386r 2               
001386r 2               ; ----------------------------------------------------------------------------
001386r 2               ; FINISH NORMALIZING FAC
001386r 2               ; ----------------------------------------------------------------------------
001386r 2               NORMALIZE_FAC3:
001386r 2  69 01                adc     #$01
001388r 2  06 C4                asl     FACEXTENSION
00138Ar 2               .ifndef CONFIG_SMALL
00138Ar 2                       rol     FAC+4
00138Ar 2               .endif
00138Ar 2  26 BA                rol     FAC+3
00138Cr 2  26 B9                rol     FAC+2
00138Er 2  26 B8                rol     FAC+1
001390r 2               NORMALIZE_FAC4:
001390r 2  10 F4                bpl     NORMALIZE_FAC3
001392r 2  38                   sec
001393r 2  E5 B7                sbc     FAC
001395r 2  B0 CF                bcs     ZERO_FAC
001397r 2  49 FF                eor     #$FF
001399r 2  69 01                adc     #$01
00139Br 2  85 B7                sta     FAC
00139Dr 2               NORMALIZE_FAC5:
00139Dr 2  90 0C                bcc     L3764
00139Fr 2               NORMALIZE_FAC6:
00139Fr 2  E6 B7                inc     FAC
0013A1r 2  F0 36                beq     OVERFLOW
0013A3r 2               .ifndef CONFIG_ROR_WORKAROUND
0013A3r 2  66 B8                ror     FAC+1
0013A5r 2  66 B9                ror     FAC+2
0013A7r 2  66 BA                ror     FAC+3
0013A9r 2                 .ifndef CONFIG_SMALL
0013A9r 2                       ror     FAC+4
0013A9r 2                 .endif
0013A9r 2  66 C4                ror     FACEXTENSION
0013ABr 2               .else
0013ABr 2                       lda     #$00
0013ABr 2                       bcc     L372E
0013ABr 2                       lda     #$80
0013ABr 2               L372E:
0013ABr 2                       lsr     FAC+1
0013ABr 2                       ora     FAC+1
0013ABr 2                       sta     FAC+1
0013ABr 2                       lda     #$00
0013ABr 2                       bcc     L373A
0013ABr 2                       lda     #$80
0013ABr 2               L373A:
0013ABr 2                       lsr     FAC+2
0013ABr 2                       ora     FAC+2
0013ABr 2                       sta     FAC+2
0013ABr 2                       lda     #$00
0013ABr 2                       bcc     L3746
0013ABr 2                       lda     #$80
0013ABr 2               L3746:
0013ABr 2                       lsr     FAC+3
0013ABr 2                       ora     FAC+3
0013ABr 2                       sta     FAC+3
0013ABr 2                       lda     #$00
0013ABr 2                       bcc     L3752
0013ABr 2                       lda     #$80
0013ABr 2               L3752:
0013ABr 2                       lsr     FAC+4
0013ABr 2                       ora     FAC+4
0013ABr 2                       sta     FAC+4
0013ABr 2                       lda     #$00
0013ABr 2                       bcc     L375E
0013ABr 2                       lda     #$80
0013ABr 2               L375E:
0013ABr 2                       lsr     FACEXTENSION
0013ABr 2                       ora     FACEXTENSION
0013ABr 2                       sta     FACEXTENSION
0013ABr 2               .endif
0013ABr 2               L3764:
0013ABr 2  60                   rts
0013ACr 2               
0013ACr 2               ; ----------------------------------------------------------------------------
0013ACr 2               ; 2'S COMPLEMENT OF FAC
0013ACr 2               ; ----------------------------------------------------------------------------
0013ACr 2               COMPLEMENT_FAC:
0013ACr 2  A5 BB                lda     FACSIGN
0013AEr 2  49 FF                eor     #$FF
0013B0r 2  85 BB                sta     FACSIGN
0013B2r 2               
0013B2r 2               ; ----------------------------------------------------------------------------
0013B2r 2               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
0013B2r 2               ; ----------------------------------------------------------------------------
0013B2r 2               COMPLEMENT_FAC_MANTISSA:
0013B2r 2  A5 B8                lda     FAC+1
0013B4r 2  49 FF                eor     #$FF
0013B6r 2  85 B8                sta     FAC+1
0013B8r 2  A5 B9                lda     FAC+2
0013BAr 2  49 FF                eor     #$FF
0013BCr 2  85 B9                sta     FAC+2
0013BEr 2  A5 BA                lda     FAC+3
0013C0r 2  49 FF                eor     #$FF
0013C2r 2  85 BA                sta     FAC+3
0013C4r 2               .ifndef CONFIG_SMALL
0013C4r 2                       lda     FAC+4
0013C4r 2                       eor     #$FF
0013C4r 2                       sta     FAC+4
0013C4r 2               .endif
0013C4r 2  A5 C4                lda     FACEXTENSION
0013C6r 2  49 FF                eor     #$FF
0013C8r 2  85 C4                sta     FACEXTENSION
0013CAr 2  E6 C4                inc     FACEXTENSION
0013CCr 2  D0 0A                bne     RTS12
0013CEr 2               
0013CEr 2               ; ----------------------------------------------------------------------------
0013CEr 2               ; INCREMENT FAC MANTISSA
0013CEr 2               ; ----------------------------------------------------------------------------
0013CEr 2               INCREMENT_FAC_MANTISSA:
0013CEr 2               .ifndef CONFIG_SMALL
0013CEr 2                       inc     FAC+4
0013CEr 2                       bne     RTS12
0013CEr 2               .endif
0013CEr 2  E6 BA                inc     FAC+3
0013D0r 2  D0 06                bne     RTS12
0013D2r 2  E6 B9                inc     FAC+2
0013D4r 2  D0 02                bne     RTS12
0013D6r 2  E6 B8                inc     FAC+1
0013D8r 2               RTS12:
0013D8r 2  60                   rts
0013D9r 2               OVERFLOW:
0013D9r 2  A2 0A                ldx     #ERR_OVERFLOW
0013DBr 2  4C rr rr             jmp     ERROR
0013DEr 2               
0013DEr 2               ; ----------------------------------------------------------------------------
0013DEr 2               ; SHIFT 1,X THRU 5,X RIGHT
0013DEr 2               ; (A) = NEGATIVE OF SHIFT COUNT
0013DEr 2               ; (X) = POINTER TO BYTES TO BE SHIFTED
0013DEr 2               ;
0013DEr 2               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
0013DEr 2               ; ----------------------------------------------------------------------------
0013DEr 2               SHIFT_RIGHT1:
0013DEr 2  A2 7F                ldx     #RESULT-1
0013E0r 2               SHIFT_RIGHT2:
0013E0r 2               .ifdef CONFIG_SMALL
0013E0r 2  B4 03                ldy     3,x
0013E2r 2               .else
0013E2r 2                       ldy     4,x
0013E2r 2               .endif
0013E2r 2  84 C4                sty     FACEXTENSION
0013E4r 2               .ifndef CONFIG_SMALL
0013E4r 2                       ldy     3,x
0013E4r 2                       sty     4,x
0013E4r 2               .endif
0013E4r 2  B4 02                ldy     2,x
0013E6r 2  94 03                sty     3,x
0013E8r 2  B4 01                ldy     1,x
0013EAr 2  94 02                sty     2,x
0013ECr 2  A4 BD                ldy     SHIFTSIGNEXT
0013EEr 2  94 01                sty     1,x
0013F0r 2               
0013F0r 2               ; ----------------------------------------------------------------------------
0013F0r 2               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
0013F0r 2               ; ----------------------------------------------------------------------------
0013F0r 2               SHIFT_RIGHT:
0013F0r 2  69 08                adc     #$08
0013F2r 2  30 EC                bmi     SHIFT_RIGHT2
0013F4r 2  F0 EA                beq     SHIFT_RIGHT2
0013F6r 2  E9 08                sbc     #$08
0013F8r 2  A8                   tay
0013F9r 2  A5 C4                lda     FACEXTENSION
0013FBr 2  B0 12                bcs     SHIFT_RIGHT5
0013FDr 2               .ifndef CONFIG_ROR_WORKAROUND
0013FDr 2               LB588:
0013FDr 2  16 01                asl     1,x
0013FFr 2  90 02                bcc     LB58E
001401r 2  F6 01                inc     1,x
001403r 2               LB58E:
001403r 2  76 01                ror     1,x
001405r 2  76 01                ror     1,x
001407r 2               
001407r 2               ; ----------------------------------------------------------------------------
001407r 2               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
001407r 2               ; ----------------------------------------------------------------------------
001407r 2               SHIFT_RIGHT4:
001407r 2  76 02                ror     2,x
001409r 2  76 03                ror     3,x
00140Br 2                 .ifndef CONFIG_SMALL
00140Br 2                       ror     4,x
00140Br 2                 .endif
00140Br 2  6A                   ror     a
00140Cr 2  C8                   iny
00140Dr 2  D0 EE                bne     LB588
00140Fr 2               .else
00140Fr 2               L37C4:
00140Fr 2                       pha
00140Fr 2                       lda     1,x
00140Fr 2                       and     #$80
00140Fr 2                       lsr     1,x
00140Fr 2                       ora     1,x
00140Fr 2                       sta     1,x
00140Fr 2                       .byte   $24
00140Fr 2               SHIFT_RIGHT4:
00140Fr 2                       pha
00140Fr 2                       lda     #$00
00140Fr 2                       bcc     L37D7
00140Fr 2                       lda     #$80
00140Fr 2               L37D7:
00140Fr 2                       lsr     2,x
00140Fr 2                       ora     2,x
00140Fr 2                       sta     2,x
00140Fr 2                       lda     #$00
00140Fr 2                       bcc     L37E3
00140Fr 2                       lda     #$80
00140Fr 2               L37E3:
00140Fr 2                       lsr     3,x
00140Fr 2                       ora     3,x
00140Fr 2                       sta     3,x
00140Fr 2                       lda     #$00
00140Fr 2                       bcc     L37EF
00140Fr 2                       lda     #$80
00140Fr 2               L37EF:
00140Fr 2                       lsr     4,x
00140Fr 2                       ora     4,x
00140Fr 2                       sta     4,x
00140Fr 2                       pla
00140Fr 2                       php
00140Fr 2                       lsr     a
00140Fr 2                       plp
00140Fr 2                       bcc     L37FD
00140Fr 2                       ora     #$80
00140Fr 2               L37FD:
00140Fr 2                       iny
00140Fr 2                       bne     L37C4
00140Fr 2               .endif
00140Fr 2               SHIFT_RIGHT5:
00140Fr 2  18                   clc
001410r 2  60                   rts
001411r 2               
001411r 2               ; ----------------------------------------------------------------------------
001411r 2               .ifdef CONFIG_SMALL
001411r 2               CON_ONE:
001411r 2  81 00 00 00          .byte   $81,$00,$00,$00
001415r 2               POLY_LOG:
001415r 2  02           		.byte	$02
001416r 2  80 19 56 62  		.byte   $80,$19,$56,$62
00141Ar 2  80 76 22 F3  		.byte   $80,$76,$22,$F3
00141Er 2  82 38 AA 40  		.byte   $82,$38,$AA,$40
001422r 2               CON_SQR_HALF:
001422r 2  80 35 04 F3  		.byte   $80,$35,$04,$F3
001426r 2               CON_SQR_TWO:
001426r 2  81 35 04 F3  		.byte   $81,$35,$04,$F3
00142Ar 2               CON_NEG_HALF:
00142Ar 2  80 80 00 00  		.byte   $80,$80,$00,$00
00142Er 2               CON_LOG_TWO:
00142Er 2  80 31 72 18  		.byte   $80,$31,$72,$18
001432r 2               .else
001432r 2               CON_ONE:
001432r 2                       .byte   $81,$00,$00,$00,$00
001432r 2               POLY_LOG:
001432r 2                       .byte   $03
001432r 2               		.byte   $7F,$5E,$56,$CB,$79
001432r 2               		.byte   $80,$13,$9B,$0B,$64
001432r 2               		.byte   $80,$76,$38,$93,$16
001432r 2                       .byte   $82,$38,$AA,$3B,$20
001432r 2               CON_SQR_HALF:
001432r 2                       .byte   $80,$35,$04,$F3,$34
001432r 2               CON_SQR_TWO:
001432r 2                       .byte   $81,$35,$04,$F3,$34
001432r 2               CON_NEG_HALF:
001432r 2                       .byte   $80,$80,$00,$00,$00
001432r 2               CON_LOG_TWO:
001432r 2                       .byte   $80,$31,$72,$17,$F8
001432r 2               .endif
001432r 2               
001432r 2               ; ----------------------------------------------------------------------------
001432r 2               ; "LOG" FUNCTION
001432r 2               ; ----------------------------------------------------------------------------
001432r 2               LOG:
001432r 2  20 rr rr             jsr     SIGN
001435r 2  F0 02                beq     GIQ
001437r 2  10 03                bpl     LOG2
001439r 2               GIQ:
001439r 2  4C rr rr             jmp     IQERR
00143Cr 2               LOG2:
00143Cr 2  A5 B7                lda     FAC
00143Er 2  E9 7F                sbc     #$7F
001440r 2  48                   pha
001441r 2  A9 80                lda     #$80
001443r 2  85 B7                sta     FAC
001445r 2  A9 rr                lda     #<CON_SQR_HALF
001447r 2  A0 rr                ldy     #>CON_SQR_HALF
001449r 2  20 rr rr             jsr     FADD
00144Cr 2  A9 rr                lda     #<CON_SQR_TWO
00144Er 2  A0 rr                ldy     #>CON_SQR_TWO
001450r 2  20 rr rr             jsr     FDIV
001453r 2  A9 rr                lda     #<CON_ONE
001455r 2  A0 rr                ldy     #>CON_ONE
001457r 2  20 rr rr             jsr     FSUB
00145Ar 2  A9 rr                lda     #<POLY_LOG
00145Cr 2  A0 rr                ldy     #>POLY_LOG
00145Er 2  20 rr rr             jsr     POLYNOMIAL_ODD
001461r 2  A9 rr                lda     #<CON_NEG_HALF
001463r 2  A0 rr                ldy     #>CON_NEG_HALF
001465r 2  20 rr rr             jsr     FADD
001468r 2  68                   pla
001469r 2  20 rr rr             jsr     ADDACC
00146Cr 2  A9 rr                lda     #<CON_LOG_TWO
00146Er 2  A0 rr                ldy     #>CON_LOG_TWO
001470r 2               
001470r 2               ; ----------------------------------------------------------------------------
001470r 2               ; FAC = (Y,A) * FAC
001470r 2               ; ----------------------------------------------------------------------------
001470r 2               FMULT:
001470r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001473r 2               
001473r 2               ; ----------------------------------------------------------------------------
001473r 2               ; FAC = ARG * FAC
001473r 2               ; ----------------------------------------------------------------------------
001473r 2               FMULTT:
001473r 2               .ifndef CONFIG_11
001473r 2  F0 4C                beq     L3903
001475r 2               .else
001475r 2                       jeq     L3903
001475r 2               .endif
001475r 2  20 rr rr             jsr     ADD_EXPONENTS
001478r 2  A9 00                lda     #$00
00147Ar 2  85 80                sta     RESULT
00147Cr 2  85 81                sta     RESULT+1
00147Er 2  85 82                sta     RESULT+2
001480r 2               .ifndef CONFIG_SMALL
001480r 2                       sta     RESULT+3
001480r 2               .endif
001480r 2  A5 C4                lda     FACEXTENSION
001482r 2  20 rr rr             jsr     MULTIPLY1
001485r 2               .ifndef CONFIG_SMALL
001485r 2                       lda     FAC+4
001485r 2                       jsr     MULTIPLY1
001485r 2               .endif
001485r 2  A5 BA                lda     FAC+3
001487r 2  20 rr rr             jsr     MULTIPLY1
00148Ar 2  A5 B9                lda     FAC+2
00148Cr 2  20 rr rr             jsr     MULTIPLY1
00148Fr 2  A5 B8                lda     FAC+1
001491r 2  20 rr rr             jsr     MULTIPLY2
001494r 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
001497r 2               
001497r 2               ; ----------------------------------------------------------------------------
001497r 2               ; MULTIPLY ARG BY (A) INTO RESULT
001497r 2               ; ----------------------------------------------------------------------------
001497r 2               MULTIPLY1:
001497r 2  D0 03                bne     MULTIPLY2
001499r 2  4C rr rr             jmp     SHIFT_RIGHT1
00149Cr 2               MULTIPLY2:
00149Cr 2  4A                   lsr     a
00149Dr 2  09 80                ora     #$80
00149Fr 2               L38A7:
00149Fr 2  A8                   tay
0014A0r 2  90 13                bcc     L38C3
0014A2r 2  18                   clc
0014A3r 2               .ifndef CONFIG_SMALL
0014A3r 2                       lda     RESULT+3
0014A3r 2                       adc     ARG+4
0014A3r 2                       sta     RESULT+3
0014A3r 2               .endif
0014A3r 2  A5 82                lda     RESULT+2
0014A5r 2  65 C1                adc     ARG+3
0014A7r 2  85 82                sta     RESULT+2
0014A9r 2  A5 81                lda     RESULT+1
0014ABr 2  65 C0                adc     ARG+2
0014ADr 2  85 81                sta     RESULT+1
0014AFr 2  A5 80                lda     RESULT
0014B1r 2  65 BF                adc     ARG+1
0014B3r 2  85 80                sta     RESULT
0014B5r 2               L38C3:
0014B5r 2               .ifndef CONFIG_ROR_WORKAROUND
0014B5r 2  66 80                ror     RESULT
0014B7r 2  66 81                ror     RESULT+1
0014B9r 2               .ifdef APPLE_BAD_BYTE
0014B9r 2               ; this seems to be a bad byte in the dump
0014B9r 2               		.byte	RESULT+2,RESULT+2 ; XXX BUG!
0014B9r 2               .else
0014B9r 2  66 82                ror     RESULT+2
0014BBr 2               .endif
0014BBr 2               .ifndef CONFIG_SMALL
0014BBr 2                       ror     RESULT+3
0014BBr 2               .endif
0014BBr 2  66 C4                ror     FACEXTENSION
0014BDr 2               .else
0014BDr 2                       lda     #$00
0014BDr 2                       bcc     L38C9
0014BDr 2                       lda     #$80
0014BDr 2               L38C9:
0014BDr 2                       lsr     RESULT
0014BDr 2                       ora     RESULT
0014BDr 2                       sta     RESULT
0014BDr 2                       lda     #$00
0014BDr 2                       bcc     L38D5
0014BDr 2                       lda     #$80
0014BDr 2               L38D5:
0014BDr 2                       lsr     RESULT+1
0014BDr 2                       ora     RESULT+1
0014BDr 2                       sta     RESULT+1
0014BDr 2                       lda     #$00
0014BDr 2                       bcc     L38E1
0014BDr 2                       lda     #$80
0014BDr 2               L38E1:
0014BDr 2                       lsr     RESULT+2
0014BDr 2                       ora     RESULT+2
0014BDr 2                       sta     RESULT+2
0014BDr 2                       lda     #$00
0014BDr 2                       bcc     L38ED
0014BDr 2                       lda     #$80
0014BDr 2               L38ED:
0014BDr 2                       lsr     RESULT+3
0014BDr 2                       ora     RESULT+3
0014BDr 2                       sta     RESULT+3
0014BDr 2                       lda     #$00
0014BDr 2                       bcc     L38F9
0014BDr 2                       lda     #$80
0014BDr 2               L38F9:
0014BDr 2                       lsr     FACEXTENSION
0014BDr 2                       ora     FACEXTENSION
0014BDr 2                       sta     FACEXTENSION
0014BDr 2               .endif
0014BDr 2  98                   tya
0014BEr 2  4A                   lsr     a
0014BFr 2  D0 DE                bne     L38A7
0014C1r 2               L3903:
0014C1r 2  60                   rts
0014C2r 2               
0014C2r 2               ; ----------------------------------------------------------------------------
0014C2r 2               ; UNPACK NUMBER AT (Y,A) INTO ARG
0014C2r 2               ; ----------------------------------------------------------------------------
0014C2r 2               LOAD_ARG_FROM_YA:
0014C2r 2  85 7C                sta     INDEX
0014C4r 2  84 7D                sty     INDEX+1
0014C6r 2  A0 03                ldy     #BYTES_FP-1
0014C8r 2               .ifndef CONFIG_SMALL
0014C8r 2                       lda     (INDEX),y
0014C8r 2                       sta     ARG+4
0014C8r 2                       dey
0014C8r 2               .endif
0014C8r 2  B1 7C                lda     (INDEX),y
0014CAr 2  85 C1                sta     ARG+3
0014CCr 2  88                   dey
0014CDr 2  B1 7C                lda     (INDEX),y
0014CFr 2  85 C0                sta     ARG+2
0014D1r 2  88                   dey
0014D2r 2  B1 7C                lda     (INDEX),y
0014D4r 2  85 C2                sta     ARGSIGN
0014D6r 2  45 BB                eor     FACSIGN
0014D8r 2  85 C3                sta     SGNCPR
0014DAr 2  A5 C2                lda     ARGSIGN
0014DCr 2  09 80                ora     #$80
0014DEr 2  85 BF                sta     ARG+1
0014E0r 2  88                   dey
0014E1r 2  B1 7C                lda     (INDEX),y
0014E3r 2  85 BE                sta     ARG
0014E5r 2  A5 B7                lda     FAC
0014E7r 2  60                   rts
0014E8r 2               
0014E8r 2               ; ----------------------------------------------------------------------------
0014E8r 2               ; ADD EXPONENTS OF ARG AND FAC
0014E8r 2               ; (CALLED BY FMULT AND FDIV)
0014E8r 2               ;
0014E8r 2               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
0014E8r 2               ; ----------------------------------------------------------------------------
0014E8r 2               ADD_EXPONENTS:
0014E8r 2  A5 BE                lda     ARG
0014EAr 2               ADD_EXPONENTS1:
0014EAr 2  F0 1F                beq     ZERO
0014ECr 2  18                   clc
0014EDr 2  65 B7                adc     FAC
0014EFr 2  90 04                bcc     L393C
0014F1r 2  30 1D                bmi     JOV
0014F3r 2  18                   clc
0014F4r 2  2C                   .byte   $2C
0014F5r 2               L393C:
0014F5r 2  10 14                bpl     ZERO
0014F7r 2  69 80                adc     #$80
0014F9r 2  85 B7                sta     FAC
0014FBr 2  D0 03                bne     L3947
0014FDr 2  4C rr rr             jmp     STA_IN_FAC_SIGN
001500r 2               L3947:
001500r 2  A5 C3                lda     SGNCPR
001502r 2  85 BB                sta     FACSIGN
001504r 2  60                   rts
001505r 2               
001505r 2               ; ----------------------------------------------------------------------------
001505r 2               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
001505r 2               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
001505r 2               ; CALLED FROM "EXP" FUNCTION
001505r 2               ; ----------------------------------------------------------------------------
001505r 2               OUTOFRNG:
001505r 2  A5 BB                lda     FACSIGN
001507r 2  49 FF                eor     #$FF
001509r 2  30 05                bmi     JOV
00150Br 2               
00150Br 2               ; ----------------------------------------------------------------------------
00150Br 2               ; POP RETURN ADDRESS AND SET FAC=0
00150Br 2               ; ----------------------------------------------------------------------------
00150Br 2               ZERO:
00150Br 2  68                   pla
00150Cr 2  68                   pla
00150Dr 2  4C rr rr             jmp     ZERO_FAC
001510r 2               JOV:
001510r 2  4C rr rr             jmp     OVERFLOW
001513r 2               
001513r 2               ; ----------------------------------------------------------------------------
001513r 2               ; MULTIPLY FAC BY 10
001513r 2               ; ----------------------------------------------------------------------------
001513r 2               MUL10:
001513r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001516r 2  AA                   tax
001517r 2  F0 10                beq     L3970
001519r 2  18                   clc
00151Ar 2  69 02                adc     #$02
00151Cr 2  B0 F2                bcs     JOV
00151Er 2               LD9BF:
00151Er 2  A2 00                ldx     #$00
001520r 2  86 C3                stx     SGNCPR
001522r 2  20 rr rr             jsr     FADD2
001525r 2  E6 B7                inc     FAC
001527r 2  F0 E7                beq     JOV
001529r 2               L3970:
001529r 2  60                   rts
00152Ar 2               
00152Ar 2               ; ----------------------------------------------------------------------------
00152Ar 2               CONTEN:
00152Ar 2               .ifdef CONFIG_SMALL
00152Ar 2  84 20 00 00          .byte   $84,$20,$00,$00
00152Er 2               .else
00152Er 2                       .byte   $84,$20,$00,$00,$00
00152Er 2               .endif
00152Er 2               
00152Er 2               ; ----------------------------------------------------------------------------
00152Er 2               ; DIVIDE FAC BY 10
00152Er 2               ; ----------------------------------------------------------------------------
00152Er 2               DIV10:
00152Er 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001531r 2  A9 rr                lda     #<CONTEN
001533r 2  A0 rr                ldy     #>CONTEN
001535r 2  A2 00                ldx     #$00
001537r 2               
001537r 2               ; ----------------------------------------------------------------------------
001537r 2               ; FAC = ARG / (Y,A)
001537r 2               ; ----------------------------------------------------------------------------
001537r 2               DIV:
001537r 2  86 C3                stx     SGNCPR
001539r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
00153Cr 2  4C rr rr             jmp     FDIVT
00153Fr 2               
00153Fr 2               ; ----------------------------------------------------------------------------
00153Fr 2               ; FAC = (Y,A) / FAC
00153Fr 2               ; ----------------------------------------------------------------------------
00153Fr 2               FDIV:
00153Fr 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001542r 2               
001542r 2               ; ----------------------------------------------------------------------------
001542r 2               ; FAC = ARG / FAC
001542r 2               ; ----------------------------------------------------------------------------
001542r 2               FDIVT:
001542r 2  F0 68                beq     L3A02
001544r 2  20 rr rr             jsr     ROUND_FAC
001547r 2  A9 00                lda     #$00
001549r 2  38                   sec
00154Ar 2  E5 B7                sbc     FAC
00154Cr 2  85 B7                sta     FAC
00154Er 2  20 rr rr             jsr     ADD_EXPONENTS
001551r 2  E6 B7                inc     FAC
001553r 2  F0 BB                beq     JOV
001555r 2  A2 FD                ldx     #<-MANTISSA_BYTES
001557r 2  A9 01                lda     #$01
001559r 2               L39A1:
001559r 2  A4 BF                ldy     ARG+1
00155Br 2  C4 B8                cpy     FAC+1
00155Dr 2  D0 0A                bne     L39B7
00155Fr 2  A4 C0                ldy     ARG+2
001561r 2  C4 B9                cpy     FAC+2
001563r 2  D0 04                bne     L39B7
001565r 2  A4 C1                ldy     ARG+3
001567r 2  C4 BA                cpy     FAC+3
001569r 2               .ifndef CONFIG_SMALL
001569r 2                       bne     L39B7
001569r 2                       ldy     ARG+4
001569r 2                       cpy     FAC+4
001569r 2               .endif
001569r 2               L39B7:
001569r 2  08                   php
00156Ar 2  2A                   rol     a
00156Br 2  90 09                bcc     L39C4
00156Dr 2  E8                   inx
00156Er 2  95 82                sta     RESULT_LAST-1,x
001570r 2  F0 2A                beq     L39F2
001572r 2  10 2C                bpl     L39F6
001574r 2  A9 01                lda     #$01
001576r 2               L39C4:
001576r 2  28                   plp
001577r 2  B0 0C                bcs     L39D5
001579r 2               L39C7:
001579r 2  06 C1                asl     ARG_LAST
00157Br 2               .ifndef CONFIG_SMALL
00157Br 2                       rol     ARG+3
00157Br 2               .endif
00157Br 2  26 C0                rol     ARG+2
00157Dr 2  26 BF                rol     ARG+1
00157Fr 2  B0 E8                bcs     L39B7
001581r 2  30 D6                bmi     L39A1
001583r 2  10 E4                bpl     L39B7
001585r 2               L39D5:
001585r 2  A8                   tay
001586r 2               .ifndef CONFIG_SMALL
001586r 2                       lda     ARG+4
001586r 2                       sbc     FAC+4
001586r 2                       sta     ARG+4
001586r 2               .endif
001586r 2  A5 C1                lda     ARG+3
001588r 2  E5 BA                sbc     FAC+3
00158Ar 2  85 C1                sta     ARG+3
00158Cr 2  A5 C0                lda     ARG+2
00158Er 2  E5 B9                sbc     FAC+2
001590r 2  85 C0                sta     ARG+2
001592r 2  A5 BF                lda     ARG+1
001594r 2  E5 B8                sbc     FAC+1
001596r 2  85 BF                sta     ARG+1
001598r 2  98                   tya
001599r 2  4C rr rr             jmp     L39C7
00159Cr 2               L39F2:
00159Cr 2  A9 40                lda     #$40
00159Er 2  D0 D6                bne     L39C4
0015A0r 2               L39F6:
0015A0r 2  0A                   asl     a
0015A1r 2  0A                   asl     a
0015A2r 2  0A                   asl     a
0015A3r 2  0A                   asl     a
0015A4r 2  0A                   asl     a
0015A5r 2  0A                   asl     a
0015A6r 2  85 C4                sta     FACEXTENSION
0015A8r 2  28                   plp
0015A9r 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
0015ACr 2               L3A02:
0015ACr 2  A2 14                ldx     #ERR_ZERODIV
0015AEr 2  4C rr rr             jmp     ERROR
0015B1r 2               
0015B1r 2               ; ----------------------------------------------------------------------------
0015B1r 2               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
0015B1r 2               ; ----------------------------------------------------------------------------
0015B1r 2               COPY_RESULT_INTO_FAC:
0015B1r 2  A5 80                lda     RESULT
0015B3r 2  85 B8                sta     FAC+1
0015B5r 2  A5 81                lda     RESULT+1
0015B7r 2  85 B9                sta     FAC+2
0015B9r 2  A5 82                lda     RESULT+2
0015BBr 2  85 BA                sta     FAC+3
0015BDr 2               .ifndef CONFIG_SMALL
0015BDr 2                       lda     RESULT+3
0015BDr 2                       sta     FAC+4
0015BDr 2               .endif
0015BDr 2  4C rr rr             jmp     NORMALIZE_FAC2
0015C0r 2               
0015C0r 2               ; ----------------------------------------------------------------------------
0015C0r 2               ; UNPACK (Y,A) INTO FAC
0015C0r 2               ; ----------------------------------------------------------------------------
0015C0r 2               LOAD_FAC_FROM_YA:
0015C0r 2  85 7C                sta     INDEX
0015C2r 2  84 7D                sty     INDEX+1
0015C4r 2  A0 03                ldy     #MANTISSA_BYTES
0015C6r 2               .ifndef CONFIG_SMALL
0015C6r 2                       lda     (INDEX),y
0015C6r 2                       sta     FAC+4
0015C6r 2                       dey
0015C6r 2               .endif
0015C6r 2  B1 7C                lda     (INDEX),y
0015C8r 2  85 BA                sta     FAC+3
0015CAr 2  88                   dey
0015CBr 2  B1 7C                lda     (INDEX),y
0015CDr 2  85 B9                sta     FAC+2
0015CFr 2  88                   dey
0015D0r 2  B1 7C                lda     (INDEX),y
0015D2r 2  85 BB                sta     FACSIGN
0015D4r 2  09 80                ora     #$80
0015D6r 2  85 B8                sta     FAC+1
0015D8r 2  88                   dey
0015D9r 2  B1 7C                lda     (INDEX),y
0015DBr 2  85 B7                sta     FAC
0015DDr 2  84 C4                sty     FACEXTENSION
0015DFr 2  60                   rts
0015E0r 2               
0015E0r 2               ; ----------------------------------------------------------------------------
0015E0r 2               ; ROUND FAC, STORE IN TEMP2
0015E0r 2               ; ----------------------------------------------------------------------------
0015E0r 2               STORE_FAC_IN_TEMP2_ROUNDED:
0015E0r 2  A2 B3                ldx     #TEMP2
0015E2r 2  2C                   .byte   $2C
0015E3r 2               
0015E3r 2               ; ----------------------------------------------------------------------------
0015E3r 2               ; ROUND FAC, STORE IN TEMP1
0015E3r 2               ; ----------------------------------------------------------------------------
0015E3r 2               STORE_FAC_IN_TEMP1_ROUNDED:
0015E3r 2  A2 AF                ldx     #TEMP1X
0015E5r 2  A0 00                ldy     #$00
0015E7r 2  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
0015E9r 2               
0015E9r 2               ; ----------------------------------------------------------------------------
0015E9r 2               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
0015E9r 2               ; ----------------------------------------------------------------------------
0015E9r 2               SETFOR:
0015E9r 2  A6 A2                ldx     FORPNT
0015EBr 2  A4 A3                ldy     FORPNT+1
0015EDr 2               
0015EDr 2               ; ----------------------------------------------------------------------------
0015EDr 2               ; ROUND FAC, AND STORE AT (Y,X)
0015EDr 2               ; ----------------------------------------------------------------------------
0015EDr 2               STORE_FAC_AT_YX_ROUNDED:
0015EDr 2  20 rr rr             jsr     ROUND_FAC
0015F0r 2  86 7C                stx     INDEX
0015F2r 2  84 7D                sty     INDEX+1
0015F4r 2  A0 03                ldy     #MANTISSA_BYTES
0015F6r 2               .ifndef CONFIG_SMALL
0015F6r 2                       lda     FAC+4
0015F6r 2                       sta     (INDEX),y
0015F6r 2                       dey
0015F6r 2               .endif
0015F6r 2  A5 BA                lda     FAC+3
0015F8r 2  91 7C                sta     (INDEX),y
0015FAr 2  88                   dey
0015FBr 2  A5 B9                lda     FAC+2
0015FDr 2  91 7C                sta     (INDEX),y
0015FFr 2  88                   dey
001600r 2  A5 BB                lda     FACSIGN
001602r 2  09 7F                ora     #$7F
001604r 2  25 B8                and     FAC+1
001606r 2  91 7C                sta     (INDEX),y
001608r 2  88                   dey
001609r 2  A5 B7                lda     FAC
00160Br 2  91 7C                sta     (INDEX),y
00160Dr 2  84 C4                sty     FACEXTENSION
00160Fr 2  60                   rts
001610r 2               
001610r 2               ; ----------------------------------------------------------------------------
001610r 2               ; COPY ARG INTO FAC
001610r 2               ; ----------------------------------------------------------------------------
001610r 2               COPY_ARG_TO_FAC:
001610r 2  A5 C2                lda     ARGSIGN
001612r 2               MFA:
001612r 2  85 BB                sta     FACSIGN
001614r 2  A2 04                ldx     #BYTES_FP
001616r 2               L3A7A:
001616r 2  B5 BD                lda     SHIFTSIGNEXT,x
001618r 2  95 B6                sta     EXPSGN,x
00161Ar 2  CA                   dex
00161Br 2  D0 F9                bne     L3A7A
00161Dr 2  86 C4                stx     FACEXTENSION
00161Fr 2  60                   rts
001620r 2               
001620r 2               ; ----------------------------------------------------------------------------
001620r 2               ; ROUND FAC AND COPY TO ARG
001620r 2               ; ----------------------------------------------------------------------------
001620r 2               COPY_FAC_TO_ARG_ROUNDED:
001620r 2  20 rr rr             jsr     ROUND_FAC
001623r 2               MAF:
001623r 2  A2 05                ldx     #BYTES_FP+1
001625r 2               L3A89:
001625r 2  B5 B6                lda     EXPSGN,x
001627r 2  95 BD                sta     SHIFTSIGNEXT,x
001629r 2  CA                   dex
00162Ar 2  D0 F9                bne     L3A89
00162Cr 2  86 C4                stx     FACEXTENSION
00162Er 2               RTS14:
00162Er 2  60                   rts
00162Fr 2               
00162Fr 2               ; ----------------------------------------------------------------------------
00162Fr 2               ; ROUND FAC USING EXTENSION BYTE
00162Fr 2               ; ----------------------------------------------------------------------------
00162Fr 2               ROUND_FAC:
00162Fr 2  A5 B7                lda     FAC
001631r 2  F0 FB                beq     RTS14
001633r 2  06 C4                asl     FACEXTENSION
001635r 2  90 F7                bcc     RTS14
001637r 2               
001637r 2               ; ----------------------------------------------------------------------------
001637r 2               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
001637r 2               ; ----------------------------------------------------------------------------
001637r 2               INCREMENT_MANTISSA:
001637r 2  20 rr rr             jsr     INCREMENT_FAC_MANTISSA
00163Ar 2  D0 F2                bne     RTS14
00163Cr 2  4C rr rr             jmp     NORMALIZE_FAC6
00163Fr 2               
00163Fr 2               ; ----------------------------------------------------------------------------
00163Fr 2               ; TEST FAC FOR ZERO AND SIGN
00163Fr 2               ;
00163Fr 2               ; FAC > 0, RETURN +1
00163Fr 2               ; FAC = 0, RETURN  0
00163Fr 2               ; FAC < 0, RETURN -1
00163Fr 2               ; ----------------------------------------------------------------------------
00163Fr 2               SIGN:
00163Fr 2  A5 B7                lda     FAC
001641r 2  F0 09                beq     RTS15
001643r 2               L3AA7:
001643r 2  A5 BB                lda     FACSIGN
001645r 2               SIGN2:
001645r 2  2A                   rol     a
001646r 2  A9 FF                lda     #$FF
001648r 2  B0 02                bcs     RTS15
00164Ar 2  A9 01                lda     #$01
00164Cr 2               RTS15:
00164Cr 2  60                   rts
00164Dr 2               
00164Dr 2               ; ----------------------------------------------------------------------------
00164Dr 2               ; "SGN" FUNCTION
00164Dr 2               ; ----------------------------------------------------------------------------
00164Dr 2               SGN:
00164Dr 2  20 rr rr             jsr     SIGN
001650r 2               
001650r 2               ; ----------------------------------------------------------------------------
001650r 2               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
001650r 2               ; ----------------------------------------------------------------------------
001650r 2               FLOAT:
001650r 2  85 B8                sta     FAC+1
001652r 2  A9 00                lda     #$00
001654r 2  85 B9                sta     FAC+2
001656r 2  A2 88                ldx     #$88
001658r 2               
001658r 2               ; ----------------------------------------------------------------------------
001658r 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
001658r 2               ; (X) = EXPONENT
001658r 2               ; ----------------------------------------------------------------------------
001658r 2               FLOAT1:
001658r 2  A5 B8                lda     FAC+1
00165Ar 2  49 FF                eor     #$FF
00165Cr 2  2A                   rol     a
00165Dr 2               
00165Dr 2               ; ----------------------------------------------------------------------------
00165Dr 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00165Dr 2               ; (X) = EXPONENT
00165Dr 2               ; C=0 TO MAKE VALUE NEGATIVE
00165Dr 2               ; C=1 TO MAKE VALUE POSITIVE
00165Dr 2               ; ----------------------------------------------------------------------------
00165Dr 2               FLOAT2:
00165Dr 2  A9 00                lda     #$00
00165Fr 2               .ifndef CONFIG_SMALL
00165Fr 2                       sta     FAC+4
00165Fr 2               .endif
00165Fr 2  85 BA                sta     FAC+3
001661r 2               LDB21:
001661r 2  86 B7                stx     FAC
001663r 2  85 C4                sta     FACEXTENSION
001665r 2  85 BB                sta     FACSIGN
001667r 2  4C rr rr             jmp     NORMALIZE_FAC1
00166Ar 2               
00166Ar 2               ; ----------------------------------------------------------------------------
00166Ar 2               ; "ABS" FUNCTION
00166Ar 2               ; ----------------------------------------------------------------------------
00166Ar 2               ABS:
00166Ar 2  46 BB                lsr     FACSIGN
00166Cr 2  60                   rts
00166Dr 2               
00166Dr 2               ; ----------------------------------------------------------------------------
00166Dr 2               ; COMPARE FAC WITH PACKED # AT (Y,A)
00166Dr 2               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
00166Dr 2               ; ----------------------------------------------------------------------------
00166Dr 2               FCOMP:
00166Dr 2  85 7E                sta     DEST
00166Fr 2               
00166Fr 2               ; ----------------------------------------------------------------------------
00166Fr 2               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
00166Fr 2               ; "DEST" ALREADY SET UP
00166Fr 2               ; ----------------------------------------------------------------------------
00166Fr 2               FCOMP2:
00166Fr 2  84 7F                sty     DEST+1
001671r 2  A0 00                ldy     #$00
001673r 2  B1 7E                lda     (DEST),y
001675r 2  C8                   iny
001676r 2  AA                   tax
001677r 2  F0 C6                beq     SIGN
001679r 2  B1 7E                lda     (DEST),y
00167Br 2  45 BB                eor     FACSIGN
00167Dr 2  30 C4                bmi     L3AA7
00167Fr 2  E4 B7                cpx     FAC
001681r 2  D0 1A                bne     L3B0A
001683r 2  B1 7E                lda     (DEST),y
001685r 2  09 80                ora     #$80
001687r 2  C5 B8                cmp     FAC+1
001689r 2  D0 12                bne     L3B0A
00168Br 2  C8                   iny
00168Cr 2  B1 7E                lda     (DEST),y
00168Er 2  C5 B9                cmp     FAC+2
001690r 2  D0 0B                bne     L3B0A
001692r 2  C8                   iny
001693r 2               .ifndef CONFIG_SMALL
001693r 2                       lda     (DEST),y
001693r 2                       cmp     FAC+3
001693r 2                       bne     L3B0A
001693r 2                       iny
001693r 2               .endif
001693r 2  A9 7F                lda     #$7F
001695r 2  C5 C4                cmp     FACEXTENSION
001697r 2  B1 7E                lda     (DEST),y
001699r 2  E5 BA                sbc     FAC_LAST
00169Br 2  F0 28                beq     L3B32
00169Dr 2               L3B0A:
00169Dr 2  A5 BB                lda     FACSIGN
00169Fr 2  90 02                bcc     L3B10
0016A1r 2  49 FF                eor     #$FF
0016A3r 2               L3B10:
0016A3r 2  4C rr rr             jmp     SIGN2
0016A6r 2               
0016A6r 2               ; ----------------------------------------------------------------------------
0016A6r 2               ; QUICK INTEGER FUNCTION
0016A6r 2               ;
0016A6r 2               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
0016A6r 2               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
0016A6r 2               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
0016A6r 2               ;
0016A6r 2               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
0016A6r 2               ; ----------------------------------------------------------------------------
0016A6r 2               QINT:
0016A6r 2  A5 B7                lda     FAC
0016A8r 2  F0 4A                beq     QINT3
0016AAr 2  38                   sec
0016ABr 2  E9 98                sbc     #120+8*BYTES_FP
0016ADr 2  24 BB                bit     FACSIGN
0016AFr 2  10 09                bpl     L3B27
0016B1r 2  AA                   tax
0016B2r 2  A9 FF                lda     #$FF
0016B4r 2  85 BD                sta     SHIFTSIGNEXT
0016B6r 2  20 rr rr             jsr     COMPLEMENT_FAC_MANTISSA
0016B9r 2  8A                   txa
0016BAr 2               L3B27:
0016BAr 2  A2 B7                ldx     #FAC
0016BCr 2  C9 F9                cmp     #$F9
0016BEr 2  10 06                bpl     QINT2
0016C0r 2  20 rr rr             jsr     SHIFT_RIGHT
0016C3r 2  84 BD                sty     SHIFTSIGNEXT
0016C5r 2               L3B32:
0016C5r 2  60                   rts
0016C6r 2               QINT2:
0016C6r 2  A8                   tay
0016C7r 2  A5 BB                lda     FACSIGN
0016C9r 2  29 80                and     #$80
0016CBr 2  46 B8                lsr     FAC+1
0016CDr 2  05 B8                ora     FAC+1
0016CFr 2  85 B8                sta     FAC+1
0016D1r 2  20 rr rr             jsr     SHIFT_RIGHT4
0016D4r 2  84 BD                sty     SHIFTSIGNEXT
0016D6r 2  60                   rts
0016D7r 2               
0016D7r 2               ; ----------------------------------------------------------------------------
0016D7r 2               ; "INT" FUNCTION
0016D7r 2               ;
0016D7r 2               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
0016D7r 2               ; AND THEN REFLOATS THE INTEGER.
0016D7r 2               ; ----------------------------------------------------------------------------
0016D7r 2               INT:
0016D7r 2  A5 B7                lda     FAC
0016D9r 2  C9 98                cmp     #120+8*BYTES_FP
0016DBr 2  B0 1E                bcs     RTS17
0016DDr 2  20 rr rr             jsr     QINT
0016E0r 2  84 C4                sty     FACEXTENSION
0016E2r 2  A5 BB                lda     FACSIGN
0016E4r 2  84 BB                sty     FACSIGN
0016E6r 2  49 80                eor     #$80
0016E8r 2  2A                   rol     a
0016E9r 2  A9 98                lda     #120+8*BYTES_FP
0016EBr 2  85 B7                sta     FAC
0016EDr 2  A5 BA                lda     FAC_LAST
0016EFr 2  85 60                sta     CHARAC
0016F1r 2  4C rr rr             jmp     NORMALIZE_FAC1
0016F4r 2               QINT3:
0016F4r 2  85 B8                sta     FAC+1
0016F6r 2  85 B9                sta     FAC+2
0016F8r 2  85 BA                sta     FAC+3
0016FAr 2               .ifndef CONFIG_SMALL
0016FAr 2                       sta     FAC+4
0016FAr 2               .endif
0016FAr 2  A8                   tay
0016FBr 2               RTS17:
0016FBr 2  60                   rts
0016FCr 2               
0016FCr 2               ; ----------------------------------------------------------------------------
0016FCr 2               ; CONVERT STRING TO FP VALUE IN FAC
0016FCr 2               ;
0016FCr 2               ; STRING POINTED TO BY TXTPTR
0016FCr 2               ; FIRST CHAR ALREADY SCANNED BY CHRGET
0016FCr 2               ; (A) = FIRST CHAR, C=0 IF DIGIT.
0016FCr 2               ; ----------------------------------------------------------------------------
0016FCr 2               FIN:
0016FCr 2  A0 00                ldy     #$00
0016FEr 2  A2 09                ldx     #SERLEN-TMPEXP
001700r 2               L3B6F:
001700r 2  94 B3                sty     TMPEXP,x
001702r 2  CA                   dex
001703r 2  10 FB                bpl     L3B6F
001705r 2  90 0F                bcc     FIN2
001707r 2  C9 2D                cmp     #$2D
001709r 2  D0 04                bne     L3B7E
00170Br 2  86 BC                stx     SERLEN
00170Dr 2  F0 04                beq     FIN1
00170Fr 2               L3B7E:
00170Fr 2  C9 2B                cmp     #$2B
001711r 2  D0 05                bne     FIN3
001713r 2               FIN1:
001713r 2  20 C7 00             jsr     CHRGET
001716r 2               FIN2:
001716r 2  90 5B                bcc     FIN9
001718r 2               FIN3:
001718r 2  C9 2E                cmp     #$2E
00171Ar 2  F0 2E                beq     FIN10
00171Cr 2  C9 45                cmp     #$45
00171Er 2  D0 30                bne     FIN7
001720r 2  20 C7 00             jsr     CHRGET
001723r 2  90 17                bcc     FIN5
001725r 2  C9 A7                cmp     #TOKEN_MINUS
001727r 2  F0 0E                beq     L3BA6
001729r 2  C9 2D                cmp     #$2D
00172Br 2  F0 0A                beq     L3BA6
00172Dr 2  C9 A6                cmp     #TOKEN_PLUS
00172Fr 2  F0 08                beq     FIN4
001731r 2  C9 2B                cmp     #$2B
001733r 2  F0 04                beq     FIN4
001735r 2  D0 07                bne     FIN6
001737r 2               L3BA6:
001737r 2               .ifndef CONFIG_ROR_WORKAROUND
001737r 2  66 B6                ror     EXPSGN
001739r 2               .else
001739r 2                       lda     #$00
001739r 2                       bcc     L3BAC
001739r 2                       lda     #$80
001739r 2               L3BAC:
001739r 2                       lsr     EXPSGN
001739r 2                       ora     EXPSGN
001739r 2                       sta     EXPSGN
001739r 2               .endif
001739r 2               FIN4:
001739r 2  20 C7 00             jsr     CHRGET
00173Cr 2               FIN5:
00173Cr 2  90 5C                bcc     GETEXP
00173Er 2               FIN6:
00173Er 2  24 B6                bit     EXPSGN
001740r 2  10 0E                bpl     FIN7
001742r 2  A9 00                lda     #$00
001744r 2  38                   sec
001745r 2  E5 B4                sbc     EXPON
001747r 2  4C rr rr             jmp     FIN8
00174Ar 2               
00174Ar 2               ; ----------------------------------------------------------------------------
00174Ar 2               ; FOUND A DECIMAL POINT
00174Ar 2               ; ----------------------------------------------------------------------------
00174Ar 2               FIN10:
00174Ar 2               .ifndef CONFIG_ROR_WORKAROUND
00174Ar 2  66 B5                ror     LOWTR
00174Cr 2               .else
00174Cr 2                       lda     #$00
00174Cr 2                       bcc     L3BC9
00174Cr 2                       lda     #$80
00174Cr 2               L3BC9:
00174Cr 2                       lsr     LOWTR
00174Cr 2                       ora     LOWTR
00174Cr 2                       sta     LOWTR
00174Cr 2               .endif
00174Cr 2  24 B5                bit     LOWTR
00174Er 2  50 C3                bvc     FIN1
001750r 2               
001750r 2               ; ----------------------------------------------------------------------------
001750r 2               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
001750r 2               ; ----------------------------------------------------------------------------
001750r 2               FIN7:
001750r 2  A5 B4                lda     EXPON
001752r 2               FIN8:
001752r 2  38                   sec
001753r 2  E5 B3                sbc     INDX
001755r 2  85 B4                sta     EXPON
001757r 2  F0 12                beq     L3BEE
001759r 2  10 09                bpl     L3BE7
00175Br 2               L3BDE:
00175Br 2  20 rr rr             jsr     DIV10
00175Er 2  E6 B4                inc     EXPON
001760r 2  D0 F9                bne     L3BDE
001762r 2  F0 07                beq     L3BEE
001764r 2               L3BE7:
001764r 2  20 rr rr             jsr     MUL10
001767r 2  C6 B4                dec     EXPON
001769r 2  D0 F9                bne     L3BE7
00176Br 2               L3BEE:
00176Br 2  A5 BC                lda     SERLEN
00176Dr 2  30 01                bmi     L3BF3
00176Fr 2  60                   rts
001770r 2               L3BF3:
001770r 2  4C rr rr             jmp     NEGOP
001773r 2               
001773r 2               ; ----------------------------------------------------------------------------
001773r 2               ; ACCUMULATE A DIGIT INTO FAC
001773r 2               ; ----------------------------------------------------------------------------
001773r 2               FIN9:
001773r 2  48                   pha
001774r 2  24 B5                bit     LOWTR
001776r 2  10 02                bpl     L3BFD
001778r 2  E6 B3                inc     INDX
00177Ar 2               L3BFD:
00177Ar 2  20 rr rr             jsr     MUL10
00177Dr 2  68                   pla
00177Er 2  38                   sec
00177Fr 2  E9 30                sbc     #$30
001781r 2  20 rr rr             jsr     ADDACC
001784r 2  4C rr rr             jmp     FIN1
001787r 2               
001787r 2               ; ----------------------------------------------------------------------------
001787r 2               ; ADD (A) TO FAC
001787r 2               ; ----------------------------------------------------------------------------
001787r 2               ADDACC:
001787r 2  48                   pha
001788r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00178Br 2  68                   pla
00178Cr 2  20 rr rr             jsr     FLOAT
00178Fr 2  A5 C2                lda     ARGSIGN
001791r 2  45 BB                eor     FACSIGN
001793r 2  85 C3                sta     SGNCPR
001795r 2  A6 B7                ldx     FAC
001797r 2  4C rr rr             jmp     FADDT
00179Ar 2               
00179Ar 2               ; ----------------------------------------------------------------------------
00179Ar 2               ; ACCUMULATE DIGIT OF EXPONENT
00179Ar 2               ; ----------------------------------------------------------------------------
00179Ar 2               GETEXP:
00179Ar 2  A5 B4                lda     EXPON
00179Cr 2  C9 0A                cmp     #MAX_EXPON
00179Er 2  90 09                bcc     L3C2C
0017A0r 2               .ifdef CONFIG_10A
0017A0r 2  A9 64                lda     #$64
0017A2r 2               .endif
0017A2r 2  24 B6                bit     EXPSGN
0017A4r 2               .ifdef CONFIG_10A
0017A4r 2  30 11                bmi     L3C3A
0017A6r 2               .else
0017A6r 2                       bmi     LDC70
0017A6r 2               .endif
0017A6r 2  4C rr rr             jmp     OVERFLOW
0017A9r 2               LDC70:
0017A9r 2               .ifndef CONFIG_10A
0017A9r 2                       lda     #$0B
0017A9r 2               .endif
0017A9r 2               L3C2C:
0017A9r 2  0A                   asl     a
0017AAr 2  0A                   asl     a
0017ABr 2  18                   clc
0017ACr 2  65 B4                adc     EXPON
0017AEr 2  0A                   asl     a
0017AFr 2  18                   clc
0017B0r 2  A0 00                ldy     #$00
0017B2r 2  71 CE                adc     (TXTPTR),y
0017B4r 2  38                   sec
0017B5r 2  E9 30                sbc     #$30
0017B7r 2               L3C3A:
0017B7r 2  85 B4                sta     EXPON
0017B9r 2  4C rr rr             jmp     FIN4
0017BCr 2               
0017BCr 2               ; ----------------------------------------------------------------------------
0017BCr 2               .ifdef CONFIG_SMALL
0017BCr 2               ; these values are /1000 of what the labels say
0017BCr 2               CON_99999999_9:
0017BCr 2  91 43 4F F8          .byte   $91,$43,$4F,$F8
0017C0r 2               CON_999999999:
0017C0r 2  94 74 23 F7  		.byte   $94,$74,$23,$F7
0017C4r 2               CON_BILLION:
0017C4r 2  94 74 24 00          .byte   $94,$74,$24,$00
0017C8r 2               .else
0017C8r 2               CON_99999999_9:
0017C8r 2                       .byte   $9B,$3E,$BC,$1F,$FD
0017C8r 2               CON_999999999:
0017C8r 2               .ifndef CONFIG_10A
0017C8r 2                       .byte   $9E,$6E,$6B,$27,$FE
0017C8r 2               .else
0017C8r 2                       .byte   $9E,$6E,$6B,$27,$FD
0017C8r 2               .endif
0017C8r 2               CON_BILLION:
0017C8r 2                       .byte   $9E,$6E,$6B,$28,$00
0017C8r 2               .endif
0017C8r 2               
0017C8r 2               ; ----------------------------------------------------------------------------
0017C8r 2               ; PRINT "IN <LINE #>"
0017C8r 2               ; ----------------------------------------------------------------------------
0017C8r 2               INPRT:
0017C8r 2               .ifdef KBD
0017C8r 2                       jsr     LFE0B
0017C8r 2                       .byte	" in"
0017C8r 2                       .byte	0
0017C8r 2               .else
0017C8r 2  A9 rr                lda     #<QT_IN
0017CAr 2  A0 rr                ldy     #>QT_IN
0017CCr 2  20 rr rr             jsr     GOSTROUT2
0017CFr 2               .endif
0017CFr 2  A5 93                lda     CURLIN+1
0017D1r 2  A6 92                ldx     CURLIN
0017D3r 2               
0017D3r 2               ; ----------------------------------------------------------------------------
0017D3r 2               ; PRINT A,X AS DECIMAL INTEGER
0017D3r 2               ; ----------------------------------------------------------------------------
0017D3r 2               LINPRT:
0017D3r 2  85 B8                sta     FAC+1
0017D5r 2  86 B9                stx     FAC+2
0017D7r 2  A2 90                ldx     #$90
0017D9r 2  38                   sec
0017DAr 2  20 rr rr             jsr     FLOAT2
0017DDr 2  20 rr rr             jsr     FOUT
0017E0r 2               GOSTROUT2:
0017E0r 2  4C rr rr             jmp     STROUT
0017E3r 2               
0017E3r 2               ; ----------------------------------------------------------------------------
0017E3r 2               ; CONVERT (FAC) TO STRING STARTING AT STACK
0017E3r 2               ; RETURN WITH (Y,A) POINTING AT STRING
0017E3r 2               ; ----------------------------------------------------------------------------
0017E3r 2               FOUT:
0017E3r 2  A0 01                ldy     #$01
0017E5r 2               
0017E5r 2               ; ----------------------------------------------------------------------------
0017E5r 2               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
0017E5r 2               ; SO THAT RESULT STRING STARTS AT STACK-1
0017E5r 2               ; (THIS IS USED AS A FLAG)
0017E5r 2               ; ----------------------------------------------------------------------------
0017E5r 2               FOUT1:
0017E5r 2  A9 20                lda     #$20
0017E7r 2  24 BB                bit     FACSIGN
0017E9r 2  10 02                bpl     L3C73
0017EBr 2  A9 2D                lda     #$2D
0017EDr 2               L3C73:
0017EDr 2  99 FF 00             sta     $FF,y
0017F0r 2  85 BB                sta     FACSIGN
0017F2r 2  84 C5                sty     STRNG2
0017F4r 2  C8                   iny
0017F5r 2  A9 30                lda     #$30
0017F7r 2  A6 B7                ldx     FAC
0017F9r 2  D0 03                bne     L3C84
0017FBr 2  4C rr rr             jmp     FOUT4
0017FEr 2               L3C84:
0017FEr 2  A9 00                lda     #$00
001800r 2  E0 80                cpx     #$80
001802r 2  F0 02                beq     L3C8C
001804r 2  B0 09                bcs     L3C95
001806r 2               L3C8C:
001806r 2  A9 rr                lda     #<CON_BILLION
001808r 2  A0 rr                ldy     #>CON_BILLION
00180Ar 2  20 rr rr             jsr     FMULT
00180Dr 2               .ifdef CONFIG_SMALL
00180Dr 2  A9 FA                lda     #<-6 ; exponent adjustment
00180Fr 2               .else
00180Fr 2                       lda     #<-9
00180Fr 2               .endif
00180Fr 2               L3C95:
00180Fr 2  85 B3                sta     INDX
001811r 2               ; ----------------------------------------------------------------------------
001811r 2               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
001811r 2               ; ----------------------------------------------------------------------------
001811r 2               L3C97:
001811r 2  A9 rr                lda     #<CON_999999999
001813r 2  A0 rr                ldy     #>CON_999999999
001815r 2  20 rr rr             jsr     FCOMP
001818r 2  F0 1E                beq     L3CBE
00181Ar 2  10 12                bpl     L3CB4
00181Cr 2               L3CA2:
00181Cr 2  A9 rr                lda     #<CON_99999999_9
00181Er 2  A0 rr                ldy     #>CON_99999999_9
001820r 2  20 rr rr             jsr     FCOMP
001823r 2  F0 02                beq     L3CAD
001825r 2  10 0E                bpl     L3CBB
001827r 2               L3CAD:
001827r 2  20 rr rr             jsr     MUL10
00182Ar 2  C6 B3                dec     INDX
00182Cr 2  D0 EE                bne     L3CA2
00182Er 2               L3CB4:
00182Er 2  20 rr rr             jsr     DIV10
001831r 2  E6 B3                inc     INDX
001833r 2  D0 DC                bne     L3C97
001835r 2               L3CBB:
001835r 2  20 rr rr             jsr     FADDH
001838r 2               L3CBE:
001838r 2  20 rr rr             jsr     QINT
00183Br 2               ; ----------------------------------------------------------------------------
00183Br 2               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
00183Br 2               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
00183Br 2               ;
00183Br 2               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
00183Br 2               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
00183Br 2               ; ----------------------------------------------------------------------------
00183Br 2  A2 01                ldx     #$01
00183Dr 2  A5 B3                lda     INDX
00183Fr 2  18                   clc
001840r 2  69 07                adc     #3*BYTES_FP-5
001842r 2  30 09                bmi     L3CD3
001844r 2  C9 08                cmp     #3*BYTES_FP-4
001846r 2  B0 06                bcs     L3CD4
001848r 2  69 FF                adc     #$FF
00184Ar 2  AA                   tax
00184Br 2  A9 02                lda     #$02
00184Dr 2               L3CD3:
00184Dr 2  38                   sec
00184Er 2               L3CD4:
00184Er 2  E9 02                sbc     #$02
001850r 2  85 B4                sta     EXPON
001852r 2  86 B3                stx     INDX
001854r 2  8A                   txa
001855r 2  F0 02                beq     L3CDF
001857r 2  10 13                bpl     L3CF2
001859r 2               L3CDF:
001859r 2  A4 C5                ldy     STRNG2
00185Br 2  A9 2E                lda     #$2E
00185Dr 2  C8                   iny
00185Er 2  99 FF 00             sta     $FF,y
001861r 2  8A                   txa
001862r 2  F0 06                beq     L3CF0
001864r 2  A9 30                lda     #$30
001866r 2  C8                   iny
001867r 2  99 FF 00             sta     $FF,y
00186Ar 2               L3CF0:
00186Ar 2  84 C5                sty     STRNG2
00186Cr 2               ; ----------------------------------------------------------------------------
00186Cr 2               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
00186Cr 2               ; ----------------------------------------------------------------------------
00186Cr 2               L3CF2:
00186Cr 2  A0 00                ldy     #$00
00186Er 2               LDD3A:
00186Er 2  A2 80                ldx     #$80
001870r 2               L3CF6:
001870r 2  A5 BA                lda     FAC_LAST
001872r 2  18                   clc
001873r 2               .ifndef CONFIG_SMALL
001873r 2                       adc     DECTBL+3,y
001873r 2                       sta     FAC+4
001873r 2                       lda     FAC+3
001873r 2               .endif
001873r 2  79 rr rr             adc     DECTBL+2,y
001876r 2  85 BA                sta     FAC+3
001878r 2  A5 B9                lda     FAC+2
00187Ar 2  79 rr rr             adc     DECTBL+1,y
00187Dr 2  85 B9                sta     FAC+2
00187Fr 2  A5 B8                lda     FAC+1
001881r 2  79 rr rr             adc     DECTBL,y
001884r 2  85 B8                sta     FAC+1
001886r 2  E8                   inx
001887r 2  B0 04                bcs     L3D1A
001889r 2  10 E5                bpl     L3CF6
00188Br 2  30 02                bmi     L3D1C
00188Dr 2               L3D1A:
00188Dr 2  30 E1                bmi     L3CF6
00188Fr 2               L3D1C:
00188Fr 2  8A                   txa
001890r 2  90 04                bcc     L3D23
001892r 2  49 FF                eor     #$FF
001894r 2  69 0A                adc     #$0A
001896r 2               L3D23:
001896r 2  69 2F                adc     #$2F
001898r 2  C8                   iny
001899r 2  C8                   iny
00189Ar 2  C8                   iny
00189Br 2               .ifndef CONFIG_SMALL
00189Br 2                       iny
00189Br 2               .endif
00189Br 2  84 A0                sty     VARPNT
00189Dr 2  A4 C5                ldy     STRNG2
00189Fr 2  C8                   iny
0018A0r 2  AA                   tax
0018A1r 2  29 7F                and     #$7F
0018A3r 2  99 FF 00             sta     $FF,y
0018A6r 2  C6 B3                dec     INDX
0018A8r 2  D0 06                bne     L3D3E
0018AAr 2  A9 2E                lda     #$2E
0018ACr 2  C8                   iny
0018ADr 2  99 FF 00             sta     $FF,y
0018B0r 2               L3D3E:
0018B0r 2  84 C5                sty     STRNG2
0018B2r 2  A4 A0                ldy     VARPNT
0018B4r 2  8A                   txa
0018B5r 2  49 FF                eor     #$FF
0018B7r 2  29 80                and     #$80
0018B9r 2  AA                   tax
0018BAr 2  C0 12                cpy     #DECTBL_END-DECTBL
0018BCr 2               .ifdef CONFIG_CBM_ALL
0018BCr 2                       beq     LDD96
0018BCr 2                       cpy     #$3C ; XXX
0018BCr 2               .endif
0018BCr 2  D0 B2                bne     L3CF6
0018BEr 2               ; ----------------------------------------------------------------------------
0018BEr 2               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
0018BEr 2               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
0018BEr 2               ; DECIMAL POINT.
0018BEr 2               ; ----------------------------------------------------------------------------
0018BEr 2               LDD96:
0018BEr 2  A4 C5                ldy     STRNG2
0018C0r 2               L3D4E:
0018C0r 2  B9 FF 00             lda     $FF,y
0018C3r 2  88                   dey
0018C4r 2  C9 30                cmp     #$30
0018C6r 2  F0 F8                beq     L3D4E
0018C8r 2  C9 2E                cmp     #$2E
0018CAr 2  F0 01                beq     L3D5B
0018CCr 2  C8                   iny
0018CDr 2               L3D5B:
0018CDr 2  A9 2B                lda     #$2B
0018CFr 2  A6 B4                ldx     EXPON
0018D1r 2  F0 2E                beq     L3D8F
0018D3r 2  10 08                bpl     L3D6B
0018D5r 2  A9 00                lda     #$00
0018D7r 2  38                   sec
0018D8r 2  E5 B4                sbc     EXPON
0018DAr 2  AA                   tax
0018DBr 2  A9 2D                lda     #$2D
0018DDr 2               L3D6B:
0018DDr 2  99 01 01             sta     STACK+1,y
0018E0r 2  A9 45                lda     #$45
0018E2r 2  99 00 01             sta     STACK,y
0018E5r 2  8A                   txa
0018E6r 2  A2 2F                ldx     #$2F
0018E8r 2  38                   sec
0018E9r 2               L3D77:
0018E9r 2  E8                   inx
0018EAr 2  E9 0A                sbc     #$0A
0018ECr 2  B0 FB                bcs     L3D77
0018EEr 2  69 3A                adc     #$3A
0018F0r 2  99 03 01             sta     STACK+3,y
0018F3r 2  8A                   txa
0018F4r 2  99 02 01             sta     STACK+2,y
0018F7r 2  A9 00                lda     #$00
0018F9r 2  99 04 01             sta     STACK+4,y
0018FCr 2  F0 08                beq     L3D94
0018FEr 2               FOUT4:
0018FEr 2  99 FF 00             sta     $FF,y
001901r 2               L3D8F:
001901r 2  A9 00                lda     #$00
001903r 2  99 00 01             sta     STACK,y
001906r 2               L3D94:
001906r 2  A9 00                lda     #$00
001908r 2  A0 01                ldy     #$01
00190Ar 2  60                   rts
00190Br 2               
00190Br 2               ; ----------------------------------------------------------------------------
00190Br 2               CON_HALF:
00190Br 2               .ifdef CONFIG_SMALL
00190Br 2  80 00 00 00          .byte   $80,$00,$00,$00
00190Fr 2               .else
00190Fr 2                       .byte   $80,$00,$00,$00,$00
00190Fr 2               .endif
00190Fr 2               
00190Fr 2               ; ----------------------------------------------------------------------------
00190Fr 2               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
00190Fr 2               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
00190Fr 2               ; ----------------------------------------------------------------------------
00190Fr 2               DECTBL:
00190Fr 2               .ifdef CONFIG_SMALL
00190Fr 2  FE 79 60             .byte   $FE,$79,$60 ; -100000
001912r 2  00 27 10     		.byte	$00,$27,$10 ; 10000
001915r 2  FF FC 18     		.byte	$FF,$FC,$18 ; -1000
001918r 2  00 00 64     		.byte	$00,$00,$64 ; 100
00191Br 2  FF FF F6     		.byte	$FF,$FF,$F6 ; -10
00191Er 2  00 00 01     		.byte	$00,$00,$01 ; 1
001921r 2               .else
001921r 2               		.byte	$FA,$0A,$1F,$00	; -100000000
001921r 2               		.byte	$00,$98,$96,$80	; 10000000
001921r 2               		.byte	$FF,$F0,$BD,$C0	; -1000000
001921r 2               		.byte	$00,$01,$86,$A0	; 100000
001921r 2               		.byte	$FF,$FF,$D8,$F0	; -10000
001921r 2               		.byte   $00,$00,$03,$E8	; 1000
001921r 2               		.byte	$FF,$FF,$FF,$9C	; -100
001921r 2               		.byte   $00,$00,$00,$0A	; 10
001921r 2               		.byte	$FF,$FF,$FF,$FF	; -1
001921r 2               .endif
001921r 2               DECTBL_END:
001921r 2               .ifdef CONFIG_CBM_ALL
001921r 2               		.byte	$FF,$DF,$0A,$80 ; TI$
001921r 2               		.byte	$00,$03,$4B,$C0
001921r 2               		.byte	$FF,$FF,$73,$60
001921r 2               		.byte	$00,$00,$0E,$10
001921r 2               		.byte	$FF,$FF,$FD,$A8
001921r 2               		.byte	$00,$00,$00,$3C
001921r 2               .endif
001921r 2               .ifdef CONFIG_2
001921r 2               C_ZERO = CON_HALF + 2
001921r 2               .endif
001921r 2               
001921r 2               ; ----------------------------------------------------------------------------
001921r 2               ; "SQR" FUNCTION
001921r 2               ; ----------------------------------------------------------------------------
001921r 2               SQR:
001921r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001924r 2  A9 rr                lda     #<CON_HALF
001926r 2  A0 rr                ldy     #>CON_HALF
001928r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
00192Br 2               
00192Br 2               ; ----------------------------------------------------------------------------
00192Br 2               ; EXPONENTIATION OPERATION
00192Br 2               ;
00192Br 2               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
00192Br 2               ; ----------------------------------------------------------------------------
00192Br 2               FPWRT:
00192Br 2  F0 63                beq     EXP
00192Dr 2  A5 BE                lda     ARG
00192Fr 2  D0 03                bne     L3DD5
001931r 2  4C rr rr             jmp     STA_IN_FAC_SIGN_AND_EXP
001934r 2               L3DD5:
001934r 2  A2 A7                ldx     #TEMP3
001936r 2  A0 00                ldy     #$00
001938r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
00193Br 2  A5 C2                lda     ARGSIGN
00193Dr 2  10 0F                bpl     L3DEF
00193Fr 2  20 rr rr             jsr     INT
001942r 2  A9 A7                lda     #TEMP3
001944r 2  A0 00                ldy     #$00
001946r 2  20 rr rr             jsr     FCOMP
001949r 2  D0 03                bne     L3DEF
00194Br 2  98                   tya
00194Cr 2  A4 60                ldy     CHARAC
00194Er 2               L3DEF:
00194Er 2  20 rr rr             jsr     MFA
001951r 2  98                   tya
001952r 2  48                   pha
001953r 2  20 rr rr             jsr     LOG
001956r 2  A9 A7                lda     #TEMP3
001958r 2  A0 00                ldy     #$00
00195Ar 2  20 rr rr             jsr     FMULT
00195Dr 2  20 rr rr             jsr     EXP
001960r 2  68                   pla
001961r 2  4A                   lsr     a
001962r 2  90 0A                bcc     L3E0F
001964r 2               
001964r 2               ; ----------------------------------------------------------------------------
001964r 2               ; NEGATE VALUE IN FAC
001964r 2               ; ----------------------------------------------------------------------------
001964r 2               NEGOP:
001964r 2  A5 B7                lda     FAC
001966r 2  F0 06                beq     L3E0F
001968r 2  A5 BB                lda     FACSIGN
00196Ar 2  49 FF                eor     #$FF
00196Cr 2  85 BB                sta     FACSIGN
00196Er 2               L3E0F:
00196Er 2  60                   rts
00196Fr 2               
00196Fr 2               ; ----------------------------------------------------------------------------
00196Fr 2               .ifdef CONFIG_SMALL
00196Fr 2               CON_LOG_E:
00196Fr 2  81 38 AA 3B          .byte   $81,$38,$AA,$3B
001973r 2               POLY_EXP:
001973r 2  06           		.byte	$06
001974r 2  74 63 90 8C  		.byte	$74,$63,$90,$8C
001978r 2  77 23 0C AB  		.byte	$77,$23,$0C,$AB
00197Cr 2  7A 1E 94 00  		.byte	$7A,$1E,$94,$00
001980r 2  7C 63 42 80  		.byte	$7C,$63,$42,$80
001984r 2  7E 75 FE D0  		.byte	$7E,$75,$FE,$D0
001988r 2  80 31 72 15  		.byte	$80,$31,$72,$15
00198Cr 2  81 00 00 00  		.byte	$81,$00,$00,$00
001990r 2               .else
001990r 2               CON_LOG_E:
001990r 2                       .byte   $81,$38,$AA,$3B,$29
001990r 2               POLY_EXP:
001990r 2                       .byte   $07
001990r 2               		.byte	$71,$34,$58,$3E,$56
001990r 2               		.byte	$74,$16,$7E,$B3,$1B
001990r 2               		.byte	$77,$2F,$EE,$E3,$85
001990r 2                       .byte   $7A,$1D,$84,$1C,$2A
001990r 2               		.byte	$7C,$63,$59,$58,$0A
001990r 2               		.byte	$7E,$75,$FD,$E7,$C6
001990r 2               		.byte	$80,$31,$72,$18,$10
001990r 2               		.byte	$81,$00,$00,$00,$00
001990r 2               .endif
001990r 2               
001990r 2               ; ----------------------------------------------------------------------------
001990r 2               ; "EXP" FUNCTION
001990r 2               ;
001990r 2               ; FAC = E ^ FAC
001990r 2               ; ----------------------------------------------------------------------------
001990r 2               EXP:
001990r 2  A9 rr                lda     #<CON_LOG_E
001992r 2  A0 rr                ldy     #>CON_LOG_E
001994r 2  20 rr rr             jsr     FMULT
001997r 2  A5 C4                lda     FACEXTENSION
001999r 2  69 50                adc     #$50
00199Br 2  90 03                bcc     L3E4E
00199Dr 2  20 rr rr             jsr     INCREMENT_MANTISSA
0019A0r 2               L3E4E:
0019A0r 2  85 AE                sta     ARGEXTENSION
0019A2r 2  20 rr rr             jsr     MAF
0019A5r 2  A5 B7                lda     FAC
0019A7r 2  C9 88                cmp     #$88
0019A9r 2  90 03                bcc     L3E5C
0019ABr 2               L3E59:
0019ABr 2  20 rr rr             jsr     OUTOFRNG
0019AEr 2               L3E5C:
0019AEr 2  20 rr rr             jsr     INT
0019B1r 2  A5 60                lda     CHARAC
0019B3r 2  18                   clc
0019B4r 2  69 81                adc     #$81
0019B6r 2  F0 F3                beq     L3E59
0019B8r 2  38                   sec
0019B9r 2  E9 01                sbc     #$01
0019BBr 2  48                   pha
0019BCr 2  A2 04                ldx     #BYTES_FP
0019BEr 2               L3E6C:
0019BEr 2  B5 BE                lda     ARG,x
0019C0r 2  B4 B7                ldy     FAC,x
0019C2r 2  95 B7                sta     FAC,x
0019C4r 2  94 BE                sty     ARG,x
0019C6r 2  CA                   dex
0019C7r 2  10 F5                bpl     L3E6C
0019C9r 2  A5 AE                lda     ARGEXTENSION
0019CBr 2  85 C4                sta     FACEXTENSION
0019CDr 2  20 rr rr             jsr     FSUBT
0019D0r 2  20 rr rr             jsr     NEGOP
0019D3r 2  A9 rr                lda     #<POLY_EXP
0019D5r 2  A0 rr                ldy     #>POLY_EXP
0019D7r 2  20 rr rr             jsr     POLYNOMIAL
0019DAr 2  A9 00                lda     #$00
0019DCr 2  85 C3                sta     SGNCPR
0019DEr 2  68                   pla
0019DFr 2  20 rr rr             jsr     ADD_EXPONENTS1
0019E2r 2  60                   rts
0019E3r 2               
0019E3r 2               ; ----------------------------------------------------------------------------
0019E3r 2               ; ODD POLYNOMIAL SUBROUTINE
0019E3r 2               ;
0019E3r 2               ; F(X) = X * P(X^2)
0019E3r 2               ;
0019E3r 2               ; WHERE:  X IS VALUE IN FAC
0019E3r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
0019E3r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
0019E3r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
0019E3r 2               ;
0019E3r 2               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
0019E3r 2               ; ----------------------------------------------------------------------------
0019E3r 2               POLYNOMIAL_ODD:
0019E3r 2  85 C5                sta     STRNG2
0019E5r 2  84 C6                sty     STRNG2+1
0019E7r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
0019EAr 2  A9 AF                lda     #TEMP1X
0019ECr 2  20 rr rr             jsr     FMULT
0019EFr 2  20 rr rr             jsr     SERMAIN
0019F2r 2  A9 AF                lda     #TEMP1X
0019F4r 2  A0 00                ldy     #$00
0019F6r 2  4C rr rr             jmp     FMULT
0019F9r 2               
0019F9r 2               ; ----------------------------------------------------------------------------
0019F9r 2               ; NORMAL POLYNOMIAL SUBROUTINE
0019F9r 2               ;
0019F9r 2               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
0019F9r 2               ;
0019F9r 2               ; WHERE:  X IS VALUE IN FAC
0019F9r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
0019F9r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
0019F9r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
0019F9r 2               ; ----------------------------------------------------------------------------
0019F9r 2               POLYNOMIAL:
0019F9r 2  85 C5                sta     STRNG2
0019FBr 2  84 C6                sty     STRNG2+1
0019FDr 2               SERMAIN:
0019FDr 2  20 rr rr             jsr     STORE_FAC_IN_TEMP2_ROUNDED
001A00r 2  B1 C5                lda     (STRNG2),y
001A02r 2  85 BC                sta     SERLEN
001A04r 2  A4 C5                ldy     STRNG2
001A06r 2  C8                   iny
001A07r 2  98                   tya
001A08r 2  D0 02                bne     L3EBA
001A0Ar 2  E6 C6                inc     STRNG2+1
001A0Cr 2               L3EBA:
001A0Cr 2  85 C5                sta     STRNG2
001A0Er 2  A4 C6                ldy     STRNG2+1
001A10r 2               L3EBE:
001A10r 2  20 rr rr             jsr     FMULT
001A13r 2  A5 C5                lda     STRNG2
001A15r 2  A4 C6                ldy     STRNG2+1
001A17r 2  18                   clc
001A18r 2  69 04                adc     #BYTES_FP
001A1Ar 2  90 01                bcc     L3ECB
001A1Cr 2  C8                   iny
001A1Dr 2               L3ECB:
001A1Dr 2  85 C5                sta     STRNG2
001A1Fr 2  84 C6                sty     STRNG2+1
001A21r 2  20 rr rr             jsr     FADD
001A24r 2  A9 B3                lda     #TEMP2
001A26r 2  A0 00                ldy     #$00
001A28r 2  C6 BC                dec     SERLEN
001A2Ar 2  D0 E4                bne     L3EBE
001A2Cr 2               RTS19:
001A2Cr 2  60                   rts
001A2Dr 2               
001A2Dr 1               .include "chrget.s"
001A2Dr 2               .segment "CHRGET"
000000r 2               RAMSTART1:
000000r 2               GENERIC_CHRGET:
000000r 2  E6 CE                inc     TXTPTR
000002r 2  D0 02                bne     GENERIC_CHRGOT
000004r 2  E6 CF                inc     TXTPTR+1
000006r 2               GENERIC_CHRGOT:
000006r 2               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
000006r 2  AD 60 EA             lda     $EA60
000009r 2               .ifdef KBD
000009r 2                       jsr     LF430
000009r 2               .endif
000009r 2  C9 3A                cmp     #$3A
00000Br 2  B0 0A                bcs     L4058
00000Dr 2               GENERIC_CHRGOT2:
00000Dr 2  C9 20                cmp     #$20
00000Fr 2  F0 EF                beq     GENERIC_CHRGET
000011r 2  38                   sec
000012r 2  E9 30                sbc     #$30
000014r 2  38                   sec
000015r 2  E9 D0                sbc     #$D0
000017r 2               L4058:
000017r 2  60                   rts
000018r 2               
000018r 1               .include "rnd.s"
000018r 2               .segment "CODE"
001A2Dr 2               
001A2Dr 2               ; ----------------------------------------------------------------------------
001A2Dr 2               ; "RND" FUNCTION
001A2Dr 2               ; ----------------------------------------------------------------------------
001A2Dr 2               
001A2Dr 2               .ifdef KBD
001A2Dr 2               RND:
001A2Dr 2                       ldx     #$10
001A2Dr 2                       jsr     SIGN
001A2Dr 2                       beq     LFC26
001A2Dr 2                       bmi     LFC10
001A2Dr 2                       lda     RNDSEED
001A2Dr 2                       ldy     RNDSEED+1
001A2Dr 2               LFBFA:
001A2Dr 2                       sta     FAC+2
001A2Dr 2                       sty     FAC+1
001A2Dr 2               LFBFE:
001A2Dr 2                       asl     a
001A2Dr 2                       asl     a
001A2Dr 2                       eor     FAC+2
001A2Dr 2                       asl     a
001A2Dr 2                       eor     FAC+1
001A2Dr 2                       asl     a
001A2Dr 2                       asl     a
001A2Dr 2                       asl     a
001A2Dr 2                       asl     a
001A2Dr 2                       eor     FAC+1
001A2Dr 2                       asl     a
001A2Dr 2                       rol     FAC+2
001A2Dr 2                       rol     FAC+1
001A2Dr 2               LFC10:
001A2Dr 2                       lda     FAC+2
001A2Dr 2                       dex
001A2Dr 2                       bne     LFBFE
001A2Dr 2                       sta     RNDSEED
001A2Dr 2                       sta     FAC+3
001A2Dr 2                       lda     FAC+1
001A2Dr 2                       sta     RNDSEED+1
001A2Dr 2                       lda     #$80
001A2Dr 2                       sta     FAC
001A2Dr 2                       stx     FACSIGN
001A2Dr 2                       jmp     NORMALIZE_FAC2
001A2Dr 2               LFC26:
001A2Dr 2                       ldy     $03CA
001A2Dr 2                       lda     $03C7
001A2Dr 2                       ora     #$01
001A2Dr 2               GOMOVMF:
001A2Dr 2                       bne     LFBFA
001A2Dr 2                       .byte   $F0
001A2Dr 2               .else
001A2Dr 2               ; <<< THESE ARE MISSING ONE BYTE FOR FP VALUES >>>
001A2Dr 2               ; (non CONFIG_SMALL)
001A2Dr 2               CONRND1:
001A2Dr 2  98 35 44 7A          .byte   $98,$35,$44,$7A
001A31r 2               CONRND2:
001A31r 2  68 28 B1 46          .byte   $68,$28,$B1,$46
001A35r 2               RND:
001A35r 2  20 rr rr             jsr     SIGN
001A38r 2               .ifdef CONFIG_CBM_ALL
001A38r 2                       bmi     L3F01
001A38r 2                       bne     LDF63
001A38r 2                       lda     ENTROPY
001A38r 2                       sta     FAC+1
001A38r 2                       lda     ENTROPY+4
001A38r 2                       sta     FAC+2
001A38r 2                       lda     ENTROPY+1
001A38r 2                       sta     FAC+3
001A38r 2                       lda     ENTROPY+5
001A38r 2                       sta     FAC+4
001A38r 2                       jmp     LDF88
001A38r 2               LDF63:
001A38r 2               .else
001A38r 2  AA                   tax
001A39r 2  30 18                bmi     L3F01
001A3Br 2               .endif
001A3Br 2  A9 DF                lda     #<RNDSEED
001A3Dr 2  A0 00                ldy     #>RNDSEED
001A3Fr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001A42r 2               .ifndef CONFIG_CBM_ALL
001A42r 2  8A                   txa
001A43r 2  F0 E7                beq     RTS19
001A45r 2               .endif
001A45r 2  A9 rr                lda     #<CONRND1
001A47r 2  A0 rr                ldy     #>CONRND1
001A49r 2  20 rr rr             jsr     FMULT
001A4Cr 2  A9 rr                lda     #<CONRND2
001A4Er 2  A0 rr                ldy     #>CONRND2
001A50r 2  20 rr rr             jsr     FADD
001A53r 2               L3F01:
001A53r 2  A6 BA                ldx     FAC_LAST
001A55r 2  A5 B8                lda     FAC+1
001A57r 2  85 BA                sta     FAC_LAST
001A59r 2  86 B8                stx     FAC+1
001A5Br 2               .ifdef CONFIG_CBM_ALL
001A5Br 2                       ldx     FAC+2
001A5Br 2                       lda     FAC+3
001A5Br 2                       sta     FAC+2
001A5Br 2                       stx     FAC+3
001A5Br 2               LDF88:
001A5Br 2               .endif
001A5Br 2  A9 00                lda     #$00
001A5Dr 2  85 BB                sta     FACSIGN
001A5Fr 2  A5 B7                lda     FAC
001A61r 2  85 C4                sta     FACEXTENSION
001A63r 2  A9 80                lda     #$80
001A65r 2  85 B7                sta     FAC
001A67r 2  20 rr rr             jsr     NORMALIZE_FAC2
001A6Ar 2  A2 DF                ldx     #<RNDSEED
001A6Cr 2  A0 00                ldy     #>RNDSEED
001A6Er 2               GOMOVMF:
001A6Er 2  4C rr rr             jmp     STORE_FAC_AT_YX_ROUNDED
001A71r 2               .endif
001A71r 2               
001A71r 2               .segment "CHRGET"
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               ; INITIAL VALUE FOR RANDOM NUMBER, ALSO COPIED
000018r 2               ; IN ALONG WITH CHRGET, BUT ERRONEOUSLY:
000018r 2               ; <<< THE LAST BYTE IS NOT COPIED >>>
000018r 2               ; (on all non-CONFIG_SMALL)
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               GENERIC_RNDSEED:
000018r 2               .ifndef KBD
000018r 2               ; random number seed
000018r 2                 .ifdef CONFIG_SMALL
000018r 2  80 4F C7 52          .byte   $80,$4F,$C7,$52
00001Cr 2                 .else
00001Cr 2                   .ifdef CONFIG_11
00001Cr 2                       .byte   $80,$4F,$C7,$52,$58
00001Cr 2                   .else
00001Cr 2                       .byte   $80,$4F,$C7,$52,$59
00001Cr 2                   .endif
00001Cr 2                 .endif
00001Cr 2               .endif
00001Cr 2               GENERIC_CHRGET_END:
00001Cr 2               
00001Cr 1               .include "trig.s"
00001Cr 2               .segment "CODE"
001A71r 2               
001A71r 2               SIN_COS_TAN_ATN:
001A71r 2               ; ----------------------------------------------------------------------------
001A71r 2               ; "COS" FUNCTION
001A71r 2               ; ----------------------------------------------------------------------------
001A71r 2               COS:
001A71r 2  A9 rr                lda     #<CON_PI_HALF
001A73r 2  A0 rr                ldy     #>CON_PI_HALF
001A75r 2  20 rr rr             jsr     FADD
001A78r 2               
001A78r 2               ; ----------------------------------------------------------------------------
001A78r 2               ; "SIN" FUNCTION
001A78r 2               ; ----------------------------------------------------------------------------
001A78r 2               SIN:
001A78r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001A7Br 2  A9 rr                lda     #<CON_PI_DOUB
001A7Dr 2  A0 rr                ldy     #>CON_PI_DOUB
001A7Fr 2  A6 C2                ldx     ARGSIGN
001A81r 2  20 rr rr             jsr     DIV
001A84r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001A87r 2  20 rr rr             jsr     INT
001A8Ar 2  A9 00                lda     #$00
001A8Cr 2  85 C3                sta     STRNG1
001A8Er 2  20 rr rr             jsr     FSUBT
001A91r 2               ; ----------------------------------------------------------------------------
001A91r 2               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
001A91r 2               ;
001A91r 2               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
001A91r 2               ;
001A91r 2               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
001A91r 2               ; ----------------------------------------------------------------------------
001A91r 2  A9 rr                lda     #<QUARTER
001A93r 2  A0 rr                ldy     #>QUARTER
001A95r 2  20 rr rr             jsr     FSUB
001A98r 2  A5 BB                lda     FACSIGN
001A9Ar 2  48                   pha
001A9Br 2  10 0D                bpl     SIN1
001A9Dr 2  20 rr rr             jsr     FADDH
001AA0r 2  A5 BB                lda     FACSIGN
001AA2r 2  30 09                bmi     L3F5B
001AA4r 2  A5 68                lda     CPRMASK
001AA6r 2  49 FF                eor     #$FF
001AA8r 2  85 68                sta     CPRMASK
001AAAr 2               ; ----------------------------------------------------------------------------
001AAAr 2               ; IF FALL THRU, RANGE IS 0...1/2
001AAAr 2               ; IF BRANCH HERE, RANGE IS 0...1/4
001AAAr 2               ; ----------------------------------------------------------------------------
001AAAr 2               SIN1:
001AAAr 2  20 rr rr             jsr     NEGOP
001AADr 2               ; ----------------------------------------------------------------------------
001AADr 2               ; IF FALL THRU, RANGE IS -1/2...0
001AADr 2               ; IF BRANCH HERE, RANGE IS -1/4...0
001AADr 2               ; ----------------------------------------------------------------------------
001AADr 2               L3F5B:
001AADr 2  A9 rr                lda     #<QUARTER
001AAFr 2  A0 rr                ldy     #>QUARTER
001AB1r 2  20 rr rr             jsr     FADD
001AB4r 2  68                   pla
001AB5r 2  10 03                bpl     L3F68
001AB7r 2  20 rr rr             jsr     NEGOP
001ABAr 2               L3F68:
001ABAr 2  A9 rr                lda     #<POLY_SIN
001ABCr 2  A0 rr                ldy     #>POLY_SIN
001ABEr 2  4C rr rr             jmp     POLYNOMIAL_ODD
001AC1r 2               
001AC1r 2               ; ----------------------------------------------------------------------------
001AC1r 2               ; "TAN" FUNCTION
001AC1r 2               ;
001AC1r 2               ; COMPUTE TAN(X) = SIN(X) / COS(X)
001AC1r 2               ; ----------------------------------------------------------------------------
001AC1r 2               TAN:
001AC1r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001AC4r 2  A9 00                lda     #$00
001AC6r 2  85 68                sta     CPRMASK
001AC8r 2  20 rr rr             jsr     SIN
001ACBr 2  A2 A7                ldx     #TEMP3
001ACDr 2  A0 00                ldy     #$00
001ACFr 2  20 rr rr             jsr     GOMOVMF
001AD2r 2  A9 AF                lda     #TEMP1+(5-BYTES_FP)
001AD4r 2  A0 00                ldy     #$00
001AD6r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001AD9r 2  A9 00                lda     #$00
001ADBr 2  85 BB                sta     FACSIGN
001ADDr 2  A5 68                lda     CPRMASK
001ADFr 2  20 rr rr             jsr     TAN1
001AE2r 2  A9 A7                lda     #TEMP3
001AE4r 2  A0 00                ldy     #$00
001AE6r 2  4C rr rr             jmp     FDIV
001AE9r 2               TAN1:
001AE9r 2  48                   pha
001AEAr 2  4C rr rr             jmp     SIN1
001AEDr 2               
001AEDr 2               ; ----------------------------------------------------------------------------
001AEDr 2               .ifdef CONFIG_SMALL
001AEDr 2               CON_PI_HALF:
001AEDr 2  81 49 0F DB          .byte   $81,$49,$0F,$DB
001AF1r 2               CON_PI_DOUB:
001AF1r 2  83 49 0F DB          .byte   $83,$49,$0F,$DB
001AF5r 2               QUARTER:
001AF5r 2  7F 00 00 00          .byte   $7F,$00,$00,$00
001AF9r 2               POLY_SIN:
001AF9r 2  04 86 1E D7          .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
001AFDr 2  FB 87 99 26  
001B01r 2  65 87 23 34          .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
001B05r 2  58 86 A5 5D  
001B09r 2  E1 83 49 0F          .byte   $E1,$83,$49,$0F,$DB
001B0Dr 2  DB           
001B0Er 2               .else
001B0Er 2               CON_PI_HALF:
001B0Er 2                       .byte   $81,$49,$0F,$DA,$A2
001B0Er 2               CON_PI_DOUB:
001B0Er 2                       .byte   $83,$49,$0F,$DA,$A2
001B0Er 2               QUARTER:
001B0Er 2                       .byte   $7F,$00,$00,$00,$00
001B0Er 2               POLY_SIN:
001B0Er 2                       .byte   $05,$84,$E6,$1A,$2D,$1B,$86,$28
001B0Er 2                       .byte   $07,$FB,$F8,$87,$99,$68,$89,$01
001B0Er 2                       .byte   $87,$23,$35,$DF,$E1,$86,$A5,$5D
001B0Er 2                       .byte   $E7,$28,$83,$49,$0F,$DA,$A2
001B0Er 2                 .ifndef CONFIG_11
001B0Er 2               ; no easter egg text before BASIC 1.1
001B0Er 2                 .elseif !.def(CONFIG_2A)
001B0Er 2               ; ASCII encoded easter egg
001B0Er 2               MICROSOFT:
001B0Er 2                       .byte   $A6,$D3,$C1,$C8,$D4,$C8,$D5,$C4
001B0Er 2                       .byte   $CE,$CA
001B0Er 2                 .else
001B0Er 2               ; PET encoded easter egg text since CBM2
001B0Er 2               MICROSOFT:
001B0Er 2                       .byte   $A1,$54,$46,$8F,$13,$8F,$52,$43
001B0Er 2                       .byte   $89,$CD
001B0Er 2                 .endif
001B0Er 2               .endif
001B0Er 2               
001B0Er 2               ; ----------------------------------------------------------------------------
001B0Er 2               ; "ATN" FUNCTION
001B0Er 2               ; ----------------------------------------------------------------------------
001B0Er 2               ATN:
001B0Er 2  A5 BB                lda     FACSIGN
001B10r 2  48                   pha
001B11r 2  10 03                bpl     L3FDB
001B13r 2  20 rr rr             jsr     NEGOP
001B16r 2               L3FDB:
001B16r 2  A5 B7                lda     FAC
001B18r 2  48                   pha
001B19r 2  C9 81                cmp     #$81
001B1Br 2  90 07                bcc     L3FE9
001B1Dr 2  A9 rr                lda     #<CON_ONE
001B1Fr 2  A0 rr                ldy     #>CON_ONE
001B21r 2  20 rr rr             jsr     FDIV
001B24r 2               ; ----------------------------------------------------------------------------
001B24r 2               ; 0 <= X <= 1
001B24r 2               ; 0 <= ATN(X) <= PI/8
001B24r 2               ; ----------------------------------------------------------------------------
001B24r 2               L3FE9:
001B24r 2  A9 rr                lda     #<POLY_ATN
001B26r 2  A0 rr                ldy     #>POLY_ATN
001B28r 2  20 rr rr             jsr     POLYNOMIAL_ODD
001B2Br 2  68                   pla
001B2Cr 2  C9 81                cmp     #$81
001B2Er 2  90 07                bcc     L3FFC
001B30r 2  A9 rr                lda     #<CON_PI_HALF
001B32r 2  A0 rr                ldy     #>CON_PI_HALF
001B34r 2  20 rr rr             jsr     FSUB
001B37r 2               L3FFC:
001B37r 2  68                   pla
001B38r 2  10 03                bpl     L4002
001B3Ar 2  4C rr rr             jmp     NEGOP
001B3Dr 2               L4002:
001B3Dr 2  60                   rts
001B3Er 2               
001B3Er 2               ; ----------------------------------------------------------------------------
001B3Er 2               POLY_ATN:
001B3Er 2               .ifdef CONFIG_SMALL
001B3Er 2  08                   .byte   $08
001B3Fr 2  78 3A C5 37  		.byte	$78,$3A,$C5,$37
001B43r 2  7B 83 A2 5C  		.byte	$7B,$83,$A2,$5C
001B47r 2  7C 2E DD 4D  		.byte	$7C,$2E,$DD,$4D
001B4Br 2  7D 99 B0 1E  		.byte	$7D,$99,$B0,$1E
001B4Fr 2  7D 59 ED 24  		.byte	$7D,$59,$ED,$24
001B53r 2  7E 91 72 00  		.byte	$7E,$91,$72,$00
001B57r 2  7E 4C B9 73  		.byte	$7E,$4C,$B9,$73
001B5Br 2  7F AA AA 53  		.byte	$7F,$AA,$AA,$53
001B5Fr 2  81 00 00 00  		.byte	$81,$00,$00,$00
001B63r 2               .else
001B63r 2                       .byte   $0B
001B63r 2               		.byte	$76,$B3,$83,$BD,$D3
001B63r 2               		.byte	$79,$1E,$F4,$A6,$F5
001B63r 2               		.byte	$7B,$83,$FC,$B0,$10
001B63r 2                       .byte   $7C,$0C,$1F,$67,$CA
001B63r 2               		.byte	$7C,$DE,$53,$CB,$C1
001B63r 2               		.byte	$7D,$14,$64,$70,$4C
001B63r 2               		.byte	$7D,$B7,$EA,$51,$7A
001B63r 2               		.byte	$7D,$63,$30,$88,$7E
001B63r 2               		.byte	$7E,$92,$44,$99,$3A
001B63r 2               		.byte	$7E,$4C,$CC,$91,$C7
001B63r 2               		.byte	$7F,$AA,$AA,$AA,$13
001B63r 2                       .byte   $81,$00,$00,$00,$00
001B63r 2               .endif
001B63r 2               
001B63r 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
001B63r 2               		.byte	$00 ; XXX
001B63r 2               .endif
001B63r 2               
001B63r 1               .include "init.s"
001B63r 2               .segment "INIT"
000000r 2               
000000r 2               .ifdef KBD
000000r 2               FNDLIN2:
000000r 2                       php
000000r 2                       jmp     FNDLIN
000000r 2               .endif
000000r 2               
000000r 2               ; ----------------------------------------------------------------------------
000000r 2               PR_WRITTEN_BY:
000000r 2               .ifndef KBD
000000r 2                 .ifndef CONFIG_CBM_ALL
000000r 2  A9 rr                lda     #<QT_WRITTEN_BY
000002r 2  A0 rr                ldy     #>QT_WRITTEN_BY
000004r 2  20 rr rr             jsr     STROUT
000007r 2                 .endif
000007r 2               .endif
000007r 2               COLD_START:
000007r 2               .ifdef KBD
000007r 2                       lda     #<LFD81
000007r 2                       sta     $03A0
000007r 2                       lda     #>LFD81
000007r 2                       sta     $03A1
000007r 2                       lda     #$20
000007r 2                       sta     $0480
000007r 2                       lda     $0352
000007r 2                       sta     $04
000007r 2                       lda     $0353
000007r 2                       sta     $05
000007r 2               .else
000007r 2                 .ifndef CBM2
000007r 2  A2 FF                ldx     #$FF
000009r 2  86 93                stx     CURLIN+1
00000Br 2                 .endif
00000Br 2                 .ifdef CONFIG_NO_INPUTBUFFER_ZP
00000Br 2                       ldx     #$FB
00000Br 2                 .endif
00000Br 2  9A                   txs
00000Cr 2                 .ifndef CONFIG_CBM_ALL
00000Cr 2  A9 rr                lda     #<COLD_START
00000Er 2  A0 rr                ldy     #>COLD_START
000010r 2  85 01                sta     GORESTART+1
000012r 2  84 02                sty     GORESTART+2
000014r 2  85 04                sta     GOSTROUT+1
000016r 2  84 05                sty     GOSTROUT+2
000018r 2  A9 rr                lda     #<AYINT
00001Ar 2  A0 rr                ldy     #>AYINT
00001Cr 2  85 06                sta     GOAYINT
00001Er 2  84 07                sty     GOAYINT+1
000020r 2  A9 rr                lda     #<GIVAYF
000022r 2  A0 rr                ldy     #>GIVAYF
000024r 2  85 08                sta     GOGIVEAYF
000026r 2  84 09                sty     GOGIVEAYF+1
000028r 2                 .endif
000028r 2  A9 4C                lda     #$4C
00002Ar 2                 .ifdef CONFIG_CBM_ALL
00002Ar 2                       sta     JMPADRS
00002Ar 2                 .endif
00002Ar 2  85 00                sta     GORESTART
00002Cr 2                 .ifndef CONFIG_CBM_ALL
00002Cr 2  85 03                sta     GOSTROUT
00002Er 2  85 AC                sta     JMPADRS
000030r 2                 .endif
000030r 2                 .if (!.def(CONFIG_RAM)) && (!.def(CONFIG_CBM_ALL))
000030r 2  85 0A                sta     USR
000032r 2                 .endif
000032r 2               
000032r 2                 .ifndef CONFIG_RAM
000032r 2                   .ifdef APPLE
000032r 2                         lda     #<USR_FUNC
000032r 2                         ldy     #>USR_FUNC
000032r 2                   .else
000032r 2  A9 rr                  lda     #<IQERR
000034r 2  A0 rr                  ldy     #>IQERR
000036r 2                   .endif
000036r 2  85 0B                  sta     USR+1
000038r 2  84 0C                  sty     USR+2
00003Ar 2                 .endif
00003Ar 2                 .ifndef CBM1
00003Ar 2  A9 50                lda     #WIDTH
00003Cr 2  85 0F                sta     Z17
00003Er 2  A9 50                lda     #WIDTH2
000040r 2  85 10                sta     Z18
000042r 2                 .endif
000042r 2               .endif
000042r 2               
000042r 2               ; All non-CONFIG_SMALL versions of BASIC have
000042r 2               ; the same bug here: While the number of bytes
000042r 2               ; to be copied is correct for CONFIG_SMALL,
000042r 2               ; it is one byte short on non-CONFIG_SMALL:
000042r 2               ; It seems the "ldx" value below has been
000042r 2               ; hardcoded. So on these configurations,
000042r 2               ; the last byte of GENERIC_RNDSEED, which
000042r 2               ; is 5 bytes instead of 4, does not get copied -
000042r 2               ; which is nothing major, because it is just
000042r 2               ; the least significant 8 bits of the mantissa
000042r 2               ; of the random number seed.
000042r 2               ; KBD added three bytes to CHRGET and removed
000042r 2               ; the random number seed, but only adjusted
000042r 2               ; the number of bytes by adding 3 - this
000042r 2               ; copies four bytes too many, which is no
000042r 2               ; problem.
000042r 2               .ifdef CONFIG_SMALL
000042r 2                 .ifdef KBD
000042r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET+4
000042r 2                 .else
000042r 2  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
000044r 2                 .endif
000044r 2               .else
000044r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET-1 ; XXX
000044r 2               .endif
000044r 2               L4098:
000044r 2  BD rr rr             lda     GENERIC_CHRGET-1,x
000047r 2  95 C6                sta     CHRGET-1,x
000049r 2  CA                   dex
00004Ar 2  D0 F8                bne     L4098
00004Cr 2               .ifdef CONFIG_2
00004Cr 2                       lda     #$03
00004Cr 2                       sta     DSCLEN
00004Cr 2               .endif
00004Cr 2               .ifndef KBD
00004Cr 2  8A                   txa
00004Dr 2  85 BD                sta     SHIFTSIGNEXT
00004Fr 2                 .ifdef CONFIG_CBM_ALL
00004Fr 2                       sta     CURDVC
00004Fr 2                 .endif
00004Fr 2  85 72                sta     LASTPT+1
000051r 2                 .if .defined(CONFIG_NULL) || .defined(CONFIG_PRINTNULLS)
000051r 2  85 0D                sta     Z15
000053r 2                 .endif
000053r 2                 .ifndef CONFIG_11
000053r 2  85 0E                sta     POSX
000055r 2                 .endif
000055r 2  48                   pha
000056r 2  85 69                sta     Z14
000058r 2                 .ifndef CBM2
000058r 2                   .ifndef MICROTAN
000058r 2  A9 03                lda     #$03
00005Ar 2  85 AB                sta     DSCLEN
00005Cr 2                   .endif
00005Cr 2                   .ifndef CONFIG_11
00005Cr 2  A9 2C                lda     #$2C
00005Er 2  85 12                sta     LINNUM+1
000060r 2                   .endif
000060r 2  20 rr rr             jsr     CRDO
000063r 2                 .endif
000063r 2                 .ifdef CBM2
000063r 2                       inx
000063r 2                       stx     INPUTBUFFER-3
000063r 2                       stx     INPUTBUFFER-4
000063r 2                 .endif
000063r 2                 .ifdef APPLE
000063r 2                       lda     #$01
000063r 2                       sta     INPUTBUFFER-3
000063r 2                       sta     INPUTBUFFER-4
000063r 2                 .endif
000063r 2  A2 73                ldx     #TEMPST
000065r 2  86 70                stx     TEMPPT
000067r 2               .ifndef CONFIG_CBM_ALL
000067r 2  A9 rr                lda     #<QT_MEMORY_SIZE
000069r 2  A0 rr                ldy     #>QT_MEMORY_SIZE
00006Br 2  20 rr rr             jsr     STROUT
00006Er 2                 .ifdef APPLE
00006Er 2                       jsr     INLINX
00006Er 2                 .else
00006Er 2  20 rr rr             jsr     NXIN
000071r 2                 .endif
000071r 2  86 CE                stx     TXTPTR
000073r 2  84 CF                sty     TXTPTR+1
000075r 2  20 C7 00             jsr     CHRGET
000078r 2  C9 41                cmp     #$41
00007Ar 2  F0 84                beq     PR_WRITTEN_BY
00007Cr 2  A8                   tay
00007Dr 2  D0 21                bne     L40EE
00007Fr 2               .endif
00007Fr 2               .ifndef CBM2
00007Fr 2  A9 00                lda     #<RAMSTART2
000081r 2               .endif
000081r 2  A0 03                ldy     #>RAMSTART2
000083r 2               .ifdef CONFIG_2
000083r 2                       sta     TXTTAB
000083r 2                       sty     TXTTAB+1
000083r 2               .endif
000083r 2  85 11                sta     LINNUM
000085r 2  84 12                sty     LINNUM+1
000087r 2               .ifdef CBM2
000087r 2               		tay
000087r 2               .else
000087r 2  A0 00                ldy     #$00
000089r 2               .endif
000089r 2               L40D7:
000089r 2  E6 11                inc     LINNUM
00008Br 2  D0 02                bne     L40DD
00008Dr 2  E6 12                inc     LINNUM+1
00008Fr 2               .ifdef CBM1
00008Fr 2               ; CBM: hard RAM top limit is $8000
00008Fr 2                       lda     LINNUM+1
00008Fr 2                       cmp     #$80
00008Fr 2                       beq     L40FA
00008Fr 2               .endif
00008Fr 2               .ifdef CBM2
00008Fr 2               ; optimized version of the CBM1 code
00008Fr 2                       bmi     L40FA
00008Fr 2               .endif
00008Fr 2               L40DD:
00008Fr 2               .ifdef CONFIG_2
00008Fr 2                       lda     #$55 ; 01010101 / 10101010
00008Fr 2               .else
00008Fr 2  A9 92                lda     #$92 ; 10010010 / 00100100
000091r 2               .endif
000091r 2  91 11                sta     (LINNUM),y
000093r 2  D1 11                cmp     (LINNUM),y
000095r 2  D0 15                bne     L40FA
000097r 2  0A                   asl     a
000098r 2  91 11                sta     (LINNUM),y
00009Ar 2  D1 11                cmp     (LINNUM),y
00009Cr 2               .ifdef CONFIG_CBM_ALL
00009Cr 2                       beq     L40D7
00009Cr 2               .else
00009Cr 2                 .ifndef CONFIG_11
00009Cr 2  F0 EB                beq     L40D7; old: faster
00009Er 2  D0 0C                bne     L40FA
0000A0r 2                 .else
0000A0r 2                       bne     L40FA; new: slower
0000A0r 2                       beq     L40D7
0000A0r 2                 .endif
0000A0r 2               L40EE:
0000A0r 2  20 CD 00             jsr     CHRGOT
0000A3r 2  20 rr rr             jsr     LINGET
0000A6r 2  A8                   tay
0000A7r 2  F0 03                beq     L40FA
0000A9r 2  4C rr rr             jmp     SYNERR
0000ACr 2               .endif
0000ACr 2               L40FA:
0000ACr 2  A5 11                lda     LINNUM
0000AEr 2  A4 12                ldy     LINNUM+1
0000B0r 2  85 90                sta     MEMSIZ
0000B2r 2  84 91                sty     MEMSIZ+1
0000B4r 2               .ifndef MICROTAN
0000B4r 2  85 8C                sta     FRETOP
0000B6r 2  84 8D                sty     FRETOP+1
0000B8r 2               .endif
0000B8r 2               L4106:
0000B8r 2               .ifndef CONFIG_CBM_ALL
0000B8r 2                 .ifdef APPLE
0000B8r 2                       lda     #$FF
0000B8r 2                       jmp     L2829
0000B8r 2                       .word	STROUT ; PATCH!
0000B8r 2                       jsr     NXIN
0000B8r 2                 .else
0000B8r 2  A9 rr                lda     #<QT_TERMINAL_WIDTH
0000BAr 2  A0 rr                ldy     #>QT_TERMINAL_WIDTH
0000BCr 2  20 rr rr             jsr     STROUT
0000BFr 2  20 rr rr             jsr     NXIN
0000C2r 2                 .endif
0000C2r 2  86 CE                stx     TXTPTR
0000C4r 2  84 CF                sty     TXTPTR+1
0000C6r 2  20 C7 00             jsr     CHRGET
0000C9r 2  A8                   tay
0000CAr 2  F0 1C                beq     L4136
0000CCr 2  20 rr rr             jsr     LINGET
0000CFr 2  A5 12                lda     LINNUM+1
0000D1r 2  D0 E5                bne     L4106
0000D3r 2  A5 11                lda     LINNUM
0000D5r 2  C9 10                cmp     #$10
0000D7r 2  90 DF                bcc     L4106
0000D9r 2               L2829:
0000D9r 2  85 0F                sta     Z17
0000DBr 2               L4129:
0000DBr 2  E9 0E                sbc     #$0E
0000DDr 2  B0 FC                bcs     L4129
0000DFr 2  49 FF                eor     #$FF
0000E1r 2  E9 0C                sbc     #$0C
0000E3r 2  18                   clc
0000E4r 2  65 0F                adc     Z17
0000E6r 2  85 10                sta     Z18
0000E8r 2               .endif
0000E8r 2               L4136:
0000E8r 2               .ifdef CONFIG_RAM
0000E8r 2                       lda     #<QT_WANT
0000E8r 2                       ldy     #>QT_WANT
0000E8r 2                       jsr     STROUT
0000E8r 2                       jsr     NXIN
0000E8r 2                       stx     TXTPTR
0000E8r 2                       sty     TXTPTR+1
0000E8r 2                       jsr     CHRGET
0000E8r 2                       ldx     #<RAMSTART1
0000E8r 2                       ldy     #>RAMSTART1
0000E8r 2                       cmp     #'Y'
0000E8r 2                       beq     L4183
0000E8r 2                       cmp     #'A'
0000E8r 2                       beq     L4157
0000E8r 2                       cmp     #'N'
0000E8r 2                       bne     L4136
0000E8r 2               L4157:
0000E8r 2                       ldx     #<IQERR
0000E8r 2                       ldy     #>IQERR
0000E8r 2                       stx     UNFNC_ATN
0000E8r 2                       sty     UNFNC_ATN+1
0000E8r 2                       ldx     #<ATN	; overwrite starting
0000E8r 2                       ldy     #>ATN	; with ATN
0000E8r 2                       cmp     #'A'
0000E8r 2                       beq     L4183
0000E8r 2                       ldx     #<IQERR
0000E8r 2                       ldy     #>IQERR
0000E8r 2                       stx     UNFNC_COS
0000E8r 2                       sty     UNFNC_COS+1
0000E8r 2                       stx     UNFNC_TAN
0000E8r 2                       sty     UNFNC_TAN+1
0000E8r 2                       stx     UNFNC_SIN
0000E8r 2                       sty     UNFNC_SIN+1
0000E8r 2                       ldx     #<SIN_COS_TAN_ATN	; overwrite
0000E8r 2                       ldy     #>SIN_COS_TAN_ATN	; all of trig.s
0000E8r 2               L4183:
0000E8r 2               .else
0000E8r 2  A2 00                ldx     #<RAMSTART2
0000EAr 2  A0 03                ldy     #>RAMSTART2
0000ECr 2               .endif
0000ECr 2  86 84                stx     TXTTAB
0000EEr 2  84 85                sty     TXTTAB+1
0000F0r 2  A0 00                ldy     #$00
0000F2r 2  98                   tya
0000F3r 2  91 84                sta     (TXTTAB),y
0000F5r 2  E6 84                inc     TXTTAB
0000F7r 2               .ifndef CBM2
0000F7r 2  D0 02                bne     L4192
0000F9r 2  E6 85                inc     TXTTAB+1
0000FBr 2               L4192:
0000FBr 2               .endif
0000FBr 2               .if CONFIG_SCRTCH_ORDER = 1
0000FBr 2                       jsr     SCRTCH
0000FBr 2               .endif
0000FBr 2  A5 84                lda     TXTTAB
0000FDr 2  A4 85                ldy     TXTTAB+1
0000FFr 2  20 rr rr             jsr     REASON
000102r 2               .ifdef CBM2
000102r 2                       lda     #<QT_BASIC
000102r 2                       ldy     #>QT_BASIC
000102r 2                       jsr     STROUT
000102r 2               .else
000102r 2  20 rr rr             jsr     CRDO
000105r 2               .endif
000105r 2  A5 90                lda     MEMSIZ
000107r 2  38                   sec
000108r 2  E5 84                sbc     TXTTAB
00010Ar 2  AA                   tax
00010Br 2  A5 91                lda     MEMSIZ+1
00010Dr 2  E5 85                sbc     TXTTAB+1
00010Fr 2  20 rr rr             jsr     LINPRT
000112r 2  A9 rr                lda     #<QT_BYTES_FREE
000114r 2  A0 rr                ldy     #>QT_BYTES_FREE
000116r 2  20 rr rr             jsr     STROUT
000119r 2               .if CONFIG_SCRTCH_ORDER = 2
000119r 2                       jsr     SCRTCH
000119r 2               .endif
000119r 2               .ifdef CONFIG_CBM_ALL
000119r 2                       jmp     RESTART
000119r 2               .else
000119r 2  A9 rr                lda     #<STROUT
00011Br 2  A0 rr                ldy     #>STROUT
00011Dr 2  85 04                sta     GOSTROUT+1
00011Fr 2  84 05                sty     GOSTROUT+2
000121r 2                 .if CONFIG_SCRTCH_ORDER = 3
000121r 2  20 rr rr              jsr     SCRTCH
000124r 2                 .endif
000124r 2  A9 rr                lda     #<RESTART
000126r 2  A0 rr                ldy     #>RESTART
000128r 2  85 01                sta     GORESTART+1
00012Ar 2  84 02                sty     GORESTART+2
00012Cr 2  6C 01 00             jmp     (GORESTART+1)
00012Fr 2               .endif
00012Fr 2               
00012Fr 2                 .if .def(CONFIG_RAM) || .def(OSI)
00012Fr 2               ; OSI is compiled for ROM, but includes
00012Fr 2               ; this unused string
00012Fr 2               QT_WANT:
00012Fr 2  57 41 4E 54          .byte   "WANT SIN-COS-TAN-ATN"
000133r 2  20 53 49 4E  
000137r 2  2D 43 4F 53  
000143r 2  00                   .byte   0
000144r 2                 .endif
000144r 2               QT_WRITTEN_BY:
000144r 2                 .ifndef CONFIG_CBM_ALL
000144r 2                   .ifdef APPLE
000144r 2               		asc80 "COPYRIGHT 1977 BY MICROSOFT CO"
000144r 2               		.byte	CR,0
000144r 2                   .else
000144r 2  0D 0A 0C             .byte   CR,LF,$0C ; FORM FEED
000147r 2                     .ifndef CONFIG_11
000147r 2  57 52 49 54          .byte   "WRITTEN BY RICHARD W. WEILAND."
00014Br 2  54 45 4E 20  
00014Fr 2  42 59 20 52  
000165r 2                     .else
000165r 2                       .byte   "WRITTEN BY WEILAND & GATES"
000165r 2                     .endif
000165r 2  0D 0A 00             .byte   CR,LF,0
000168r 2                   .endif
000168r 2               QT_MEMORY_SIZE:
000168r 2  4D 45 4D 4F          .byte   "MEMORY SIZE"
00016Cr 2  52 59 20 53  
000170r 2  49 5A 45     
000173r 2  00                   .byte   0
000174r 2               QT_TERMINAL_WIDTH:
000174r 2  54 45 52 4D          .byte   "TERMINAL WIDTH"
000178r 2  49 4E 41 4C  
00017Cr 2  20 57 49 44  
000182r 2  00                   .byte   0
000183r 2                 .endif
000183r 2               QT_BYTES_FREE:
000183r 2  20 42 59 54          .byte   " BYTES FREE"
000187r 2  45 53 20 46  
00018Br 2  52 45 45     
00018Er 2                 .ifdef CBM1
00018Er 2                 .elseif .def(CBM2)
00018Er 2                       .byte   CR,0
00018Er 2                 .elseif .def(APPLE)
00018Er 2                       .byte   0
00018Er 2                 .else
00018Er 2  0D                   .byte   CR ;,LF,CR,LF
00018Fr 2                 .endif
00018Fr 2               QT_BASIC:
00018Fr 2                 .ifdef OSI
00018Fr 2  50 44 53 49          .byte   "PDSILVA 6502 BASIC VERSION 1.0 REV 3.2"
000193r 2  4C 56 41 20  
000197r 2  36 35 30 32  
0001B5r 2                 .endif
0001B5r 2                 .ifdef KIM
0001B5r 2                       .byte   "MOS TECH 6502 BASIC V1.1"
0001B5r 2                 .endif
0001B5r 2                 .ifdef MICROTAN
0001B5r 2                       .byte   "MICROTAN BASIC"
0001B5r 2                 .endif
0001B5r 2                 .ifdef CBM1
0001B5r 2                       .byte   $13 ; HOME
0001B5r 2                       .byte   "*** COMMODORE BASIC ***"
0001B5r 2                       .byte   $11,$11,$11,0 ; DOWN/DOWN/DOWN
0001B5r 2                 .endif
0001B5r 2                 .ifdef CBM2
0001B5r 2                       .byte   "### COMMODORE BASIC ###"
0001B5r 2                       .byte   CR,CR,0
0001B5r 2                 .endif
0001B5r 2                 .ifdef APPLE
0001B5r 2                       .byte   LF,CR,LF
0001B5r 2               		.byte	"APPLE BASIC V1.1"
0001B5r 2                 .endif
0001B5r 2                 .ifndef CONFIG_CBM_ALL
0001B5r 2  0D                   .byte   CR
0001B6r 2                   .ifdef MICROTAN
0001B6r 2                       .byte   "(C) 1980 MICROSOFT"
0001B6r 2                   .else
0001B6r 2  43 4F 50 59          .byte   "COPYRIGHT 1977 BY MICROSOFT CO.",CR
0001BAr 2  52 49 47 48  
0001BEr 2  54 20 31 39  
0001D6r 2  50 44 53 49          .byte   "PDSILVA - BIOSMON 2024 - Version: "
0001DAr 2  4C 56 41 20  
0001DEr 2  2D 20 42 49  
0001F8r 2  30 2E 30 2E          .byte   "0.0.5",CR
0001FCr 2  35 0D        
0001FEr 2  43 4F 50 59          .byte   "COPYRIGHT 2024 by Open Software(pdsilva)",CR,0
000202r 2  52 49 47 48  
000206r 2  54 20 32 30  
000228r 2               
000228r 2                   .endif
000228r 2  0D 00                .byte   CR,0
00022Ar 2                 .endif
00022Ar 2               .endif
00022Ar 2               
00022Ar 1               .include "extra.s"
00022Ar 2               .segment "EXTRA"
000000r 2               
000000r 2               .ifdef KIM
000000r 2               .include "kim_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_CBM1_PATCHES
000000r 2               .include "cbm1_patches.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef KBD
000000r 2               .include "kbd_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef OSI
000000r 2               .include "osi_extra.s"
000000r 3               .segment "EXTRA"
000000r 3               
000000r 3               .include "CFFA1_API.s"
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ; CFFA1_API.s  Version 1.0 - 05/22/2007
000000r 4               ;
000000r 4               ; Equates for calling the CFFA1 API -- Firmware version 1.0 ($01)
000000r 4               ;------------------------------------------------------------------------------
000000r 4               
000000r 4               CFFA1_ID1           = $AFDC   ; contains $CF when CFFA1 card is present
000000r 4               CFFA1_ID2           = $AFDD   ; contains $FA when CFFA1 card is present
000000r 4               
000000r 4               FirmwareVersion     = $01
000000r 4               
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ; Entry points to the CFFA1 firmware:
000000r 4               ;
000000r 4               ; MenuExitToMonitor
000000r 4               ;   JMP here to display the CFFA1 menu.
000000r 4               ;   Quit puts the user into the monitor.
000000r 4               ;
000000r 4               ; MenuExitToBASIC
000000r 4               ;   JMP here to display the CFFA1 menu.
000000r 4               ;   Quit puts the user into BASIC.
000000r 4               ;
000000r 4               ; Menu
000000r 4               ;   JSR here to display the CFFA1 menu.
000000r 4               ;   Quit returns control to your code.
000000r 4               ;
000000r 4               ; CFBlockDriver
000000r 4               ;   JSR here to read or write a block, after setting up pdCommandCode
000000r 4               ;   and other inputs (see below).
000000r 4               ;   Result:  CLC, A = 0
000000r 4               ;            SEC, A = error code
000000r 4               ;
000000r 4               ; CFFA1_API
000000r 4               ;   JSR here to call one of many functions provided by the firmware.
000000r 4               ;   See "Function selectors for CFFA1_API" below.
000000r 4               ;
000000r 4               ;------------------------------------------------------------------------------
000000r 4               MenuExitToMonitor   = $9000
000000r 4               MenuExitToBASIC     = $9003
000000r 4               Menu                = $9006
000000r 4               CFBlockDriver       = $9009
000000r 4               CFFA1_API           = $900C
000000r 4               
000000r 4               
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ; Inputs for CFBlockDriver - ProDOS block interface locations
000000r 4               ;------------------------------------------------------------------------------
000000r 4               pdCommandCode       = $42     ; see below
000000r 4               pdUnitNumber        = $43     ; always set this to 0 for firmware 1.0
000000r 4               pdIOBufferLow       = $44
000000r 4               pdIOBufferHigh      = $45
000000r 4               pdBlockNumberLow    = $46
000000r 4               pdBlockNumberHigh   = $47
000000r 4               
000000r 4               ;
000000r 4               ; Values for pdCommandCode
000000r 4               ;
000000r 4               PRODOS_STATUS       = $00
000000r 4               PRODOS_READ         = $01
000000r 4               PRODOS_WRITE        = $02
000000r 4               PRODOS_FORMAT       = $03
000000r 4               
000000r 4               
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ; Function selectors for CFFA1_API.
000000r 4               ;
000000r 4               ; Load one of these values into X:
000000r 4               ;
000000r 4               ;    ldx #CFFA1_xxxxx
000000r 4               ;    jsr API
000000r 4               ;
000000r 4               ; Result:  CLC, A = 0
000000r 4               ;          SEC, A = error code
000000r 4               ;
000000r 4               ; Certain functions have additional outputs, as described below.
000000r 4               ;
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ;
000000r 4               ; CFFA1_Version:
000000r 4               ;   Output: X = current firmware version
000000r 4               ;           Y = oldest compatible firmware version
000000r 4               ;
000000r 4               ; CFFA1_Menu:
000000r 4               ;   Result: Runs the CFFA1 menu and returns when the user chooses Quit.
000000r 4               ;
000000r 4               ; CFFA1_DisplayError:
000000r 4               ;   Input:  A = an error code
000000r 4               ;   Result: Prints out a carriage return, the 2-digit hex error code,
000000r 4               ;           and a description of that error, if available.
000000r 4               ;
000000r 4               ; CFFA1_OpenDir:
000000r 4               ;   Input:  None (operates on the current prefix directory)
000000r 4               ;   Result: Prepares for one or more calls to ReadDir.
000000r 4               ;
000000r 4               ; CFFA1_ReadDir:
000000r 4               ;   Setup:  You have to call OpenDir before calling ReadDir.
000000r 4               ;   Result: If no error, EntryPtr points to the next occupied directory entry.
000000r 4               ;
000000r 4               ; CFFA1_FindDirEntry:
000000r 4               ;   Input:   Filename = name to search for
000000r 4               ;   Result:  If no error, EntryPtr points at the found item's directory entry.
000000r 4               ;
000000r 4               ; CFFA1_WriteFile:
000000r 4               ;   Input:  Filename = name for new file (will be replaced if it already exists)
000000r 4               ;           Destination = starting address
000000r 4               ;           FileSize = number of bytes to write
000000r 4               ;           Filetype = type for new file
000000r 4               ;           Auxtype = auxiliary type for new file
000000r 4               ;
000000r 4               ; CFFA1_ReadFile:
000000r 4               ;   Input:  Filename = file to read into memory
000000r 4               ;           Destination = starting address ($0000 to use the file's Auxtype value)
000000r 4               ;
000000r 4               ; CFFA1_SaveBASICFile:
000000r 4               ;   Input:  Filename
000000r 4               ;
000000r 4               ; CFFA1_LoadBASICFile:
000000r 4               ;   Input:  Filename
000000r 4               ;
000000r 4               ; CFFA1_Rename:
000000r 4               ;   Input:  OldFilename = original name
000000r 4               ;           Filename = new name
000000r 4               ;
000000r 4               ; CFFA1_Delete:
000000r 4               ;   Input:  Filename = file or empty directory to delete
000000r 4               ;
000000r 4               ; CFFA1_NewDirectoryAtRoot:
000000r 4               ;   Input:  Filename = name for new directory
000000r 4               ;
000000r 4               ; CFFA1_FormatDrive:
000000r 4               ;   Input:  Filename = name for new volume
000000r 4               ;           A = drive number (always set to 0 for firmware 1.0)
000000r 4               ;           Y = $77 (just to help avoid accidental formatting)
000000r 4               ;   Result: Disk volume is erased and given the specified name.
000000r 4               ;
000000r 4               ;------------------------------------------------------------------------------
000000r 4               CFFA1_Version            = $00
000000r 4               CFFA1_Menu               = $02
000000r 4               CFFA1_DisplayError       = $04
000000r 4               
000000r 4               CFFA1_OpenDir            = $10
000000r 4               CFFA1_ReadDir            = $12
000000r 4               CFFA1_FindDirEntry       = $14
000000r 4               
000000r 4               CFFA1_WriteFile          = $20
000000r 4               CFFA1_ReadFile           = $22
000000r 4               CFFA1_SaveBASICFile      = $24
000000r 4               CFFA1_LoadBASICFile      = $26
000000r 4               CFFA1_Rename             = $28
000000r 4               CFFA1_Delete             = $2A
000000r 4               CFFA1_NewDirectoryAtRoot = $2C
000000r 4               CFFA1_FormatDrive        = $2E
000000r 4               
000000r 4               
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ; Zero-page inputs and results for API functions
000000r 4               ;
000000r 4               ; Filename and OldFilename point to strings that begin with a length byte (from
000000r 4               ; 1 to 15), and each character must have its high bit off.  For example:
000000r 4               ;
000000r 4               ;    Filename   = $80     $280: 05  48  45  4C  4C  4F
000000r 4               ;    Filename+1 = $02              'H'  'E' 'L' 'L' 'O'
000000r 4               ;------------------------------------------------------------------------------
000000r 4               Destination         = $00                   ; 2 bytes
000000r 4               Filename            = Destination+2         ; 2 bytes
000000r 4               OldFilename         = Filename+2            ; 2 bytes
000000r 4               Filetype            = OldFilename+2         ; 1 byte
000000r 4               Auxtype             = Filetype+1            ; 2 bytes
000000r 4               FileSize            = Auxtype+2             ; 2 bytes
000000r 4               EntryPtr            = FileSize+2            ; 2 bytes
000000r 4               
000000r 4               
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ;
000000r 4               ; ProDOS low-level return codes
000000r 4               ;
000000r 4               ;------------------------------------------------------------------------------
000000r 4               PRODOS_NO_ERROR      = $00    ; No error
000000r 4               PRODOS_BADCMD        = $01    ; Bad Command (not implemented)
000000r 4               PRODOS_IO_ERROR      = $27    ; I/O error
000000r 4               PRODOS_NO_DEVICE     = $28    ; No Device Connected
000000r 4               PRODOS_WRITE_PROTECT = $2B    ; Write Protected
000000r 4               PRODOS_BADBLOCK      = $2D    ; Invalid block number requested
000000r 4               PRODOS_OFFLINE       = $2F    ; Device off-line
000000r 4               ;
000000r 4               ; High-level return codes
000000r 4               ;
000000r 4               eBadPathSyntax       = $40
000000r 4               eDirNotFound         = $44
000000r 4               eFileNotFound        = $46
000000r 4               eDuplicateFile       = $47
000000r 4               eVolumeFull          = $48
000000r 4               eDirectoryFull       = $49
000000r 4               eFileFormat          = $4A
000000r 4               eBadStrgType         = $4B
000000r 4               eFileLocked          = $4E
000000r 4               eNotProDOS           = $52
000000r 4               eBadBufferAddr       = $56
000000r 4               eBakedBitmap         = $5A
000000r 4               eUnknownBASICFormat  = $FE
000000r 4               eUnimplemented       = $FF
000000r 4               
000000r 4               
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ; ProDOS directory entry structure offsets
000000r 4               ;------------------------------------------------------------------------------
000000r 4               oFiletype           = $10
000000r 4               oKeyBlock           = $11
000000r 4               oBlockCount         = $13
000000r 4               oFileSize           = $15
000000r 4               oCreateDateTime     = $18
000000r 4               oVersion            = $1C
000000r 4               oMinVersion         = $1D
000000r 4               oAccess             = $1E
000000r 4               oAuxtype            = $1F
000000r 4               oModDateTime        = $21
000000r 4               oHeaderPointer      = $25
000000r 4               
000000r 4               oDirLinkPrevious    = $00
000000r 4               oDirLinkNext        = $02
000000r 4               oVolStorageType     = $04
000000r 4               oVolVersion         = $20
000000r 4               oVolAccess          = $22
000000r 4               oVolEntryLength     = $23
000000r 4               oVolEntriesPerBlock = $24
000000r 4               oVolFileCount       = $25
000000r 4               oVolBitmapNumber    = $27
000000r 4               oVolTotalBlocks     = $29
000000r 4               
000000r 4               ;
000000r 4               ; ProDOS Storage types
000000r 4               ;
000000r 4               kSeedling           = $10
000000r 4               kSapling            = $20
000000r 4               kTree               = $30
000000r 4               kExtended           = $50
000000r 4               kDirectory          = $D0
000000r 4               kSubdirHeader       = $E0
000000r 4               kVolume             = $F0
000000r 4               kStorageTypeMask    = $F0
000000r 4               
000000r 4               ;
000000r 4               ; Filetypes
000000r 4               ;
000000r 4               kFiletypeText       = $04
000000r 4               kFiletypeBinary     = $06
000000r 4               kFiletypeDirectory  = $0F
000000r 4               kFiletypeBASIC1     = $F1
000000r 4               kFiletypeBAS        = $FC
000000r 4               kFiletypeSYS        = $FF
000000r 4               
000000r 4               ;------------------------------------------------------------------------------
000000r 4               ; end of CFFA1_API.s
000000r 4               ;------------------------------------------------------------------------------
000000r 4               
000000r 4               
000000r 3               
000000r 3                 ESC = $1B        ; Escape character
000000r 3               
000000r 3                 IN    = $0200    ; Buffer used by GetLine. From $0200 through $027F (shared with Woz Mon)
000000r 3               
000000r 3                 SaveZeroPage    = $9140      ; Routines in CFFA1 firmware
000000r 3                 RestoreZeroPage = $9135
000000r 3               
000000r 3               ; Read key from keyboard.
000000r 3               MONRDKEY:
000000r 3  20 rr rr             JSR READ_BYTE
000003r 3                       ;;LDA     $D011           ; keyboard status
000003r 3                       ;;BPL     MONRDKEY        ; branch until key pressed
000003r 3                       ;;LDA     $D010           ; keyboard data
000003r 3  60                   RTS
000004r 3               
000004r 3               ; Check for presence of CFFA1 by testing for two ID bytes
000004r 3               CheckForCFFA1:
000004r 3  AD DC AF             LDA     CFFA1_ID1               ; First CFFA1 ID byte
000007r 3  C9 CF                CMP     #$CF                    ; Should contain $CF
000009r 3  D0 08                BNE     NoCFFA1
00000Br 3  AD DD AF             LDA     CFFA1_ID2               ; Second CFFA1 ID byte
00000Er 3  C9 FA                CMP     #$FA                    ; Should contain $FA
000010r 3  D0 01                BNE     NoCFFA1
000012r 3  60                   RTS
000013r 3               NoCFFA1:
000013r 3  A2 rr                LDX     #<NoCFFA1String         ; Display error that no CFFA1 is present.
000015r 3  A0 rr                LDY     #>NoCFFA1String
000017r 3  20 rr rr             JSR     PrintString
00001Ar 3  68                   PLA                             ; pop return address so we return to caller of calling routine
00001Br 3  68                   PLA
00001Cr 3  60            	RTS
00001Dr 3               
00001Dr 3               ; Implementation of LOAD using a CFFA1 flash interface if present.
00001Dr 3               LOAD:
00001Dr 3  60                   RTS
00001Er 3               ; Implementation of SAVE using a CFFA1 flash interface if present.
00001Er 3               SAVE:
00001Er 3  60                   RTS
00001Fr 3               ; Print a string
00001Fr 3               ; Pass address of string in X (low) and Y (high).
00001Fr 3               ; String must be terminated in a null.
00001Fr 3               ; Cannot be longer than 256 characters.
00001Fr 3               ; Registers changed: A, Y
00001Fr 3               ;
00001Fr 3               PrintString:
00001Fr 3  86 AE                STX TEMP1
000021r 3  84 AF                STY TEMP1+1
000023r 3  A0 00                LDY #0
000025r 3  B1 AE        @loop:  LDA (TEMP1),Y
000027r 3  F0 06                BEQ done
000029r 3  20 rr rr             JSR MONCOUT
00002Cr 3  C8                   INY
00002Dr 3  D0 F6                BNE @loop       ; if doesn't branch, string is too long
00002Fr 3  60           done:   RTS
000030r 3               
000030r 3               ; String input routine.
000030r 3               ; Enter characters from the keyboard terminated in <Return> or <ESC>.
000030r 3               ; Characters are echoed.
000030r 3               ; Can be up to 127 characters.
000030r 3               ; Returns:
000030r 3               ;   Length stored at IN (doesn't include zero byte).
000030r 3               ;   Characters stored starting at IN+1 ($0201-$027F, same as Woz Monitor)
000030r 3               ;   String is terminated in a 0 byte.
000030r 3               ;   Carry set if user hit <Esc>, clear if used <Enter> or max string length reached.
000030r 3               ; Registers changed: A, X
000030r 3               GetLine:
000030r 3  A2 00                LDX  #0                 ; Initialize index into buffer
000032r 3               loop:
000032r 3  20 rr rr             JSR  MONRDKEY		; Get character from keyboard
000035r 3  C9 0D                CMP  #CR                ; <Enter> key pressed?
000037r 3  F0 0E                BEQ  EnterPressed       ; If so, handle it
000039r 3  C9 1B                CMP  #ESC               ; <Esc> key pressed?
00003Br 3  F0 0B                BEQ  EscapePressed      ; If so, handle it
00003Dr 3                       ;JSR  MONCOUT            ; Echo the key pressed
00003Dr 3  9D 01 02             STA  IN+1,X             ; Store character in buffer (skip first length byte)
000040r 3  E8                   INX                     ; Advance index into buffer
000041r 3  E0 7E                CPX  #$7E               ; Buffer full?
000043r 3  F0 02                BEQ  EnterPressed       ; If so, return as if <Enter> was pressed
000045r 3  D0 EB                BNE  loop               ; Always taken
000047r 3               EnterPressed:
000047r 3  18                   CLC                     ; Clear carry to indicate <Enter> pressed and fall through
000048r 3               EscapePressed:
000048r 3  A9 00                LDA  #0
00004Ar 3  9D 01 02             STA  IN+1,X             ; Store 0 at end of buffer
00004Dr 3  8E 00 02             STX  IN                 ; Store length of string
000050r 3  60                   RTS                     ; Return
000051r 3               
000051r 3               NoCFFA1String:
000051r 3  54 45 4D 20    .byte "TEM ALGUM ERRO NESSE CARAI",CR,0
000055r 3  41 4C 47 55  
000059r 3  4D 20 45 52  
00006Dr 3               
00006Dr 2               .include "bios.s"
00006Dr 3               ;***********************************************************************
00006Dr 3               ; SERIAL 16c550 DRIVER
00006Dr 3               ;
00006Dr 3               ; Version.: 0.0.5
00006Dr 3               ;
00006Dr 3               ; The verion 0.0.3 does not has the change of read and write bytes to support msbasic.
00006Dr 3               ;  0.0.5:
00006Dr 3               ;         Changed the variables declaration to (var: .res X)
00006Dr 3               ;         Included flag BASIC
00006Dr 3               ;         Changed separator for dump from XXXX>XXXX to XXXX.XXXX the same wozmon
00006Dr 3               ;         Changed the return of dump to verify flag BASIC
00006Dr 3               ;         Fixed bug turn flagecho was RTS but must be jmp nextchar
00006Dr 3               ;
00006Dr 3               
00006Dr 3               .setcpu "6502"
00006Dr 3               
00006Dr 3               
00006Dr 3               .zeropage
0000C7  3               .org ZP_START5
0000E0  3  xx           RACC: .res 1     ;= $30               ;;: .res 1
0000E1  3               ;RPHY     ;= $31               ;;: .res 1
0000E1  3               ;RPHX     ;= $32               ;;: .res 1
0000E1  3  xx           MSGL: .res 1     ;= $33
0000E2  3  xx           MSGH: .res 1     ;= $34
0000E3  3  xx           TMP:     .res 1 ;= $35              ;;TEMPORARY REGISTERS
0000E4  3  xx           TMP1:    .res 1 ;= $36
0000E5  3  xx           TMP2:    .res 1 ;= $37
0000E6  3  xx           LAST_CMD:.res 1 ;= $38
0000E7  3  xx           ADDR1L:  .res 1 ;= $39          ; Digito 4 A do hexa 0xABCD
0000E8  3  xx           ADDR1H:  .res 1 ;= $3A          ; Digito 3 B do hexa 0xABCD
0000E9  3  xx           ADDR2L:  .res 1 ;= $3B          ; Digito 2 C do hexa 0xABCD
0000EA  3  xx           ADDR2H:  .res 1 ;= $3C          ; Digito 1 D do hexa 0xABCD
0000EB  3  xx           BSZ:     .res 1 ;= $3D          ; string size in buffer
0000EC  3  xx           ERRO:    .res 1 ;= $3E          ; CODIGO DO ERRO
0000ED  3  xx           COUNTER: .res 1 ;= $3F
0000EE  3  xx           FLAGBASIC: .res 1 ; Flag que indica que o biosmon foi chamado pelo basic
0000EF  3               ;FLAGECHO:  .res 1 ; Flag que indica se deve fazer echo ou não do caracter em Acc
0000EF  3               
0000EF  3               .segment "BIOS"
000000r 3               
000000r 3               BIN      = $200          ; Buffer size = 128 bytes
000000r 3               
000000r 3               ;*************************************************************
000000r 3               ;*************************************************************
000000r 3               ; RESET
000000r 3               ;*************************************************************
000000r 3               ;*************************************************************
000000r 3               
000000r 3               RESET:
000000r 3  78           	            SEI					; No interrupt
000001r 3  D8           	            CLD					; Set decimal
000002r 3  A2 FE        	            LDX #$FE 			; Set stack pointer
000004r 3  9A           	            TXS
000005r 3               
000005r 3                               ;;Initializing some variables
000005r 3  A9 00                        LDA     #$00
000007r 3  85 E7                        STA     ADDR1L
000009r 3  85 E8                        STA     ADDR1H
00000Br 3  85 E9                        STA     ADDR2L
00000Dr 3  85 EA                        STA     ADDR2H
00000Fr 3                               ;STA     FLAGECHO
00000Fr 3  85 EE                        STA     FLAGBASIC
000011r 3               
000011r 3  20 rr rr                     JSR     INITUART
000014r 3  A9 rr                        LDA     #<MSG1
000016r 3  85 E1                        STA     MSGL
000018r 3  A9 rr                        LDA     #>MSG1
00001Ar 3  85 E2                        STA     MSGH
00001Cr 3  20 rr rr                     JSR     SHWMSG
00001Fr 3               NEXT_CHAR:
00001Fr 3  A9 A5                        LDA     #$A5
000021r 3  C5 EE                        CMP     FLAGBASIC
000023r 3  F0 2F                        BEQ     RETURN_BASIC
000025r 3  A9 0D                        LDA     #$0D
000027r 3  20 rr rr                     JSR     WRITE_BYTE
00002Ar 3  A9 3E                        LDA     #'>'
00002Cr 3  20 rr rr                     JSR     WRITE_BYTE
00002Fr 3               
00002Fr 3  20 rr rr                     JSR     READ_BYTE
000032r 3  20 rr rr                     JSR     WRITE_BYTE
000035r 3  C9 44                        CMP     #'D'            ;Dump de memoria format: ADDR:ADDR
000037r 3  F0 0F                        BEQ     TEMP_D
000039r 3  C9 4D                        CMP     #'M'            ;Put byte into memory address
00003Br 3  F0 0E                        BEQ     TEMP_M
00003Dr 3  C9 52                        CMP     #'R'            ;Run programa na format: ADDR R
00003Fr 3  F0 0D                        BEQ     TEMP_R
000041r 3  C9 48                        CMP     #'H'            ;Show help
000043r 3  F0 0C                        BEQ     TEMP_H
000045r 3  4C rr rr                     JMP     NEXT_CHAR
000048r 3  4C rr rr     TEMP_D:         JMP     DIGITOU_D
00004Br 3  4C rr rr     TEMP_M:         JMP     DIGITOU_M
00004Er 3  4C rr rr     TEMP_R:         JMP     DIGITOU_R
000051r 3  4C rr rr     TEMP_H:         JMP     DIGITOU_H
000054r 3               
000054r 3               
000054r 3               RETURN_BASIC:
000054r 3  A9 00                        LDA     #$0
000056r 3  C5 EE                        CMP     FLAGBASIC
000058r 3  F0 C5                        BEQ     NEXT_CHAR
00005Ar 3  60                           RTS
00005Br 3               
00005Br 3               DIGITOU_S:
00005Br 3  85 E6                        STA     LAST_CMD
00005Dr 3  A9 rr                        LDA     #<MSG2
00005Fr 3  85 E1                        STA     MSGL
000061r 3  A9 rr                        LDA     #>MSG2
000063r 3  85 E2                        STA     MSGH
000065r 3  20 rr rr                     JSR     SHWMSG
000068r 3  20 rr rr                     JSR     GETLINE
00006Br 3  A9 00                        LDA     #<BIN
00006Dr 3  85 E1                        STA     MSGL
00006Fr 3  A9 02                        LDA     #>BIN
000071r 3  85 E2                        STA     MSGH
000073r 3  20 rr rr                     JSR     SHWMSG
000076r 3  60                           RTS
000077r 3  4C rr rr                     JMP     NEXT_CHAR
00007Ar 3               
00007Ar 3               MSG_BIOSMON:
00007Ar 3  A9 rr                        LDA     #<MSG3
00007Cr 3  85 E1                        STA     MSGL
00007Er 3  A9 rr                        LDA     #>MSG3
000080r 3  85 E2                        STA     MSGH
000082r 3  20 rr rr                     JSR     SHWMSG
000085r 3  4C rr rr                     JMP     DIGITOU_INIT
000088r 3               
000088r 3               MSG_BASIC:
000088r 3  A9 rr                        LDA     #<MSG31
00008Ar 3  85 E1                        STA     MSGL
00008Cr 3  A9 rr                        LDA     #>MSG31
00008Er 3  85 E2                        STA     MSGH
000090r 3  20 rr rr                     JSR     SHWMSG
000093r 3  4C rr rr                     JMP     DIGITOU_INIT
000096r 3               
000096r 3               DIGITOU_D:
000096r 3  85 E6                        STA     LAST_CMD
000098r 3  A5 EE                        LDA     FLAGBASIC
00009Ar 3  C9 A5                        CMP     #$A5
00009Cr 3  F0 EA                        BEQ     MSG_BASIC
00009Er 3  C9 00                        CMP     #$00
0000A0r 3  F0 D8                        BEQ     MSG_BIOSMON
0000A2r 3               DIGITOU_INIT:
0000A2r 3  A9 3E                        LDA     #'>'
0000A4r 3  20 rr rr                     JSR     WRITE_BYTE
0000A7r 3  20 rr rr                     JSR     GETLINE
0000AAr 3                               ;Get addr from
0000AAr 3  A0 00                        LDY     #$0
0000ACr 3  B9 00 02                     LDA     BIN,Y
0000AFr 3  20 rr rr                     JSR     WRITE_BYTE
0000B2r 3  C9 51                        CMP     #'Q'
0000B4r 3  F0 9E                        BEQ     RETURN_BASIC
0000B6r 3                               ;CMP     #'q'
0000B6r 3                               ;LDY     #$00
0000B6r 3  F0 9C                        BEQ     RETURN_BASIC
0000B8r 3  20 rr rr                     JSR     CONV_ADDR_TO_HEX
0000BBr 3  A6 E4                        LDX     TMP1
0000BDr 3  A4 E5                        LDY     TMP2
0000BFr 3  20 rr rr                     JSR     SWAP_XY
0000C2r 3  86 E7                        STX     ADDR1L
0000C4r 3  84 E8                        STY     ADDR1H
0000C6r 3               
0000C6r 3  A0 04                        LDY     #$04
0000C8r 3  B9 00 02                     LDA     BIN,Y
0000CBr 3  C9 2E                        CMP     #$2E
0000CDr 3  D0 49                        BNE     DIGITOU_D_SHOWMEM
0000CFr 3               
0000CFr 3                               ;Get addr to
0000CFr 3  A0 05                        LDY     #$05
0000D1r 3  20 rr rr                     JSR     CONV_ADDR_TO_HEX
0000D4r 3  A6 E4                        LDX     TMP1
0000D6r 3  A4 E5                        LDY     TMP2
0000D8r 3  20 rr rr                     JSR     SWAP_XY
0000DBr 3  86 E9                        STX     ADDR2L
0000DDr 3  84 EA                        STY     ADDR2H
0000DFr 3                               ;JSR     PRINT_ADDR_HEXA
0000DFr 3  A9 08                        LDA     #$08
0000E1r 3  85 E5                        STA     TMP2
0000E3r 3  A2 08        LINHA:          LDX     #$08
0000E5r 3  A9 0D                        LDA     #$0D
0000E7r 3  20 rr rr                     JSR     WRITE_BYTE
0000EAr 3  A5 E8                        LDA     ADDR1H
0000ECr 3  20 rr rr                     JSR     PRBYTE
0000EFr 3  A5 E7                        LDA     ADDR1L
0000F1r 3  20 rr rr                     JSR     PRBYTE
0000F4r 3  A9 20                        LDA     #' '
0000F6r 3  20 rr rr                     JSR     WRITE_BYTE
0000F9r 3               DIGITOU_D_WORK:
0000F9r 3                               ;addressing mode of 65C02
0000F9r 3                               ;LDA     (ADDR1L)
0000F9r 3                               ;addressing mode of 6502
0000F9r 3  A0 00                        LDY     #$0
0000FBr 3                               ;to work ADDR1L must be in zeropage
0000FBr 3                               ;and register must be Y
0000FBr 3  B1 E7                        LDA     (ADDR1L),Y
0000FDr 3                               ;******************
0000FDr 3  20 rr rr                     JSR     PRBYTE
000100r 3  A9 20                        LDA     #' '
000102r 3  20 rr rr                     JSR     WRITE_BYTE
000105r 3  20 rr rr                     JSR     INC_ADDR
000108r 3  20 rr rr                     JSR     COMP_ADDR
00010Br 3  F0 EC                        BEQ     DIGITOU_D_WORK
00010Dr 3  B0 06                        BCS     DIGITOU_D_FIM
00010Fr 3                               ;JSR     PRINT_ADDR_HEXA
00010Fr 3                               ;JSR     READ_BYTE
00010Fr 3  CA                           DEX
000110r 3  F0 D1                        BEQ     LINHA
000112r 3  4C rr rr                     JMP     DIGITOU_D_WORK
000115r 3               DIGITOU_D_FIM:
000115r 3  4C rr rr                     JMP     NEXT_CHAR
000118r 3               DIGITOU_D_SHOWMEM:
000118r 3  A0 04                        LDY     #$04
00011Ar 3  B9 00 02                     LDA     BIN,Y
00011Dr 3  C9 3A                        CMP     #$3A
00011Fr 3  F0 16                        BEQ     DIGITOU_D_SHOWMEM_FIM
000121r 3  A5 E8                        LDA     ADDR1H
000123r 3  20 rr rr                     JSR     PRBYTE
000126r 3  A5 E7                        LDA     ADDR1L
000128r 3  20 rr rr                     JSR     PRBYTE
00012Br 3  A9 20                        LDA     #' '
00012Dr 3  20 rr rr                     JSR     WRITE_BYTE
000130r 3                               ;addressing mode of 65C02
000130r 3                               ;LDA     (ADDR1L)
000130r 3                               ;addressing mode of 6502
000130r 3  A0 00                        LDY     #$0
000132r 3  B1 E7                        LDA     (ADDR1L),Y
000134r 3  20 rr rr                     JSR     PRBYTE
000137r 3               DIGITOU_D_SHOWMEM_FIM:
000137r 3  4C rr rr                     JMP     NEXT_CHAR
00013Ar 3               
00013Ar 3               DIGITOU_M:
00013Ar 3  85 E6                        STA     LAST_CMD
00013Cr 3  A9 rr                        LDA     #<MSG7
00013Er 3  85 E1                        STA     MSGL
000140r 3  A9 rr                        LDA     #>MSG7
000142r 3  85 E2                        STA     MSGH
000144r 3  20 rr rr                     JSR     SHWMSG
000147r 3  20 rr rr                     JSR     GETLINE
00014Ar 3                               ;Get addr from
00014Ar 3  A0 00                        LDY     #$00
00014Cr 3  20 rr rr                     JSR     CONV_ADDR_TO_HEX
00014Fr 3  A6 E4                        LDX     TMP1
000151r 3  A4 E5                        LDY     TMP2
000153r 3  20 rr rr                     JSR     SWAP_XY
000156r 3  86 E7                        STX     ADDR1L
000158r 3  84 E8                        STY     ADDR1H
00015Ar 3               
00015Ar 3                               ;VERIFICAR SE O COMANDO É :
00015Ar 3  A0 04                        LDY     #$04
00015Cr 3  B9 00 02                     LDA     BIN,Y
00015Fr 3  C9 3A                        CMP     #$3A
000161r 3  D0 19                        BNE     DIGITOU_M_FIM
000163r 3               
000163r 3  A0 05                        LDY     #$05
000165r 3  B9 00 02                     LDA     BIN,Y
000168r 3  20 rr rr                     JSR     ROL_LEFT
00016Br 3  85 E4                        STA     TMP1
00016Dr 3  C8                           INY
00016Er 3  B9 00 02                     LDA     BIN,Y
000171r 3  20 rr rr                     JSR     NO_ROL_RIGHT
000174r 3  05 E4                        ORA     TMP1
000176r 3  85 E4                        STA     TMP1
000178r 3                               ;addressing mode of 65C02
000178r 3                               ;STA     (ADDR1L)
000178r 3                               ;addressing mode of 6502
000178r 3  A0 00                        LDY     #$0
00017Ar 3  91 E7                        STA     (ADDR1L),Y
00017Cr 3               
00017Cr 3               DIGITOU_M_FIM:
00017Cr 3  4C rr rr                     JMP     NEXT_CHAR
00017Fr 3               
00017Fr 3               DIGITOU_H:
00017Fr 3  85 E6                        STA     LAST_CMD
000181r 3  A9 rr                        LDA     #<HELP
000183r 3  85 E1                        STA     MSGL
000185r 3  A9 rr                        LDA     #>HELP
000187r 3  85 E2                        STA     MSGH
000189r 3  20 rr rr                     JSR     SHWMSG
00018Cr 3  4C rr rr                     JMP     NEXT_CHAR
00018Fr 3               
00018Fr 3               DIGITOU_R:
00018Fr 3  85 E6                        STA     LAST_CMD
000191r 3  A9 rr                        LDA     #<MSG4
000193r 3  85 E1                        STA     MSGL
000195r 3  A9 rr                        LDA     #>MSG4
000197r 3  85 E2                        STA     MSGH
000199r 3  20 rr rr                     JSR     SHWMSG
00019Cr 3  20 rr rr                     JSR     DIGITOU_S
00019Fr 3  A0 00                        LDY     #$00
0001A1r 3  20 rr rr                     JSR     CONV_ADDR_TO_HEX
0001A4r 3  A6 E4                        LDX     TMP1
0001A6r 3  A4 E5                        LDY     TMP2
0001A8r 3  20 rr rr                     JSR     SWAP_XY
0001ABr 3  86 E7                        STX     ADDR1L
0001ADr 3  84 E8                        STY     ADDR1H
0001AFr 3                               ;JSR     PRINT_ADDR_HEXA
0001AFr 3                               ;DELISGA O ECHO
0001AFr 3                               ;LDA     FLAGECHO
0001AFr 3                               ;EOR     #$FF
0001AFr 3                               ;STA     FLAGECHO
0001AFr 3               
0001AFr 3  6C E7 00                     JMP     (ADDR1L)
0001B2r 3  4C rr rr                     JMP     NEXT_CHAR
0001B5r 3               SWAP_XY:
0001B5r 3  84 E3                        STY     TMP     ; Y 2 M
0001B7r 3  8A                           TXA             ; X 2 A
0001B8r 3  A8                           TAY             ; A 2 Y
0001B9r 3  A6 E3                        LDX     TMP     ; M 2 X
0001BBr 3  60                           RTS
0001BCr 3               
0001BCr 3               
0001BCr 3               ROL_LEFT:
0001BCr 3  20 rr rr                     JSR     CONV_HEX_1DIG
0001BFr 3  90 0F                        BCC     CONV_HEX_4DIG_FIM
0001C1r 3  2A                           ROL
0001C2r 3  2A                           ROL
0001C3r 3  2A                           ROL
0001C4r 3  2A                           ROL
0001C5r 3  29 F0                        AND     #$F0
0001C7r 3  60                           RTS
0001C8r 3               NO_ROL_RIGHT:
0001C8r 3  20 rr rr                     JSR     CONV_HEX_1DIG
0001CBr 3  90 03                        BCC     CONV_HEX_4DIG_FIM
0001CDr 3  29 0F                        AND     #$0F
0001CFr 3  60                           RTS
0001D0r 3               CONV_HEX_4DIG_FIM:
0001D0r 3  A9 rr                        LDA     #<MSG6
0001D2r 3  85 E1                        STA     MSGL
0001D4r 3  A9 rr                        LDA     #>MSG6
0001D6r 3  85 E2                        STA     MSGH
0001D8r 3  20 rr rr                     JSR     SHWMSG
0001DBr 3  A9 01                        LDA     #$01
0001DDr 3  85 EC                        STA     ERRO
0001DFr 3  18                           CLC
0001E0r 3  60                           RTS
0001E1r 3               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0001E1r 3               ;CONV_ADDR_TO_HEX:
0001E1r 3               ;
0001E1r 3               CONV_ADDR_TO_HEX:
0001E1r 3                               ;;Dig 4
0001E1r 3  B9 00 02                     LDA     BIN,Y
0001E4r 3  20 rr rr                     JSR     ROL_LEFT
0001E7r 3  85 E4                        STA     TMP1
0001E9r 3                               ;;Dig 3
0001E9r 3  C8                           INY
0001EAr 3  B9 00 02                     LDA     BIN,Y
0001EDr 3  20 rr rr                     JSR     NO_ROL_RIGHT
0001F0r 3  05 E4                        ORA     TMP1
0001F2r 3  85 E4                        STA     TMP1
0001F4r 3                               ;;Dig 2
0001F4r 3  C8                           INY
0001F5r 3  B9 00 02                     LDA     BIN,Y
0001F8r 3  20 rr rr                     JSR     ROL_LEFT
0001FBr 3  85 E3                        STA     TMP
0001FDr 3                               ;;Dig 1
0001FDr 3  C8                           INY
0001FEr 3  B9 00 02                     LDA     BIN,Y
000201r 3  20 rr rr                     JSR     NO_ROL_RIGHT
000204r 3  05 E3                        ORA     TMP
000206r 3  85 E5                        STA     TMP2
000208r 3               
000208r 3  38                           SEC
000209r 3  60                           RTS
00020Ar 3               
00020Ar 3               ;*******************************************
00020Ar 3               ;CONV_HEX_1DIG:
00020Ar 3               ;Parameter: A digit to be converted
00020Ar 3               ;Return...: A digit converted
00020Ar 3               CONV_HEX_1DIG:
00020Ar 3  C9 30                        CMP     #$30
00020Cr 3  90 18                        BCC     CONV_HEX_1DIG_FIM
00020Er 3  C9 3A                        CMP     #$3A
000210r 3  90 0F                        BCC     DIG_0_A_9
000212r 3  C9 41                        CMP     #$41
000214r 3  B0 02                        BCS     DIG_A_TO_Z
000216r 3                               ;CARACTER PODE SER UM DESSES : ; < = > ? @
000216r 3  18                           CLC     ;CLEAR CARRY FLAG DIG NOT CONVERTED
000217r 3  60                           RTS
000218r 3               DIG_A_TO_Z:
000218r 3  C9 47                        CMP     #$47
00021Ar 3  B0 0A                        BCS     CONV_HEX_1DIG_FIM
00021Cr 3  18                           CLC
00021Dr 3  E9 36                        SBC     #$36
00021Fr 3  38                           SEC     ;SET CARRY FLAG DIG CONVERTED
000220r 3  60                           RTS
000221r 3               DIG_0_A_9:
000221r 3  18                           CLC
000222r 3  E9 2F                        SBC     #$2F
000224r 3  38                           SEC     ;SET CARRY FLAG DIG CONVERTED
000225r 3  60                           RTS
000226r 3               CONV_HEX_1DIG_FIM:
000226r 3  18                           CLC
000227r 3  60                           RTS
000228r 3               ;********************************************
000228r 3               ;Print 4 digits hexadecimal
000228r 3               PRINT_ADDR_HEXA:
000228r 3  A9 5B                        LDA     #'['
00022Ar 3  20 rr rr                     JSR     WRITE_BYTE
00022Dr 3  A5 E7                        LDA     ADDR1L
00022Fr 3  20 rr rr                     JSR     PRBYTE
000232r 3  A5 E8                        LDA     ADDR1H
000234r 3  20 rr rr                     JSR     PRBYTE
000237r 3  A5 E6                        LDA     LAST_CMD
000239r 3  C9 44                        CMP     #'D'
00023Br 3  D0 0F                        BNE     PRINT_ADDR_HEXA_FIM
00023Dr 3  A9 2E                        LDA     #'.'
00023Fr 3  20 rr rr                     JSR     WRITE_BYTE
000242r 3  A5 E9                        LDA     ADDR2L
000244r 3  20 rr rr                     JSR     PRBYTE
000247r 3  A5 EA                        LDA     ADDR2H
000249r 3  20 rr rr                     JSR     PRBYTE
00024Cr 3               PRINT_ADDR_HEXA_FIM:
00024Cr 3  A9 5D                        LDA     #']'
00024Er 3  20 rr rr                     JSR     WRITE_BYTE
000251r 3  60                           RTS
000252r 3               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000252r 3  A0 00        GETLINE:        LDY     #$00
000254r 3  20 rr rr     GETLINE1:       JSR     READ_BYTE
000257r 3  20 rr rr                     JSR     WRITE_BYTE
00025Ar 3  99 00 02                     STA     BIN,Y
00025Dr 3  C8                           INY
00025Er 3  C9 0D                        CMP     #$0D
000260r 3  D0 F2                        BNE     GETLINE1
000262r 3  A9 00                        LDA     #$00
000264r 3  99 00 02                     STA     BIN,Y
000267r 3  84 EB                        STY     BSZ
000269r 3  60                           RTS
00026Ar 3  A0 00        SHWMSG:          LDY #$0
00026Cr 3  B1 E1        SMSG:            LDA (MSGL),Y
00026Er 3  F0 06                         BEQ SMDONE
000270r 3  20 rr rr                      JSR WRITE_BYTE
000273r 3  C8                            INY
000274r 3  D0 F6                         BNE SMSG
000276r 3  60           SMDONE:          RTS
000277r 3               
000277r 3  48           PRBYTE:     PHA             ;Save A for LSD.
000278r 3  4A                       LSR
000279r 3  4A                       LSR
00027Ar 3  4A                       LSR             ;MSD to LSD position.
00027Br 3  4A                       LSR
00027Cr 3  20 rr rr                 JSR PRHEX       ;Output hex digit.
00027Fr 3  68                       PLA             ;Restore A.
000280r 3  29 0F        PRHEX:      AND #$0F        ;Mask LSD for hex print.
000282r 3  09 B0                    ORA #$B0        ;Add "0".
000284r 3  C9 BA                    CMP #$BA        ;Digit?
000286r 3  90 02                    BCC ECHO        ;Yes, output it.
000288r 3  69 06                    ADC #$06        ;Add offset for letter.
00028Ar 3  48           ECHO:       PHA             ;*Save A
00028Br 3  29 7F                    AND #$7F        ;*Change to "standard ASCII"
00028Dr 3  20 rr rr                 JSR  WRITE_BYTE
000290r 3  68                       PLA             ;*Restore A
000291r 3  60                       RTS             ;*Done, over and out...
000292r 3               ;Incrementa endereco
000292r 3               INC_ADDR:
000292r 3  18                       CLC
000293r 3  A9 01                    LDA #$01
000295r 3  65 E7                    ADC ADDR1L
000297r 3  85 E7                    STA ADDR1L
000299r 3  A9 00                    LDA #$00
00029Br 3  65 E8                    ADC ADDR1H
00029Dr 3  85 E8                    STA ADDR1H
00029Fr 3  60                       RTS
0002A0r 3               ;Compara enderecos
0002A0r 3               COMP_ADDR:
0002A0r 3  A5 E8                    LDA ADDR1H
0002A2r 3  C5 EA                    CMP ADDR2H
0002A4r 3  D0 04                    BNE COMP_ADDR_FIM
0002A6r 3  A5 E7                    LDA ADDR1L
0002A8r 3  C5 E9                    CMP ADDR2L
0002AAr 3               COMP_ADDR_FIM:
0002AAr 3  60                       RTS
0002ABr 3               
0002ABr 3               
0002ABr 3  0D 0A 50 44  MSG1:            .byte CR,LF,"PDSILVA - BIOSMON 2024 - Version: "
0002AFr 3  53 49 4C 56  
0002B3r 3  41 20 2D 20  
0002CFr 3  30 2E 30 2E                   .byte "0.0.5",CR,0
0002D3r 3  35 0D 00     
0002D6r 3  0D 49 6E 70  MSG2:            .byte CR,"Input Addr: ",CR,0
0002DAr 3  75 74 20 41  
0002DEr 3  64 64 72 3A  
0002E5r 3  0D 44 75 6D  MSG3:            .byte CR,"Dump Mem. Addr: Fmt XXXX.XXXX or XXXX:",CR,0
0002E9r 3  70 20 4D 65  
0002EDr 3  6D 2E 20 41  
00030Er 3  0D 44 75 6D  MSG31:           .byte CR,"Dump Addr:XXXX.XXXX - XXXX: or Q to return to basic",CR,0
000312r 3  70 20 41 64  
000316r 3  64 72 3A 58  
000344r 3  0D 52 75 6E  MSG4:            .byte CR,"Run program in Addr: Format abcd",CR,0
000348r 3  20 70 72 6F  
00034Cr 3  67 72 61 6D  
000367r 3  0D 45 58 45  MSG5:            .byte CR,"EXECUTADO",CR,0
00036Br 3  43 55 54 41  
00036Fr 3  44 4F 0D 00  
000373r 3  0D 48 65 78  MSG6:            .byte CR,"Hex conv. error",CR,0
000377r 3  20 63 6F 6E  
00037Br 3  76 2E 20 65  
000385r 3  0D 50 6F 6B  MSG7:            .byte CR,"Poke: Fmt addr:dt",CR,0
000389r 3  65 3A 20 46  
00038Dr 3  6D 74 20 61  
000399r 3  0D 48 65 6C  HELP:            .byte CR,"Help BIOSMON v 0.1",CR,LF
00039Dr 3  70 20 42 49  
0003A1r 3  4F 53 4D 4F  
0003AEr 3  43 6F 6D 6D                   .byte "Commands:",CR
0003B2r 3  61 6E 64 73  
0003B6r 3  3A 0D        
0003B8r 3  20 20 20 20                   .byte "         S - Put data into buffer",CR
0003BCr 3  20 20 20 20  
0003C0r 3  20 53 20 2D  
0003DAr 3  20 20 20 20                   .byte "         D - Dump memory",CR
0003DEr 3  20 20 20 20  
0003E2r 3  20 44 20 2D  
0003F3r 3  20 20 20 20                   .byte "         M - Poke",CR
0003F7r 3  20 20 20 20  
0003FBr 3  20 4D 20 2D  
000405r 3  20 20 20 20                   .byte "         R - Run program",CR
000409r 3  20 20 20 20  
00040Dr 3  20 52 20 2D  
00041Er 3  20 20 20 20                   .byte "         H - Show help",CR,LF,0
000422r 3  20 20 20 20  
000426r 3  20 48 20 2D  
000437r 3               
000437r 3               ;Used just for test of run cmd.
000437r 3               
000437r 3               OLD_WOZ:
000437r 3  A9 rr                        LDA     #<MSG5
000439r 3  85 E1                        STA     MSGL
00043Br 3  A9 rr                        LDA     #>MSG5
00043Dr 3  85 E2                        STA     MSGH
00043Fr 3  20 rr rr                     JSR     SHWMSG
000442r 3  4C rr rr                     JMP     NEXT_CHAR
000445r 3               
000445r 3               .include "drv16550.s"
000445r 4               .segment "DRV"
000000r 4               
000000r 4               ;Uart registers
000000r 4               PORT = $B000            ;;Uart address
000000r 4               R_RX = $00    ;;receiver buffer register (read only)
000000r 4               R_TX = $00    ;;transmitter holding register (write only)
000000r 4               RDLL = $00    ;;divisor latch LSB (if DLAB=1)
000000r 4               RDLH = $01    ;;divisor latch HSB (if DLAB=1)
000000r 4               RIER = $01    ;;interrupt enable register
000000r 4               RIIR = $02    ;;interrupt identification register
000000r 4               RFCR = $02    ;;FIFO control register
000000r 4               RLCR = $03    ;;line control register
000000r 4               RMCR = $04    ;;modem control register
000000r 4               RLSR = $05    ;;line status register
000000r 4               RMSR = $06    ;;modem status register
000000r 4               RSCR = $07	;;scratch register
000000r 4               
000000r 4               ; Constants
000000r 4               .if .not .def(CR)
000000r 4               	CR  = $0D ; Carriage Return
000000r 4               .endif
000000r 4               .if .not .def(LF)
000000r 4               	LF  = $0A ; Line feed
000000r 4               .endif
000000r 4               .if .not .def(Q)
000000r 4               	Q 		= $75
000000r 4               .endif
000000r 4               .if .not .def(T1)
000000r 4               	T1		= $76
000000r 4               .endif
000000r 4               
000000r 4               DIV_4800_LO   = 24
000000r 4               DIV_4800_HI   = 0
000000r 4               DIV_9600_LO   = 12
000000r 4               DIV_9600_HI   = 0
000000r 4               DIV_19200_LO  = 6
000000r 4               DIV_19200_HI  = 0
000000r 4               DIV_115200_LO = 1
000000r 4               DIV_115200_HI = 0
000000r 4               POLLED_MODE   = %00000000
000000r 4               LCR_8N1       = %00000011
000000r 4               DLAB          = %10000000
000000r 4               FIFO_ENABLE   = %00000111 ;%00000111
000000r 4               THR_EMPTY     = %01100000       ;;
000000r 4               
000000r 4               DATA_READY  = %00000001
000000r 4               OVERRUN_ERR = %00000010
000000r 4               PARITY_ERR  = %00000100
000000r 4               FRAMING_ERR = %00001000
000000r 4               BREAK_INT   = %00010000
000000r 4               MCR_DTR  = $01  ;dtr output
000000r 4               MCR_RTS  = $02  ;rts output
000000r 4               MCR_OUT1 = $04  ;output #1
000000r 4               MCR_OUT2 = $08  ;output #2
000000r 4               MCR_LOOP = $10  ;loop back
000000r 4               MCR_AFCE = $20  ;auto flow control enable
000000r 4               
000000r 4               
000000r 4               INITUART:
000000r 4  A9 80            LDA        #DLAB               ;set the divisor latch access bit (DLAB)
000002r 4  8D 03 B0         STA        PORT+RLCR
000005r 4  A9 0C            LDA        #DIV_9600_LO        ;store divisor low byte (9600 baud @ 1,8 MHz clock)
000007r 4  8D 00 B0         STA        PORT+RDLL
00000Ar 4  A9 00            LDA        #DIV_9600_HI        ;store divisor hi byte
00000Cr 4  8D 01 B0         STA        PORT+RDLH
00000Fr 4  A9 07            LDA        #FIFO_ENABLE        ;enable the UART FIFO
000011r 4  8D 02 B0         STA        PORT+RFCR
000014r 4  A9 00            LDA        #POLLED_MODE	       ;disable all interrupts
000016r 4  8D 01 B0         STA        PORT+RIER
000019r 4  A9 03        	LDA        #LCR_8N1            ;set 8 data bits, 1 stop bit, no parity, disable DLAB
00001Br 4  8D 03 B0         STA        PORT+RLCR
00001Er 4  A9 2B            LDA        #MCR_OUT2 + MCR_RTS + MCR_DTR + MCR_AFCE
000020r 4  8D 04 B0         STA        PORT+RMCR
000023r 4  AD 00 B0         LDA        PORT+R_RX           ;Clear RX buffer
000026r 4  60               RTS
000027r 4               
000027r 4               
000027r 4               ; A: Data read
000027r 4               ; Returns:  F = C if character read
000027r 4               ;           F = NC if no character read
000027r 4               ; FUNÇÃO BLOCANTE COM CARACTER ECHO
000027r 4               B_READ_BYTE_ECHO:
000027r 4               READ_BYTE:
000027r 4  AD 05 B0     	LDA PORT+RLSR 												    ;// check the line status register:
00002Ar 4  29 1E        	AND #(OVERRUN_ERR | PARITY_ERR | FRAMING_ERR | BREAK_INT)   ; check for errors
00002Cr 4  F0 06        	BEQ NO_ERR 												    ;// if no error bits, are set, no error
00002Er 4  AD 00 B0     	LDA PORT+R_RX
000031r 4  4C rr rr     	JMP READ_BYTE
000034r 4               NO_ERR:
000034r 4  AD 05 B0     	LDA PORT+RLSR 												    ;// reload the line status register
000037r 4  29 01        	AND #DATA_READY
000039r 4  F0 EC        	BEQ READ_BYTE   											;// if data ready is not set, loop
00003Br 4  AD 00 B0     	LDA PORT+R_RX
00003Er 4               ;ECHO CHAR
00003Er 4                   ;JSR WRITE_BYTE
00003Er 4               ;*********
00003Er 4  38           	SEC		    										;// otherwise, we have data! Load it. 				    									;// clear the carry flag to indicate no error
00003Fr 4  60           	RTS
000040r 4               										    ;// otherwise, there was an error. Clear the error byte
000040r 4               
000040r 4               ;*************************************************
000040r 4               ; A: Data to write
000040r 4               ;
000040r 4               WRITE_BYTE:
000040r 4  85 E0            STA     RACC                     ; Save A Reg
000042r 4               WAIT_FOR_THR_EMPTY:
000042r 4  AD 05 B0         LDA     PORT+RLSR           ; Get the Line Status Register
000045r 4  29 60            AND     #THR_EMPTY          ; Check for TX empty
000047r 4  F0 F9            BEQ     WAIT_FOR_THR_EMPTY 	; loop while the THR is not empty
000049r 4  A5 E0        	LDA     RACC                ;
00004Br 4  8D 00 B0     	STA     PORT+R_TX 			; send the byte
00004Er 4               ;;DELAY BETWEEN CHAR SENT
00004Er 4               
00004Er 4  A9 FF            LDA     #$FF
000050r 4  85 ED            STA     COUNTER
000052r 4               @txdelay:
000052r 4  C6 ED            DEC     COUNTER
000054r 4  D0 FC            BNE     @txdelay
000056r 4               
000056r 4  A5 E0            LDA     RACC
000058r 4  20 rr rr         JSR     WRITE_LF
00005Br 4               FIM:
00005Br 4  A5 E0            LDA     RACC                     ; Restore A Reg
00005Dr 4  60               RTS
00005Er 4               
00005Er 4               WRITE_LF:
00005Er 4  C9 0D            CMP     #$0D
000060r 4  D0 0C            BNE     WRITE_BYTE_WITH_ECHO_FIM
000062r 4                   ;;LDA     #$FF
000062r 4                   ;;CMP     FLAGECHO
000062r 4                   ;;BEQ     WRITE_BYTE_WITH_ECHO_FIM
000062r 4               @WAIT_FOR_THR_EMPTY:
000062r 4  AD 05 B0         LDA     PORT+RLSR           ; Get the Line Status Register
000065r 4  29 60            AND     #THR_EMPTY          ; Check for TX empty
000067r 4  F0 F9            BEQ     @WAIT_FOR_THR_EMPTY 	; loop while the THR is not empty
000069r 4  A9 0A            LDA     #$0A
00006Br 4  8D 00 B0     	STA     PORT+R_TX 			; send the byte
00006Er 4               WRITE_BYTE_WITH_ECHO_FIM:
00006Er 4  60               RTS
00006Fr 4               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00006Fr 4               ; READ_BYTE_NB: Read byte from UART waiting for it (NO BLOCANT) No echo
00006Fr 4               ; Registers changed: A, Y
00006Fr 4               ; Flag CARRY: Set when character ready
00006Fr 4               ;             Clear when no character ready
00006Fr 4               READ_BYTE_NB:
00006Fr 4  AD 05 B0     	LDA PORT+RLSR 												;// check the line status register:
000072r 4  29 1E        	AND #(OVERRUN_ERR | PARITY_ERR | FRAMING_ERR | BREAK_INT)   ; check for errors
000074r 4  F0 06        	BEQ @NO_ERR 												    ;// if no error bits, are set, no error
000076r 4  AD 00 B0     	LDA PORT+R_RX
000079r 4  4C rr rr     	JMP NO_CHAR
00007Cr 4               @NO_ERR:
00007Cr 4  AD 05 B0     	LDA PORT+RLSR 												    ;// reload the line status register
00007Fr 4  29 01        	AND #DATA_READY
000081r 4  F0 0B        	BEQ NO_CHAR   											;// if data ready is not set, loop
000083r 4  AD 00 B0     	LDA PORT+R_RX
000086r 4  20 rr rr         JSR     WRITE_BYTE
000089r 4  20 rr rr         JSR     ACC_DELAY
00008Cr 4  38           	SEC		    										;// otherwise, we have data! Load it. 				    									;// clear the carry flag to indicate no error
00008Dr 4  60           	RTS
00008Er 4               NO_CHAR:
00008Er 4  20 rr rr         JSR     ACC_DELAY
000091r 4  18               CLC
000092r 4  60               RTS
000093r 4               
000093r 4               ACC_DELAY:
000093r 4  48               PHA
000094r 4  A9 FF            LDA     #$FF
000096r 4  85 ED            STA     COUNTER
000098r 4               @txdelay1:
000098r 4  C6 ED            DEC     COUNTER
00009Ar 4  D0 FC            BNE     @txdelay1
00009Cr 4  68               PLA
00009Dr 4  60               RTS
00009Er 4               
00009Er 3               
00009Er 3               .segment "RESETVEC"
000000r 3               
000000r 3  00 0F                        .word   $0F00          ; NMI vector
000002r 3  rr rr                        .word   RESET          ; RESET vector
000004r 3  00 00                        .word   $0000          ; IRQ vector
000006r 3               
000006r 2               .include "mycmd.s"
000006r 3               .segment "CODE"
001B63r 3               
001B63r 3               MYCMD:
001B63r 3  A9 rr            LDA     #<MSG1
001B65r 3  85 E1            STA     MSGL
001B67r 3  A9 rr            LDA     #>MSG1
001B69r 3  85 E2            STA     MSGH
001B6Br 3  20 rr rr         JSR     SHWMSG
001B6Er 3  A9 07            LDA     #$07
001B70r 3  20 rr rr         JSR     PRBYTE
001B73r 3  60               RTS
001B74r 3               
001B74r 3               DUMP:
001B74r 3               dump:
001B74r 3                      ; LDA     FLAGECHO
001B74r 3                      ; EOR     #$FF
001B74r 3                      ; STA     FLAGECHO
001B74r 3               
001B74r 3  A9 A5                LDA     #$A5            ;MAGIC NUMBER TO INDICATE TO BIOSMON THAT IT WAS CALLED FROM BASIC
001B76r 3  85 EE                STA     FLAGBASIC
001B78r 3  20 rr rr             JSR     DIGITOU_D
001B7Br 3               
001B7Br 3                       ;LDA     FLAGECHO
001B7Br 3                       ;EOR     #$FF
001B7Br 3                       ;STA     FLAGECHO
001B7Br 3  60                   rts
001B7Cr 3               
001B7Cr 2               .endif
001B7Cr 2               
001B7Cr 2               .ifdef APPLE
001B7Cr 2               .include "apple_extra.s"
001B7Cr 2               .endif
001B7Cr 2               
001B7Cr 2               .ifdef MICROTAN
001B7Cr 2               .include "microtan_extra.s"
001B7Cr 2               .endif
001B7Cr 2               
001B7Cr 1               
