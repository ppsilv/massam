ca65 V2.18 - Ubuntu 2.19-1
Main file   : msbasic.s
Current file: msbasic.s

000000r 1               .feature force_range
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               .include "defines.s"
000000r 2               .if .def(cbmbasic1)
000000r 2               CBM1 := 1
000000r 2               .include "defines_cbm1.s"
000000r 2               .elseif .def(osi)
000000r 2               OSI := 1
000000r 2               .include "defines_osi.s"
000000r 2               .elseif .def(applesoft)
000000r 2               APPLE := 1
000000r 2               .include "defines_apple.s"
000000r 2               .elseif .def(kb9)
000000r 2               KIM := 1
000000r 2               .include "defines_kim.s"
000000r 2               .elseif .def(cbmbasic2)
000000r 2               CBM2 := 1
000000r 2               .include "defines_cbm2.s"
000000r 2               .elseif .def(kbdbasic)
000000r 2               KBD := 1
000000r 2               .include "defines_kbd.s"
000000r 2               .elseif .def(microtan)
000000r 2               MICROTAN := 1
000000r 2               .include "defines_microtan.s"
000000r 2               .elseif .def(aim65)
000000r 2               AIM65 := 1
000000r 2               .include "defines_aim65.s"
000000r 2               .elseif .def(sym1)
000000r 2               SYM1 := 1
000000r 2               .include "defines_sym1.s"
000000r 2               .elseif .def(hmc56)
000000r 2               HMC56 := 1
000000r 2               .include "defines_hmc-56.s"
000000r 3               ; configuration
000000r 3               CONFIG_2A := 1
000000r 3               
000000r 3               ;CONFIG_CBM_ALL := 1
000000r 3               
000000r 3               ;CONFIG_DATAFLG := 1
000000r 3               ;CONFIG_EASTER_EGG := 1
000000r 3               ;CONFIG_FILE := 1; support PRINT#, INPUT#, GET#, CMD
000000r 3               ;CONFIG_NO_CR := 1; terminal doesn't need explicit CRs on line ends
000000r 3               ;CONFIG_NO_LINE_EDITING := 1; support for "@", "_", BEL etc.
000000r 3               ;CONFIG_NO_READ_Y_IS_ZERO_HACK := 1
000000r 3               ;CONFIG_PEEK_SAVE_LINNUM := 1
000000r 3               CONFIG_SCRTCH_ORDER := 2
000000r 3               
000000r 3               ; zero page
000000r 3               ZP_START1 = $00
000000r 3               ZP_START2 = $0A
000000r 3               ZP_START3 = $60
000000r 3               ZP_START4 = $6B
000000r 3               
000000r 3               ; extra/override ZP variables
000000r 3               ;CURDVC			:= $000E
000000r 3               ;TISTR			:= $008D
000000r 3               ;Z96			:= $0096
000000r 3               ;POSX			:= $00C6
000000r 3               ;TXPSV			:= LASTOP
000000r 3               USR			:= GORESTART ; XXX
000000r 3               
000000r 3               ; inputbuffer
000000r 3               ;INPUTBUFFER     := $0200
000000r 3               
000000r 3               ; constants
000000r 3               SPACE_FOR_GOSUB := $3E
000000r 3               STACK_TOP	:= $FA
000000r 3               WIDTH		:= 40
000000r 3               WIDTH2		:= 30
000000r 3               
000000r 3               RAMSTART2	:= $0400
000000r 3               
000000r 3               ; magic memory locations
000000r 3               ;ENTROPY = $E844
000000r 3               
000000r 3               ; monitor functions
000000r 3               ;OPEN	:= $FFC0
000000r 3               ;CLOSE	:= $FFC3
000000r 3               ;CHKIN	:= $FFC6
000000r 3               ;CHKOUT	:= $FFC9
000000r 3               ;CLRCH	:= $FFCC
000000r 3               ;CHRIN	:= $FFCF
000000r 3               ;CHROUT	:= $FFD2
000000r 3               ;LOAD	:= $FFD5
000000r 3               ;SAVE	:= $FFD8
000000r 3               ;VERIFY	:= $FFDB
000000r 3               ;SYS	:= $FFDE
000000r 3               ;ISCNTC	:= $FFE1
000000r 3               ;GETIN	:= $FFE4
000000r 3               ;CLALL	:= $FFE7
000000r 3               ;LE7F3	:= $E7F3; for CBM1
000000r 3               MONCOUT	:= CHROUT
000000r 3               MONRDKEY := CHRIN
000000r 3               
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_2C
000000r 2               CONFIG_2B := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2B
000000r 2               CONFIG_2A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2A
000000r 2               CONFIG_2 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2
000000r 2               CONFIG_11A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11A
000000r 2               CONFIG_11 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11
000000r 2               CONFIG_10A := 1
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2               BYTES_FP		:= 4
000000r 2               CONFIG_SMALL_ERROR := 1
000000r 2               .else
000000r 2               BYTES_FP		:= 5
000000r 2               .endif
000000r 2               
000000r 2               .ifndef BYTES_PER_ELEMENT
000000r 2               BYTES_PER_ELEMENT := BYTES_FP
000000r 2               .endif
000000r 2               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 2               MANTISSA_BYTES	:= BYTES_FP-1
000000r 2               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 2               FOR_STACK1		:= 2*BYTES_FP+5
000000r 2               FOR_STACK2		:= BYTES_FP+4
000000r 2               
000000r 2               .ifndef MAX_EXPON
000000r 2               MAX_EXPON = 10
000000r 2               .endif
000000r 2               
000000r 2               STACK           := $0100
000000r 2               .ifndef STACK2
000000r 2               STACK2          := STACK
000000r 2               .endif
000000r 2               
000000r 2               .ifdef INPUTBUFFER
000000r 2                 .if INPUTBUFFER >= $0100
000000r 2               CONFIG_NO_INPUTBUFFER_ZP := 1
000000r 2                 .endif
000000r 2                 .if INPUTBUFFER = $0200
000000r 2               CONFIG_INPUTBUFFER_0200 := 1
000000r 2                 .endif
000000r 2               .endif
000000r 2               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 2               
000000r 2               CR=13
000000r 2               LF=10
000000r 2               
000000r 2               .ifndef CRLF_1
000000r 2               CRLF_1 := CR
000000r 2               CRLF_2 := LF
000000r 2               .endif
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               .include "macros.s"
000000r 2               ; htasc - set the hi bit on the last byte of a string for termination
000000r 2               ; (by Tom Greene)
000000r 2               .macro htasc str
000000r 2               	.repeat	.strlen(str)-1,I
000000r 2               		.byte	.strat(str,I)
000000r 2               	.endrep
000000r 2               	.byte	.strat(str,.strlen(str)-1) | $80
000000r 2               .endmacro
000000r 2               
000000r 2               ; For every token, a byte gets put into segment "DUMMY".
000000r 2               ; This way, we count up with every token. The DUMMY segment
000000r 2               ; doesn't get linked into the binary.
000000r 2               .macro init_token_tables
000000r 2                       .segment "VECTORS"
000000r 2               TOKEN_ADDRESS_TABLE:
000000r 2                       .segment "KEYWORDS"
000000r 2               TOKEN_NAME_TABLE:
000000r 2               		.segment "DUMMY"
000000r 2               DUMMY_START:
000000r 2               .endmacro
000000r 2               
000000r 2               ; optionally define token symbol
000000r 2               ; count up token number
000000r 2               .macro define_token token
000000r 2                       .segment "DUMMY"
000000r 2               		.ifnblank token
000000r 2               			token := <(*-DUMMY_START)+$80
000000r 2               		.endif
000000r 2               		.res 1; count up in any case
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword, optionally define a token symbol
000000r 2               .macro keyword key, token
000000r 2               		.segment "KEYWORDS"
000000r 2               		htasc	key
000000r 2               		define_token token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address (RTS style),
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_rts key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.word	vec-1
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address,
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_addr key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.addr	vec
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               .macro count_tokens
000000r 2                       .segment "DUMMY"
000000r 2               		NUM_TOKENS := <(*-DUMMY_START)
000000r 2               .endmacro
000000r 2               
000000r 2               .macro init_error_table
000000r 2                       .segment "ERROR"
000000r 2               ERROR_MESSAGES:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro define_error error, msg
000000r 2                       .segment "ERROR"
000000r 2               		error := <(*-ERROR_MESSAGES)
000000r 2               		htasc msg
000000r 2               .endmacro
000000r 2               
000000r 2               ;---------------------------------------------
000000r 2               ; set the MSB of every byte of a string
000000r 2               .macro asc80 str
000000r 2               	.repeat	.strlen(str),I
000000r 2               		.byte	.strat(str,I)+$80
000000r 2               	.endrep
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               .include "zeropage.s"
000000r 2               
000000r 2               .feature org_per_seg
000000r 2               .zeropage
000000r 2               
000000r 2               .org ZP_START1
000000  2               
000000  2               GORESTART:
000000  2  xx xx xx     	.res 3
000003  2               GOSTROUT:
000003  2  xx xx xx     	.res 3
000006  2               GOAYINT:
000006  2  xx xx        	.res 2
000008  2               GOGIVEAYF:
000008  2  xx xx        	.res 2
00000A  2               
00000A  2               .org ZP_START2
00000A  2               Z15:
00000A  2  xx           	.res 1
00000B  2               .ifndef POSX; allow override
00000B  2               POSX:
00000B  2               .endif
00000B  2  xx           	.res 1
00000C  2               .ifndef Z17; allow override
00000C  2               Z17:
00000C  2               .endif
00000C  2  xx           	.res 1
00000D  2               .ifndef Z18; allow override
00000D  2               Z18:
00000D  2               .endif
00000D  2  xx           	.res 1
00000E  2               LINNUM:
00000E  2               .ifndef TXPSV; allow override
00000E  2               TXPSV:
00000E  2               .endif
00000E  2  xx xx        	.res 2
000010  2               .ifndef INPUTBUFFER; allow override
000010  2               INPUTBUFFER:
000010  2               .endif
000010  2               
000010  2               .org ZP_START3
000060  2               
000060  2               CHARAC:
000060  2  xx           	.res 1
000061  2               ENDCHR:
000061  2  xx           	.res 1
000062  2               EOLPNTR:
000062  2  xx           	.res 1
000063  2               DIMFLG:
000063  2  xx           	.res 1
000064  2               VALTYP:
000064  2               .ifdef CONFIG_SMALL
000064  2               	.res 1
000064  2               .else
000064  2  xx xx        	.res 2
000066  2               .endif
000066  2               DATAFLG:
000066  2  xx           	.res 1
000067  2               SUBFLG:
000067  2  xx           	.res 1
000068  2               INPUTFLG:
000068  2  xx           	.res 1
000069  2               CPRMASK:
000069  2  xx           	.res 1
00006A  2               Z14:
00006A  2  xx           	.res 1
00006B  2               
00006B  2               .org ZP_START4
00006B  2               
00006B  2               TEMPPT:
00006B  2  xx           	.res 1
00006C  2               LASTPT:
00006C  2  xx xx        	.res 2
00006E  2               TEMPST:
00006E  2  xx xx xx xx  	.res 9
000072  2  xx xx xx xx  
000076  2  xx           
000077  2               INDEX:
000077  2  xx xx        	.res 2
000079  2               DEST:
000079  2  xx xx        	.res 2
00007B  2               RESULT:
00007B  2  xx xx xx xx  	.res BYTES_FP
00007F  2  xx           
000080  2               RESULT_LAST = RESULT + BYTES_FP-1
000080  2               TXTTAB:
000080  2  xx xx        	.res 2
000082  2               VARTAB:
000082  2  xx xx        	.res 2
000084  2               ARYTAB:
000084  2  xx xx        	.res 2
000086  2               STREND:
000086  2  xx xx        	.res 2
000088  2               FRETOP:
000088  2  xx xx        	.res 2
00008A  2               FRESPC:
00008A  2  xx xx        	.res 2
00008C  2               MEMSIZ:
00008C  2  xx xx        	.res 2
00008E  2               CURLIN:
00008E  2  xx xx        	.res 2
000090  2               OLDLIN:
000090  2  xx xx        	.res 2
000092  2               OLDTEXT:
000092  2  xx xx        	.res 2
000094  2               Z8C:
000094  2  xx xx        	.res 2
000096  2               DATPTR:
000096  2  xx xx        	.res 2
000098  2               INPTR:
000098  2  xx xx        	.res 2
00009A  2               VARNAM:
00009A  2  xx xx        	.res 2
00009C  2               VARPNT:
00009C  2  xx xx        	.res 2
00009E  2               FORPNT:
00009E  2  xx xx        	.res 2
0000A0  2               LASTOP:
0000A0  2  xx xx        	.res 2
0000A2  2               CPRTYP:
0000A2  2  xx           	.res 1
0000A3  2               FNCNAM:
0000A3  2               TEMP3:
0000A3  2  xx xx        	.res 2
0000A5  2               DSCPTR:
0000A5  2               .ifdef CONFIG_SMALL
0000A5  2               		.res 2
0000A5  2               .else
0000A5  2  xx xx xx     		.res 3
0000A8  2               .endif
0000A8  2               DSCLEN:
0000A8  2  xx xx        	.res 2
0000AA  2               .ifndef JMPADRS ; allow override
0000AA  2               JMPADRS			:= DSCLEN + 1
0000AA  2               .endif
0000AA  2               Z52:
0000AA  2  xx           	.res 1
0000AB  2               ARGEXTENSION:
0000AB  2               .ifndef CONFIG_SMALL
0000AB  2  xx           	.res 1
0000AC  2               .endif
0000AC  2               TEMP1:
0000AC  2  xx           	.res 1
0000AD  2               HIGHDS:
0000AD  2  xx xx        	.res 2
0000AF  2               HIGHTR:
0000AF  2  xx xx        	.res 2
0000B1  2               .ifndef CONFIG_SMALL
0000B1  2               TEMP2:
0000B1  2  xx           	.res 1
0000B2  2               .endif
0000B2  2               INDX:
0000B2  2               TMPEXP:
0000B2  2               .ifdef CONFIG_SMALL
0000B2  2               TEMP2:
0000B2  2               .endif
0000B2  2  xx           	.res 1
0000B3  2               EXPON:
0000B3  2  xx           	.res 1
0000B4  2               LOWTR:
0000B4  2               .ifndef LOWTRX ; allow override
0000B4  2               LOWTRX:
0000B4  2               .endif
0000B4  2  xx           	.res 1
0000B5  2               EXPSGN:
0000B5  2  xx           	.res 1
0000B6  2               FAC:
0000B6  2  xx xx xx xx  	.res BYTES_FP
0000BA  2  xx           
0000BB  2               FAC_LAST = FAC + BYTES_FP-1
0000BB  2               FACSIGN:
0000BB  2  xx           	.res 1
0000BC  2               SERLEN:
0000BC  2  xx           	.res 1
0000BD  2               SHIFTSIGNEXT:
0000BD  2  xx           	.res 1
0000BE  2               ARG:
0000BE  2  xx xx xx xx  	.res BYTES_FP
0000C2  2  xx           
0000C3  2               ARG_LAST = ARG + BYTES_FP-1
0000C3  2               ARGSIGN:
0000C3  2  xx           	.res 1
0000C4  2               STRNG1:
0000C4  2  xx xx        	.res 2
0000C6  2               SGNCPR = STRNG1
0000C6  2               FACEXTENSION = STRNG1+1
0000C6  2               STRNG2:
0000C6  2  xx xx        	.res 2
0000C8  2               .ifdef AIM65
0000C8  2               ATN:
0000C8  2               	.res 3
0000C8  2               ZBE:
0000C8  2               	.res 1
0000C8  2               .endif
0000C8  2               .ifdef SYM1
0000C8  2               USR1:
0000C8  2               	.res 3
0000C8  2               USR2:
0000C8  2               	.res 3
0000C8  2               USR3:
0000C8  2               	.res 3
0000C8  2               .endif
0000C8  2               CHRGET:
0000C8  2               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000C8  2               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000C8  2               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000C8  2               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000C8  2               
0000C8  2               
0000C8  2               
0000C8  1               
0000C8  1               .include "header.s"
0000C8  2               		.segment "HEADER"
000000r 2               .ifdef KBD
000000r 2                       jmp     LE68C
000000r 2                       .byte   $00,$13,$56
000000r 2               .endif
000000r 2               .ifdef AIM65
000000r 2                       jmp     COLD_START
000000r 2                       jmp     RESTART
000000r 2                       .word   AYINT,GIVAYF
000000r 2               .endif
000000r 2               .ifdef SYM1
000000r 2                       jmp     PR_WRITTEN_BY
000000r 2               .endif
000000r 2               
000000r 1               .include "token.s"
000000r 2               		init_token_tables
000000r 2               
000000r 2  rr rr 45 4E  		keyword_rts "END", END
000004r 2  C4 xx        
000001r 2  rr rr 46 4F  		keyword_rts "FOR", FOR
000005r 2  D2 xx        
000002r 2  rr rr 4E 45  		keyword_rts "NEXT", NEXT
000006r 2  58 D4 xx     
000003r 2  rr rr 44 41  		keyword_rts "DATA", DATA
000007r 2  54 C1 xx     
000004r 2               .ifdef CONFIG_FILE
000004r 2               		keyword_rts "INPUT#", INPUTH
000004r 2               .endif
000004r 2  rr rr 49 4E  		keyword_rts "INPUT", INPUT
000008r 2  50 55 D4 xx  
000005r 2  rr rr 44 49  		keyword_rts "DIM", DIM
000009r 2  CD xx        
000006r 2  rr rr 52 45  		keyword_rts "READ", READ
00000Ar 2  41 C4 xx     
000007r 2               .ifdef APPLE
000007r 2               		keyword_rts "PLT", PLT
000007r 2               .else
000007r 2  rr rr 4C 45  		keyword_rts "LET", LET
00000Br 2  D4 xx        
000008r 2               .endif
000008r 2  rr rr 47 4F  		keyword_rts "GOTO", GOTO, TOKEN_GOTO
00000Cr 2  54 CF xx     
000009r 2  rr rr 52 55  		keyword_rts "RUN", RUN
00000Dr 2  CE xx        
00000Ar 2  rr rr 49 C6  		keyword_rts "IF", IF
00000Er 2  xx           
00000Br 2  rr rr 52 45  		keyword_rts "RESTORE", RESTORE
00000Fr 2  53 54 4F 52  
000013r 2  C5 xx        
00000Cr 2  rr rr 47 4F  		keyword_rts "GOSUB", GOSUB, TOKEN_GOSUB
000010r 2  53 55 C2 xx  
00000Dr 2  rr rr 52 45  		keyword_rts "RETURN", POP
000011r 2  54 55 52 CE  
000015r 2  xx           
00000Er 2               .ifdef APPLE
00000Er 2               		keyword_rts "TEX", TEX, TOKEN_REM
00000Er 2               .else
00000Er 2  rr rr 52 45  		keyword_rts "REM", REM, TOKEN_REM
000012r 2  CD xx        
00000Fr 2               .endif
00000Fr 2  rr rr 53 54  		keyword_rts "STOP", STOP
000013r 2  4F D0 xx     
000010r 2  rr rr 4F CE  		keyword_rts "ON", ON
000014r 2  xx           
000011r 2               .ifdef CONFIG_NULL
000011r 2               		keyword_rts "NULL", NULL
000011r 2               .endif
000011r 2               .ifdef KBD
000011r 2               		keyword_rts "PLOD", PLOD
000011r 2               		keyword_rts "PSAV", PSAV
000011r 2               		keyword_rts "VLOD", VLOD
000011r 2               		keyword_rts "VSAV", VSAV
000011r 2               .endif
000011r 2               .ifndef CONFIG_NO_POKE
000011r 2  rr rr 57 41  		keyword_rts "WAIT", WAIT
000015r 2  49 D4 xx     
000012r 2               .endif
000012r 2               .ifndef KBD
000012r 2  rr rr 4C 4F  		keyword_rts "LOAD", LOAD
000016r 2  41 C4 xx     
000013r 2  rr rr 53 41  		keyword_rts "SAVE", SAVE
000017r 2  56 C5 xx     
000014r 2               .endif
000014r 2               .ifdef CONFIG_CBM_ALL
000014r 2               		keyword_rts "VERIFY", VERIFY
000014r 2               .endif
000014r 2  rr rr 44 45  		keyword_rts "DEF", DEF
000018r 2  C6 xx        
000015r 2               .ifdef KBD
000015r 2               		keyword_rts "SLOD", SLOD
000015r 2               .endif
000015r 2               .ifndef CONFIG_NO_POKE
000015r 2  rr rr 50 4F  		keyword_rts "POKE", POKE
000019r 2  4B C5 xx     
000016r 2               .endif
000016r 2               .ifdef CONFIG_FILE
000016r 2               		keyword_rts "PRINT#", PRINTH
000016r 2               .endif
000016r 2  rr rr 50 52  		keyword_rts "PRINT", PRINT, TOKEN_PRINT
00001Ar 2  49 4E D4 xx  
000017r 2  rr rr 43 4F  		keyword_rts "CONT", CONT
00001Br 2  4E D4 xx     
000018r 2  rr rr 4C 49  		keyword_rts "LIST", LIST
00001Cr 2  53 D4 xx     
000019r 2               .ifdef CONFIG_CBM_ALL
000019r 2               		keyword_rts "CLR", CLEAR
000019r 2               .else
000019r 2  rr rr 43 4C  		keyword_rts "CLEAR", CLEAR
00001Dr 2  45 41 D2 xx  
00001Ar 2               .endif
00001Ar 2               .ifdef CONFIG_FILE
00001Ar 2               		keyword_rts "CMD", CMD
00001Ar 2               		keyword_rts "SYS", SYS
00001Ar 2               		keyword_rts "OPEN", OPEN
00001Ar 2               		keyword_rts "CLOSE", CLOSE
00001Ar 2               .endif
00001Ar 2               .ifndef CONFIG_SMALL
00001Ar 2  rr rr 47 45  		keyword_rts "GET", GET
00001Er 2  D4 xx        
00001Br 2               .endif
00001Br 2               .ifdef KBD
00001Br 2               		keyword_rts "PRT", PRT
00001Br 2               .endif
00001Br 2  rr rr 4E 45  		keyword_rts "NEW", NEW
00001Fr 2  D7 xx        
00001Cr 2               
00001Cr 2               		count_tokens
00001Cr 2               
00001Cr 2  54 41 42 A8  		keyword	"TAB(", TOKEN_TAB
000020r 2  xx           
00001Dr 2  54 CF xx     		keyword	"TO", TOKEN_TO
00001Er 2  46 CE xx     		keyword	"FN", TOKEN_FN
00001Fr 2  53 50 43 A8  		keyword	"SPC(", TOKEN_SPC
000023r 2  xx           
000020r 2  54 48 45 CE  		keyword	"THEN", TOKEN_THEN
000024r 2  xx           
000021r 2  4E 4F D4 xx  		keyword	"NOT", TOKEN_NOT
000022r 2  53 54 45 D0  		keyword	"STEP", TOKEN_STEP
000026r 2  xx           
000023r 2  AB xx        		keyword	"+", TOKEN_PLUS
000024r 2  AD xx        		keyword	"-", TOKEN_MINUS
000025r 2  AA xx        		keyword	"*"
000026r 2  AF xx        		keyword	"/"
000027r 2               .ifdef KBD
000027r 2               		keyword	"#"
000027r 2               .else
000027r 2  DE xx        		keyword	"^"
000028r 2               .endif
000028r 2  41 4E C4 xx  		keyword	"AND"
000029r 2  4F D2 xx     		keyword	"OR"
00002Ar 2  BE xx        		keyword	">", TOKEN_GREATER
00002Br 2  BD xx        		keyword	"=", TOKEN_EQUAL
00002Cr 2  BC xx        		keyword	"<"
00002Dr 2               
00002Dr 2                       .segment "VECTORS"
000038r 2               UNFNC:
000038r 2               
000038r 2  rr rr 53 47  		keyword_addr "SGN", SGN, TOKEN_SGN
00003Cr 2  CE xx        
00002Er 2  rr rr 49 4E  		keyword_addr "INT", INT
000032r 2  D4 xx        
00002Fr 2  rr rr 41 42  		keyword_addr "ABS", ABS
000033r 2  D3 xx        
000030r 2               .ifdef KBD
000030r 2               		keyword_addr "VER", VER
000030r 2               .endif
000030r 2               .ifndef CONFIG_NO_POKE
000030r 2                 .ifdef CONFIG_RAM
000030r 2               		keyword_addr "USR", IQERR
000030r 2                 .else
000030r 2  00 00 55 53  		keyword_addr "USR", USR, TOKEN_USR
000034r 2  D2 xx        
000031r 2                 .endif
000031r 2               .endif
000031r 2  rr rr 46 52  		keyword_addr "FRE", FRE
000035r 2  C5 xx        
000032r 2  rr rr 50 4F  		keyword_addr "POS", POS
000036r 2  D3 xx        
000033r 2  rr rr 53 51  		keyword_addr "SQR", SQR
000037r 2  D2 xx        
000034r 2  rr rr 52 4E  		keyword_addr "RND", RND
000038r 2  C4 xx        
000035r 2  rr rr 4C 4F  		keyword_addr "LOG", LOG
000039r 2  C7 xx        
000036r 2  rr rr 45 58  		keyword_addr "EXP", EXP
00003Ar 2  D0 xx        
000037r 2               .segment "VECTORS"
00004Cr 2               UNFNC_COS:
00004Cr 2  rr rr 43 4F  		keyword_addr "COS", COS
000050r 2  D3 xx        
000038r 2               .segment "VECTORS"
00004Er 2               UNFNC_SIN:
00004Er 2  rr rr 53 49  		keyword_addr "SIN", SIN
000052r 2  CE xx        
000039r 2               .segment "VECTORS"
000050r 2               UNFNC_TAN:
000050r 2  rr rr 54 41  		keyword_addr "TAN", TAN
000054r 2  CE xx        
00003Ar 2               .segment "VECTORS"
000052r 2               UNFNC_ATN:
000052r 2  rr rr 41 54  		keyword_addr "ATN", ATN
000056r 2  CE xx        
00003Br 2               .ifdef KBD
00003Br 2               		keyword_addr "GETC", GETC
00003Br 2               .endif
00003Br 2               .ifndef CONFIG_NO_POKE
00003Br 2  rr rr 50 45  		keyword_addr "PEEK", PEEK
00003Fr 2  45 CB xx     
00003Cr 2               .endif
00003Cr 2  rr rr 4C 45  		keyword_addr "LEN", LEN
000040r 2  CE xx        
00003Dr 2  rr rr 53 54  		keyword_addr "STR$", STR
000041r 2  52 A4 xx     
00003Er 2  rr rr 56 41  		keyword_addr "VAL", VAL
000042r 2  CC xx        
00003Fr 2  rr rr 41 53  		keyword_addr "ASC", ASC
000043r 2  C3 xx        
000040r 2  rr rr 43 48  		keyword_addr "CHR$", CHRSTR
000044r 2  52 A4 xx     
000041r 2  rr rr 4C 45  		keyword_addr "LEFT$", LEFTSTR, TOKEN_LEFTSTR
000045r 2  46 54 A4 xx  
000042r 2  rr rr 52 49  		keyword_addr "RIGHT$", RIGHTSTR
000046r 2  47 48 54 A4  
00004Ar 2  xx           
000043r 2  rr rr 4D 49  		keyword_addr "MID$", MIDSTR
000047r 2  44 A4 xx     
000044r 2               .ifdef CONFIG_2
000044r 2  47 CF xx     		keyword	"GO", TOKEN_GO
000045r 2               .endif
000045r 2                       .segment "KEYWORDS"
0000E0r 2  00           		.byte   0
0000E1r 2               
0000E1r 2                       .segment "VECTORS"
000066r 2               MATHTBL:
000066r 2  79                   .byte   $79
000067r 2  rr rr                .word   FADDT-1
000069r 2  79                   .byte   $79
00006Ar 2  rr rr                .word   FSUBT-1
00006Cr 2  7B                   .byte   $7B
00006Dr 2  rr rr                .word   FMULTT-1
00006Fr 2  7B                   .byte   $7B
000070r 2  rr rr                .word   FDIVT-1
000072r 2  7F                   .byte   $7F
000073r 2  rr rr                .word   FPWRT-1
000075r 2  50                   .byte   $50
000076r 2  rr rr                .word   TAND-1
000078r 2  46                   .byte   $46
000079r 2  rr rr                .word   OR-1
00007Br 2  7D                   .byte   $7D
00007Cr 2  rr rr                .word   NEGOP-1
00007Er 2  5A                   .byte   $5A
00007Fr 2  rr rr                .word   EQUOP-1
000081r 2  64                   .byte   $64
000082r 2  rr rr                .word   RELOPS-1
000084r 2               
000084r 1               .include "error.s"
000084r 2               init_error_table
000000r 2               
000000r 2               .ifdef CONFIG_SMALL_ERROR
000000r 2               define_error ERR_NOFOR, "NF"
000000r 2               define_error ERR_SYNTAX, "SN"
000000r 2               define_error ERR_NOGOSUB, "RG"
000000r 2               define_error ERR_NODATA, "OD"
000000r 2               define_error ERR_ILLQTY, "FC"
000000r 2               define_error ERR_OVERFLOW, "OV"
000000r 2               define_error ERR_MEMFULL, "OM"
000000r 2               define_error ERR_UNDEFSTAT, "US"
000000r 2               define_error ERR_BADSUBS, "BS"
000000r 2               define_error ERR_REDIMD, "DD"
000000r 2               define_error ERR_ZERODIV, "/0"
000000r 2               define_error ERR_ILLDIR, "ID"
000000r 2               define_error ERR_BADTYPE, "TM"
000000r 2               define_error ERR_STRLONG, "LS"
000000r 2               define_error ERR_FRMCPX, "ST"
000000r 2               define_error ERR_CANTCONT, "CN"
000000r 2               define_error ERR_UNDEFFN, "UF"
000000r 2               .else
000000r 2  4E 45 58 54  define_error ERR_NOFOR, "NEXT WITHOUT FOR"
000004r 2  20 57 49 54  
000008r 2  48 4F 55 54  
000010r 2  53 59 4E 54  define_error ERR_SYNTAX, "SYNTAX"
000014r 2  41 D8        
000016r 2  52 45 54 55  define_error ERR_NOGOSUB, "RETURN WITHOUT GOSUB"
00001Ar 2  52 4E 20 57  
00001Er 2  49 54 48 4F  
00002Ar 2  4F 55 54 20  define_error ERR_NODATA, "OUT OF DATA"
00002Er 2  4F 46 20 44  
000032r 2  41 54 C1     
000035r 2  49 4C 4C 45  define_error ERR_ILLQTY, "ILLEGAL QUANTITY"
000039r 2  47 41 4C 20  
00003Dr 2  51 55 41 4E  
000045r 2               .ifdef CBM1
000045r 2               	.byte 0,0,0,0,0
000045r 2               .endif
000045r 2  4F 56 45 52  define_error ERR_OVERFLOW, "OVERFLOW"
000049r 2  46 4C 4F D7  
00004Dr 2  4F 55 54 20  define_error ERR_MEMFULL, "OUT OF MEMORY"
000051r 2  4F 46 20 4D  
000055r 2  45 4D 4F 52  
00005Ar 2  55 4E 44 45  define_error ERR_UNDEFSTAT, "UNDEF'D STATEMENT"
00005Er 2  46 27 44 20  
000062r 2  53 54 41 54  
00006Br 2  42 41 44 20  define_error ERR_BADSUBS, "BAD SUBSCRIPT"
00006Fr 2  53 55 42 53  
000073r 2  43 52 49 50  
000078r 2  52 45 44 49  define_error ERR_REDIMD, "REDIM'D ARRAY"
00007Cr 2  4D 27 44 20  
000080r 2  41 52 52 41  
000085r 2  44 49 56 49  define_error ERR_ZERODIV, "DIVISION BY ZERO"
000089r 2  53 49 4F 4E  
00008Dr 2  20 42 59 20  
000095r 2  49 4C 4C 45  define_error ERR_ILLDIR, "ILLEGAL DIRECT"
000099r 2  47 41 4C 20  
00009Dr 2  44 49 52 45  
0000A3r 2  54 59 50 45  define_error ERR_BADTYPE, "TYPE MISMATCH"
0000A7r 2  20 4D 49 53  
0000ABr 2  4D 41 54 43  
0000B0r 2  53 54 52 49  define_error ERR_STRLONG, "STRING TOO LONG"
0000B4r 2  4E 47 20 54  
0000B8r 2  4F 4F 20 4C  
0000BFr 2               .ifdef CONFIG_FILE
0000BFr 2                 .ifdef CBM1
0000BFr 2               define_error ERR_BADDATA, "BAD DATA"
0000BFr 2                 .else
0000BFr 2               define_error ERR_BADDATA, "FILE DATA"
0000BFr 2                 .endif
0000BFr 2               .endif
0000BFr 2  46 4F 52 4D  define_error ERR_FRMCPX, "FORMULA TOO COMPLEX"
0000C3r 2  55 4C 41 20  
0000C7r 2  54 4F 4F 20  
0000D2r 2  43 41 4E 27  define_error ERR_CANTCONT, "CAN'T CONTINUE"
0000D6r 2  54 20 43 4F  
0000DAr 2  4E 54 49 4E  
0000E0r 2  55 4E 44 45  define_error ERR_UNDEFFN, "UNDEF'D FUNCTION"
0000E4r 2  46 27 44 20  
0000E8r 2  46 55 4E 43  
0000F0r 2               .endif
0000F0r 2               
0000F0r 1               .include "message.s"
0000F0r 2               ; global messages: "error", "in", "ready", "break"
0000F0r 2               
0000F0r 2               .segment "CODE"
000000r 2               
000000r 2               QT_ERROR:
000000r 2               .ifdef KBD
000000r 2                       .byte   " err"
000000r 2               .else
000000r 2                 .ifdef APPLE
000000r 2                       .byte   " ERR"
000000r 2               		.byte	$07,$07
000000r 2                 .else
000000r 2  20 45 52 52          .byte   " ERROR"
000004r 2  4F 52        
000006r 2                 .endif
000006r 2               .endif
000006r 2  00                   .byte   0
000007r 2               
000007r 2               .ifndef KBD
000007r 2               QT_IN:
000007r 2  20 49 4E 20          .byte   " IN "
00000Br 2  00                   .byte   $00
00000Cr 2               .endif
00000Cr 2               
00000Cr 2               .ifdef KBD
00000Cr 2               		.byte	$54,$D2 ; ???
00000Cr 2               OKPRT:
00000Cr 2               		jsr     PRIMM
00000Cr 2                       .byte   CR,CR,">>",CR,LF
00000Cr 2               		.byte	0
00000Cr 2                       rts
00000Cr 2                       nop
00000Cr 2               .else
00000Cr 2                .ifndef AIM65
00000Cr 2               QT_OK:
00000Cr 2                 .ifdef CONFIG_CBM_ALL
00000Cr 2               		.byte   CR,LF,"READY.",CR,LF
00000Cr 2                 .else
00000Cr 2                   .ifdef APPLE
00000Cr 2               		; binary patch!
00000Cr 2                       .byte   CR,0,0,"K",CR,LF
00000Cr 2                   .else
00000Cr 2  0D 0A 4F 4B  		.byte   CR,LF,"OK",CR,LF
000010r 2  0D 0A        
000012r 2                   .endif
000012r 2                 .endif
000012r 2  00           		.byte	0
000013r 2                .endif
000013r 2               .endif
000013r 2               QT_BREAK:
000013r 2               
000013r 2               .ifdef KBD
000013r 2               		.byte	CR,LF," Brk"
000013r 2                       .byte   0
000013r 2                       .byte   $54,$D0 ; ???
000013r 2               .elseif .def(MICROTAN) || .def(AIM65)
000013r 2               		.byte CR,LF," BREAK"
000013r 2                       .byte   0
000013r 2               .else
000013r 2  0D 0A 42 52  		.byte CR,LF,"BREAK"
000017r 2  45 41 4B     
00001Ar 2  00                   .byte   0
00001Br 2               .endif
00001Br 2               
00001Br 1               .include "memory.s"
00001Br 2               ; generic stack and memory management code
00001Br 2               ; this code is identical across all versions of
00001Br 2               ; BASIC
00001Br 2               
00001Br 2               .segment "CODE"
00001Br 2               
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00001Br 2               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00001Br 2               ;
00001Br 2               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00001Br 2               ; 	= $XXFF IF CALLED FROM "RETURN"
00001Br 2               ; 	<<< BUG: SHOULD BE $FFXX >>>
00001Br 2               ;
00001Br 2               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00001Br 2               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00001Br 2               ;
00001Br 2               ;	.EQ. IF FOUND
00001Br 2               ;	(X) = STACK PNTR OF FRAME FOUND
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               GTFORPNT:
00001Br 2  BA                   tsx
00001Cr 2  E8                   inx
00001Dr 2  E8                   inx
00001Er 2  E8                   inx
00001Fr 2  E8                   inx
000020r 2               L2279:
000020r 2  BD 01 01             lda     STACK+1,x
000023r 2  C9 81                cmp     #$81
000025r 2  D0 21                bne     L22A1
000027r 2  A5 9F                lda     FORPNT+1
000029r 2  D0 0A                bne     L228E
00002Br 2  BD 02 01             lda     STACK+2,x
00002Er 2  85 9E                sta     FORPNT
000030r 2  BD 03 01             lda     STACK+3,x
000033r 2  85 9F                sta     FORPNT+1
000035r 2               L228E:
000035r 2  DD 03 01             cmp     STACK+3,x
000038r 2  D0 07                bne     L229A
00003Ar 2  A5 9E                lda     FORPNT
00003Cr 2  DD 02 01             cmp     STACK+2,x
00003Fr 2  F0 07                beq     L22A1
000041r 2               L229A:
000041r 2  8A                   txa
000042r 2  18                   clc
000043r 2  69 12                adc     #BYTES_PER_FRAME
000045r 2  AA                   tax
000046r 2  D0 D8                bne     L2279
000048r 2               L22A1:
000048r 2  60                   rts
000049r 2               
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               ; MOVE BLOCK OF MEMORY UP
000049r 2               ;
000049r 2               ; ON ENTRY:
000049r 2               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
000049r 2               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
000049r 2               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               BLTU:
000049r 2  20 rr rr             jsr     REASON
00004Cr 2  85 86                sta     STREND
00004Er 2  84 87                sty     STREND+1
000050r 2               BLTU2:
000050r 2  38                   sec
000051r 2  A5 AF                lda     HIGHTR
000053r 2  E5 B4                sbc     LOWTR
000055r 2  85 77                sta     INDEX
000057r 2  A8                   tay
000058r 2  A5 B0                lda     HIGHTR+1
00005Ar 2  E5 B5                sbc     LOWTR+1
00005Cr 2  AA                   tax
00005Dr 2  E8                   inx
00005Er 2  98                   tya
00005Fr 2  F0 23                beq     L22DD
000061r 2  A5 AF                lda     HIGHTR
000063r 2  38                   sec
000064r 2  E5 77                sbc     INDEX
000066r 2  85 AF                sta     HIGHTR
000068r 2  B0 03                bcs     L22C6
00006Ar 2  C6 B0                dec     HIGHTR+1
00006Cr 2  38                   sec
00006Dr 2               L22C6:
00006Dr 2  A5 AD                lda     HIGHDS
00006Fr 2  E5 77                sbc     INDEX
000071r 2  85 AD                sta     HIGHDS
000073r 2  B0 08                bcs     L22D6
000075r 2  C6 AE                dec     HIGHDS+1
000077r 2  90 04                bcc     L22D6
000079r 2               L22D2:
000079r 2  B1 AF                lda     (HIGHTR),y
00007Br 2  91 AD                sta     (HIGHDS),y
00007Dr 2               L22D6:
00007Dr 2  88                   dey
00007Er 2  D0 F9                bne     L22D2
000080r 2  B1 AF                lda     (HIGHTR),y
000082r 2  91 AD                sta     (HIGHDS),y
000084r 2               L22DD:
000084r 2  C6 B0                dec     HIGHTR+1
000086r 2  C6 AE                dec     HIGHDS+1
000088r 2  CA                   dex
000089r 2  D0 F2                bne     L22D6
00008Br 2  60                   rts
00008Cr 2               
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00008Cr 2               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               CHKMEM:
00008Cr 2  0A                   asl     a
00008Dr 2  69 3E                adc     #SPACE_FOR_GOSUB
00008Fr 2  B0 35                bcs     MEMERR
000091r 2  85 77                sta     INDEX
000093r 2  BA                   tsx
000094r 2  E4 77                cpx     INDEX
000096r 2  90 2E                bcc     MEMERR
000098r 2  60                   rts
000099r 2               
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
000099r 2               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               REASON:
000099r 2  C4 89                cpy     FRETOP+1
00009Br 2  90 28                bcc     L231E
00009Dr 2  D0 04                bne     L22FC
00009Fr 2  C5 88                cmp     FRETOP
0000A1r 2  90 22                bcc     L231E
0000A3r 2               L22FC:
0000A3r 2  48                   pha
0000A4r 2  A2 09                ldx     #FAC-TEMP1-1
0000A6r 2  98                   tya
0000A7r 2               L2300:
0000A7r 2  48                   pha
0000A8r 2  B5 AC                lda     TEMP1,x
0000AAr 2  CA                   dex
0000ABr 2  10 FA                bpl     L2300
0000ADr 2  20 rr rr             jsr     GARBAG
0000B0r 2  A2 F7                ldx     #TEMP1-FAC+1
0000B2r 2               L230B:
0000B2r 2  68                   pla
0000B3r 2  95 B6                sta     FAC,x
0000B5r 2  E8                   inx
0000B6r 2  30 FA                bmi     L230B
0000B8r 2  68                   pla
0000B9r 2  A8                   tay
0000BAr 2  68                   pla
0000BBr 2  C4 89                cpy     FRETOP+1
0000BDr 2  90 06                bcc     L231E
0000BFr 2  D0 05                bne     MEMERR
0000C1r 2  C5 88                cmp     FRETOP
0000C3r 2  B0 01                bcs     MEMERR
0000C5r 2               L231E:
0000C5r 2  60                   rts
0000C6r 2               
0000C6r 1               .include "program.s"
0000C6r 2               ; error
0000C6r 2               ; line input, line editing
0000C6r 2               ; tokenize
0000C6r 2               ; detokenize
0000C6r 2               ; BASIC program memory management
0000C6r 2               
0000C6r 2               ; MICROTAN has some nonstandard extension to LIST here
0000C6r 2               
0000C6r 2               .segment "CODE"
0000C6r 2               
0000C6r 2               MEMERR:
0000C6r 2  A2 4D                ldx     #ERR_MEMFULL
0000C8r 2               
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ; HANDLE AN ERROR
0000C8r 2               ;
0000C8r 2               ; (X)=OFFSET IN ERROR MESSAGE TABLE
0000C8r 2               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
0000C8r 2               ; (CURLIN+1) = $FF IF IN DIRECT MODE
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ERROR:
0000C8r 2  46 6A                lsr     Z14
0000CAr 2               .ifdef CONFIG_FILE
0000CAr 2                       lda     CURDVC    ; output
0000CAr 2                       beq     LC366     ; is screen
0000CAr 2                       jsr     CLRCH     ; otherwise redirect output back to screen
0000CAr 2                       lda     #$00
0000CAr 2                       sta     CURDVC
0000CAr 2               LC366:
0000CAr 2               .endif
0000CAr 2  20 rr rr             jsr     CRDO
0000CDr 2  20 rr rr             jsr     OUTQUES
0000D0r 2               L2329:
0000D0r 2  BD rr rr             lda     ERROR_MESSAGES,x
0000D3r 2               .ifndef CONFIG_SMALL_ERROR
0000D3r 2  48                   pha
0000D4r 2  29 7F                and     #$7F
0000D6r 2               .endif
0000D6r 2  20 rr rr             jsr     OUTDO
0000D9r 2               .ifdef CONFIG_SMALL_ERROR
0000D9r 2                       lda     ERROR_MESSAGES+1,x
0000D9r 2                 .ifdef KBD
0000D9r 2                       and     #$7F
0000D9r 2                 .endif
0000D9r 2                       jsr     OUTDO
0000D9r 2               .else
0000D9r 2  E8                   inx
0000DAr 2  68                   pla
0000DBr 2  10 F3                bpl     L2329
0000DDr 2               .endif
0000DDr 2  20 rr rr             jsr     STKINI
0000E0r 2  A9 rr                lda     #<QT_ERROR
0000E2r 2  A0 rr                ldy     #>QT_ERROR
0000E4r 2               
0000E4r 2               ; ----------------------------------------------------------------------------
0000E4r 2               ; PRINT STRING AT (Y,A)
0000E4r 2               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
0000E4r 2               ; FALL INTO WARM RESTART
0000E4r 2               ; ----------------------------------------------------------------------------
0000E4r 2               PRINT_ERROR_LINNUM:
0000E4r 2  20 rr rr             jsr     STROUT
0000E7r 2  A4 8F                ldy     CURLIN+1
0000E9r 2  C8                   iny
0000EAr 2  F0 03                beq     RESTART
0000ECr 2  20 rr rr             jsr     INPRT
0000EFr 2               
0000EFr 2               ; ----------------------------------------------------------------------------
0000EFr 2               ; WARM RESTART ENTRY
0000EFr 2               ; ----------------------------------------------------------------------------
0000EFr 2               RESTART:
0000EFr 2               .ifdef KBD
0000EFr 2                       jsr     CRDO
0000EFr 2                       nop
0000EFr 2               L2351X:
0000EFr 2                       jsr     OKPRT
0000EFr 2               L2351:
0000EFr 2                       jsr     INLIN
0000EFr 2               LE28E:
0000EFr 2                       bpl     RESTART
0000EFr 2               .else
0000EFr 2  46 6A                lsr     Z14
0000F1r 2                .ifndef AIM65
0000F1r 2  A9 rr                lda     #<QT_OK
0000F3r 2  A0 rr                ldy     #>QT_OK
0000F5r 2                 .ifdef CONFIG_CBM_ALL
0000F5r 2                       jsr     STROUT
0000F5r 2                 .else
0000F5r 2  20 03 00             jsr     GOSTROUT
0000F8r 2                 .endif
0000F8r 2                .else
0000F8r 2                       jsr     GORESTART
0000F8r 2                .endif
0000F8r 2               L2351:
0000F8r 2  20 rr rr             jsr     INLIN
0000FBr 2               .endif
0000FBr 2  86 CF                stx     TXTPTR
0000FDr 2  84 D0                sty     TXTPTR+1
0000FFr 2  20 C8 00             jsr     CHRGET
000102r 2               .ifdef CONFIG_11
000102r 2               ; bug in pre-1.1: CHRGET sets Z on '\0'
000102r 2               ; and ':' - a line starting with ':' in
000102r 2               ; direct mode gets ignored
000102r 2  AA                   tax
000103r 2               .endif
000103r 2               .ifdef KBD
000103r 2                       beq     L2351X
000103r 2               .else
000103r 2  F0 F3                beq     L2351
000105r 2               .endif
000105r 2  A2 FF                ldx     #$FF
000107r 2  86 8F                stx     CURLIN+1
000109r 2  90 06                bcc     NUMBERED_LINE
00010Br 2  20 rr rr             jsr     PARSE_INPUT_LINE
00010Er 2  4C rr rr             jmp     NEWSTT2
000111r 2               
000111r 2               ; ----------------------------------------------------------------------------
000111r 2               ; HANDLE NUMBERED LINE
000111r 2               ; ----------------------------------------------------------------------------
000111r 2               NUMBERED_LINE:
000111r 2  20 rr rr             jsr     LINGET
000114r 2  20 rr rr             jsr     PARSE_INPUT_LINE
000117r 2  84 62                sty     EOLPNTR
000119r 2               .ifdef KBD
000119r 2                       jsr     FNDLIN2
000119r 2                       lda     JMPADRS+1
000119r 2                       sta     LOWTR
000119r 2                       sta     Z96
000119r 2                       lda     JMPADRS+2
000119r 2                       sta     LOWTR+1
000119r 2                       sta     Z96+1
000119r 2                       lda     LINNUM
000119r 2                       sta     L06FE
000119r 2                       lda     LINNUM+1
000119r 2                       sta     L06FE+1
000119r 2                       inc     LINNUM
000119r 2                       bne     LE2D2
000119r 2                       inc     LINNUM+1
000119r 2                       bne     LE2D2
000119r 2                       jmp     SYNERR
000119r 2               LE2D2:
000119r 2                       jsr     LF457
000119r 2                       ldx     #Z96
000119r 2                       jsr     CMPJMPADRS
000119r 2                       bcs     LE2FD
000119r 2               LE2DC:
000119r 2                       ldx     #$00
000119r 2                       lda     (JMPADRS+1,x)
000119r 2                       sta     (Z96,x)
000119r 2                       inc     JMPADRS+1
000119r 2                       bne     LE2E8
000119r 2                       inc     JMPADRS+2
000119r 2               LE2E8:
000119r 2                       inc     Z96
000119r 2                       bne     LE2EE
000119r 2                       inc     Z96+1
000119r 2               LE2EE:
000119r 2                       ldx     #VARTAB
000119r 2                       jsr     CMPJMPADRS
000119r 2                       bne     LE2DC
000119r 2                       lda     Z96
000119r 2                       sta     VARTAB
000119r 2                       lda     Z96+1
000119r 2                       sta     VARTAB+1
000119r 2               LE2FD:
000119r 2                       jsr     SETPTRS
000119r 2                       jsr     LE33D
000119r 2                       lda     INPUTBUFFER
000119r 2               LE306:
000119r 2                       beq     LE28E
000119r 2                       cmp     #$A5
000119r 2                       beq     LE306
000119r 2                       clc
000119r 2               .else
000119r 2  20 rr rr             jsr     FNDLIN
00011Cr 2  90 44                bcc     PUT_NEW_LINE
00011Er 2  A0 01                ldy     #$01
000120r 2  B1 B4                lda     (LOWTR),y
000122r 2  85 78                sta     INDEX+1
000124r 2  A5 82                lda     VARTAB
000126r 2  85 77                sta     INDEX
000128r 2  A5 B5                lda     LOWTR+1
00012Ar 2  85 7A                sta     DEST+1
00012Cr 2  A5 B4                lda     LOWTR
00012Er 2  88                   dey
00012Fr 2  F1 B4                sbc     (LOWTR),y
000131r 2  18                   clc
000132r 2  65 82                adc     VARTAB
000134r 2  85 82                sta     VARTAB
000136r 2  85 79                sta     DEST
000138r 2  A5 83                lda     VARTAB+1
00013Ar 2  69 FF                adc     #$FF
00013Cr 2  85 83                sta     VARTAB+1
00013Er 2  E5 B5                sbc     LOWTR+1
000140r 2  AA                   tax
000141r 2  38                   sec
000142r 2  A5 B4                lda     LOWTR
000144r 2  E5 82                sbc     VARTAB
000146r 2  A8                   tay
000147r 2  B0 03                bcs     L23A5
000149r 2  E8                   inx
00014Ar 2  C6 7A                dec     DEST+1
00014Cr 2               L23A5:
00014Cr 2  18                   clc
00014Dr 2  65 77                adc     INDEX
00014Fr 2  90 03                bcc     L23AD
000151r 2  C6 78                dec     INDEX+1
000153r 2  18                   clc
000154r 2               L23AD:
000154r 2  B1 77                lda     (INDEX),y
000156r 2  91 79                sta     (DEST),y
000158r 2  C8                   iny
000159r 2  D0 F9                bne     L23AD
00015Br 2  E6 78                inc     INDEX+1
00015Dr 2  E6 7A                inc     DEST+1
00015Fr 2  CA                   dex
000160r 2  D0 F2                bne     L23AD
000162r 2               .endif
000162r 2               ; ----------------------------------------------------------------------------
000162r 2               PUT_NEW_LINE:
000162r 2               .ifndef KBD
000162r 2                 .ifdef CONFIG_2
000162r 2  20 rr rr             jsr     SETPTRS
000165r 2  20 rr rr             jsr     LE33D
000168r 2  A5 10                lda     INPUTBUFFER
00016Ar 2  F0 8C                beq     L2351
00016Cr 2  18                   clc
00016Dr 2                 .else
00016Dr 2                       lda     INPUTBUFFER
00016Dr 2                       beq     FIX_LINKS
00016Dr 2                       lda     MEMSIZ
00016Dr 2                       ldy     MEMSIZ+1
00016Dr 2                       sta     FRETOP
00016Dr 2                       sty     FRETOP+1
00016Dr 2                 .endif
00016Dr 2               .endif
00016Dr 2  A5 82                lda     VARTAB
00016Fr 2  85 AF                sta     HIGHTR
000171r 2  65 62                adc     EOLPNTR
000173r 2  85 AD                sta     HIGHDS
000175r 2  A4 83                ldy     VARTAB+1
000177r 2  84 B0                sty     HIGHTR+1
000179r 2  90 01                bcc     L23D6
00017Br 2  C8                   iny
00017Cr 2               L23D6:
00017Cr 2  84 AE                sty     HIGHDS+1
00017Er 2  20 rr rr             jsr     BLTU
000181r 2               .ifdef CONFIG_INPUTBUFFER_0200
000181r 2                       lda     LINNUM
000181r 2                       ldy     LINNUM+1
000181r 2                       sta     INPUTBUFFER-2
000181r 2                       sty     INPUTBUFFER-1
000181r 2               .endif
000181r 2  A5 86                lda     STREND
000183r 2  A4 87                ldy     STREND+1
000185r 2  85 82                sta     VARTAB
000187r 2  84 83                sty     VARTAB+1
000189r 2  A4 62                ldy     EOLPNTR
00018Br 2  88                   dey
00018Cr 2               ; ---COPY LINE INTO PROGRAM-------
00018Cr 2               L23E6:
00018Cr 2  B9 0C 00             lda     INPUTBUFFER-4,y
00018Fr 2  91 B4                sta     (LOWTR),y
000191r 2  88                   dey
000192r 2  10 F8                bpl     L23E6
000194r 2               
000194r 2               ; ----------------------------------------------------------------------------
000194r 2               ; CLEAR ALL VARIABLES
000194r 2               ; RE-ESTABLISH ALL FORWARD LINKS
000194r 2               ; ----------------------------------------------------------------------------
000194r 2               FIX_LINKS:
000194r 2  20 rr rr             jsr     SETPTRS
000197r 2               .ifdef CONFIG_2
000197r 2  20 rr rr             jsr     LE33D
00019Ar 2  4C rr rr             jmp     L2351
00019Dr 2               LE33D:
00019Dr 2               .endif
00019Dr 2  A5 80                lda     TXTTAB
00019Fr 2  A4 81                ldy     TXTTAB+1
0001A1r 2  85 77                sta     INDEX
0001A3r 2  84 78                sty     INDEX+1
0001A5r 2  18                   clc
0001A6r 2               L23FA:
0001A6r 2  A0 01                ldy     #$01
0001A8r 2  B1 77                lda     (INDEX),y
0001AAr 2               .ifdef CONFIG_2
0001AAr 2  F0 1D                beq     RET3
0001ACr 2               .else
0001ACr 2                       jeq     L2351
0001ACr 2               .endif
0001ACr 2  A0 04                ldy     #$04
0001AEr 2               L2405:
0001AEr 2  C8                   iny
0001AFr 2  B1 77                lda     (INDEX),y
0001B1r 2  D0 FB                bne     L2405
0001B3r 2  C8                   iny
0001B4r 2  98                   tya
0001B5r 2  65 77                adc     INDEX
0001B7r 2  AA                   tax
0001B8r 2  A0 00                ldy     #$00
0001BAr 2  91 77                sta     (INDEX),y
0001BCr 2  A5 78                lda     INDEX+1
0001BEr 2  69 00                adc     #$00
0001C0r 2  C8                   iny
0001C1r 2  91 77                sta     (INDEX),y
0001C3r 2  86 77                stx     INDEX
0001C5r 2  85 78                sta     INDEX+1
0001C7r 2  90 DD                bcc     L23FA	; always
0001C9r 2               
0001C9r 2               ; ----------------------------------------------------------------------------
0001C9r 2               .ifdef KBD
0001C9r 2               .include "kbd_loadsave.s"
0001C9r 2               .endif
0001C9r 2               
0001C9r 2               .ifdef CONFIG_2
0001C9r 2               ; !!! kbd_loadsave.s requires an RTS here!
0001C9r 2               RET3:
0001C9r 2  60           		rts
0001CAr 2               .endif
0001CAr 2               
0001CAr 2               .include "inline.s"
0001CAr 3               .segment "CODE"
0001CAr 3               
0001CAr 3               .ifndef CONFIG_NO_INPUTBUFFER_ZP
0001CAr 3               L2420:
0001CAr 3                 .ifdef OSI
0001CAr 3                       jsr     OUTDO
0001CAr 3                 .endif
0001CAr 3  CA                   dex
0001CBr 3                 .ifdef AIM65
0001CBr 3                       bmi     L2423
0001CBr 3                       jsr     PSLS
0001CBr 3                       jmp     INLIN2
0001CBr 3               LB35F:
0001CBr 3                       jsr     OUTDO
0001CBr 3                 .else
0001CBr 3  10 05                bpl     INLIN2
0001CDr 3                 .endif
0001CDr 3               L2423:
0001CDr 3                 .ifdef OSI
0001CDr 3                       jsr     OUTDO
0001CDr 3                 .endif
0001CDr 3  20 rr rr             jsr     CRDO
0001D0r 3               .endif
0001D0r 3               
0001D0r 3               ; ----------------------------------------------------------------------------
0001D0r 3               ; READ A LINE, AND STRIP OFF SIGN BITS
0001D0r 3               ; ----------------------------------------------------------------------------
0001D0r 3               .ifndef KBD
0001D0r 3               INLIN:
0001D0r 3                 .ifdef APPLE
0001D0r 3                       ldx     #$DD
0001D0r 3               INLIN1:
0001D0r 3                       stx     $33
0001D0r 3                       jsr     L2900
0001D0r 3                       cpx     #$EF
0001D0r 3                       bcs     L0C32
0001D0r 3                       ldx     #$EF
0001D0r 3               L0C32:
0001D0r 3                       lda     #$00
0001D0r 3                       sta     INPUTBUFFER,x
0001D0r 3                       ldx     #<INPUTBUFFER-1
0001D0r 3                       ldy     #>INPUTBUFFER-1
0001D0r 3                       rts
0001D0r 3                 .endif
0001D0r 3               
0001D0r 3                 .ifndef APPLE
0001D0r 3  A2 00                ldx     #$00
0001D2r 3               INLIN2:
0001D2r 3  20 rr rr             jsr     GETLN
0001D5r 3                   .ifdef AIM65
0001D5r 3                       cmp     #$1A
0001D5r 3                       bne     INLINAIM
0001D5r 3                       jsr     DU13
0001D5r 3                       jmp     INLIN
0001D5r 3               INLINAIM:
0001D5r 3                   .endif
0001D5r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001D5r 3  C9 07                cmp     #$07
0001D7r 3  F0 14                beq     L2443
0001D9r 3                   .endif
0001D9r 3  C9 0D                cmp     #$0D
0001DBr 3  F0 20                beq     L2453
0001DDr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001DDr 3  C9 20                cmp     #$20
0001DFr 3                     .ifdef AIM65
0001DFr 3                       bcc     L244E
0001DFr 3                     .else
0001DFr 3  90 F1                bcc     INLIN2
0001E1r 3                     .endif
0001E1r 3                     .ifdef MICROTAN
0001E1r 3                       cmp     #$80
0001E1r 3                     .else
0001E1r 3                       .ifdef AIM65
0001E1r 3                       cmp     #$7F
0001E1r 3                       beq     L2420
0001E1r 3                       .endif
0001E1r 3  C9 7D                cmp     #$7D
0001E3r 3                     .endif
0001E3r 3  B0 ED                bcs     INLIN2
0001E5r 3  C9 40                cmp     #$40 ; @
0001E7r 3                     .ifdef AIM65
0001E7r 3                       beq     LB35F
0001E7r 3                     .else
0001E7r 3  F0 E4                beq     L2423
0001E9r 3                     .ifdef MICROTAN
0001E9r 3                       cmp     #$7F ; DEL
0001E9r 3                     .else
0001E9r 3  C9 5F                cmp     #$5F ; _
0001EBr 3                     .endif
0001EBr 3  F0 DD                beq     L2420
0001EDr 3                     .endif
0001EDr 3               L2443:
0001EDr 3                     .ifdef MICROTAN
0001EDr 3                       cpx     #$4F
0001EDr 3                     .else
0001EDr 3  E0 47                cpx     #$47
0001EFr 3                     .endif
0001EFr 3  B0 05                bcs     L244C
0001F1r 3                   .endif
0001F1r 3  95 10                sta     INPUTBUFFER,x
0001F3r 3  E8                   inx
0001F4r 3                   .if .def(OSI) || .def(AIM65)
0001F4r 3                       .byte   $2C
0001F4r 3                   .else
0001F4r 3  D0 DC                bne     INLIN2
0001F6r 3                   .endif
0001F6r 3               L244C:
0001F6r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001F6r 3  A9 07                lda     #$07 ; BEL
0001F8r 3               L244E:
0001F8r 3  20 rr rr             jsr     OUTDO
0001FBr 3  D0 D5                bne     INLIN2
0001FDr 3                   .endif
0001FDr 3               L2453:
0001FDr 3  4C rr rr             jmp     L29B9
000200r 3                 .endif
000200r 3               .endif
000200r 3               
000200r 3               .ifndef KBD
000200r 3                 .ifndef APPLE
000200r 3               GETLN:
000200r 3                   .ifdef CONFIG_FILE
000200r 3                       jsr     CHRIN
000200r 3                       ldy     CURDVC
000200r 3                       bne     L2465
000200r 3                   .else
000200r 3  20 rr rr             jsr     MONRDKEY
000203r 3                   .endif
000203r 3                   .ifdef OSI
000203r 3                       nop
000203r 3                       nop
000203r 3                       nop
000203r 3                       nop
000203r 3                       nop
000203r 3                       nop
000203r 3                       nop
000203r 3                       nop
000203r 3                       nop
000203r 3                       nop
000203r 3                       nop
000203r 3                       nop
000203r 3                       nop
000203r 3                       nop
000203r 3                       and     #$7F
000203r 3                   .endif
000203r 3                 .endif
000203r 3                 .ifdef APPLE
000203r 3               RDKEY:
000203r 3                       jsr     LFD0C
000203r 3                       and     #$7F
000203r 3                 .endif
000203r 3                   .ifdef SYM1
000203r 3                       cmp     #$14
000203r 3                   .else
000203r 3  C9 0F                cmp     #$0F
000205r 3                   .endif
000205r 3  D0 08                bne     L2465
000207r 3  48                   pha
000208r 3  A5 6A                lda     Z14
00020Ar 3  49 FF                eor     #$FF
00020Cr 3  85 6A                sta     Z14
00020Er 3  68                   pla
00020Fr 3               L2465:
00020Fr 3  60                   rts
000210r 3               .endif
000210r 3               
000210r 2               
000210r 2               ; ----------------------------------------------------------------------------
000210r 2               ; TOKENIZE THE INPUT LINE
000210r 2               ; ----------------------------------------------------------------------------
000210r 2               PARSE_INPUT_LINE:
000210r 2  A6 CF                ldx     TXTPTR
000212r 2  A0 04                ldy     #$04
000214r 2  84 66                sty     DATAFLG
000216r 2               L246C:
000216r 2  B5 00                lda     INPUTBUFFERX,x
000218r 2               .ifdef CONFIG_CBM_ALL
000218r 2                       bpl     LC49E
000218r 2                       cmp     #$FF
000218r 2                       beq     L24AC
000218r 2                       inx
000218r 2                       bne     L246C
000218r 2               LC49E:
000218r 2               .endif
000218r 2  C9 20                cmp     #$20
00021Ar 2  F0 36                beq     L24AC
00021Cr 2  85 61                sta     ENDCHR
00021Er 2  C9 22                cmp     #$22
000220r 2  F0 54                beq     L24D0
000222r 2  24 66                bit     DATAFLG
000224r 2  70 2C                bvs     L24AC
000226r 2  C9 3F                cmp     #$3F
000228r 2  D0 04                bne     L2484
00022Ar 2  A9 96                lda     #TOKEN_PRINT
00022Cr 2  D0 24                bne     L24AC
00022Er 2               L2484:
00022Er 2  C9 30                cmp     #$30
000230r 2  90 04                bcc     L248C
000232r 2  C9 3C                cmp     #$3C
000234r 2  90 1C                bcc     L24AC
000236r 2               ; ----------------------------------------------------------------------------
000236r 2               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
000236r 2               ; WITH CURRENT CHAR FROM INPUT LINE
000236r 2               ; ----------------------------------------------------------------------------
000236r 2               L248C:
000236r 2  84 C6                sty     STRNG2
000238r 2  A0 00                ldy     #$00
00023Ar 2  84 62                sty     EOLPNTR
00023Cr 2  88                   dey
00023Dr 2  86 CF                stx     TXTPTR
00023Fr 2  CA                   dex
000240r 2               L2496:
000240r 2  C8                   iny
000241r 2               L2497:
000241r 2  E8                   inx
000242r 2               L2498:
000242r 2               .ifdef KBD
000242r 2                       jsr     GET_UPPER
000242r 2               .else
000242r 2  B5 00                lda     INPUTBUFFERX,x
000244r 2                 .ifndef CONFIG_2
000244r 2                       cmp     #$20
000244r 2                       beq     L2497
000244r 2                 .endif
000244r 2               .endif
000244r 2  38                   sec
000245r 2  F9 rr rr             sbc     TOKEN_NAME_TABLE,y
000248r 2  F0 F6                beq     L2496
00024Ar 2  C9 80                cmp     #$80
00024Cr 2  D0 2F                bne     L24D7
00024Er 2  05 62                ora     EOLPNTR
000250r 2               ; ----------------------------------------------------------------------------
000250r 2               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
000250r 2               ; ----------------------------------------------------------------------------
000250r 2               L24AA:
000250r 2  A4 C6                ldy     STRNG2
000252r 2               L24AC:
000252r 2  E8                   inx
000253r 2  C8                   iny
000254r 2  99 0B 00             sta     INPUTBUFFER-5,y
000257r 2  B9 0B 00             lda     INPUTBUFFER-5,y
00025Ar 2  F0 34                beq     L24EA
00025Cr 2  38                   sec
00025Dr 2  E9 3A                sbc     #$3A
00025Fr 2  F0 04                beq     L24BF
000261r 2  C9 49                cmp     #$49
000263r 2  D0 02                bne     L24C1
000265r 2               L24BF:
000265r 2  85 66                sta     DATAFLG
000267r 2               L24C1:
000267r 2  38                   sec
000268r 2  E9 54                sbc     #TOKEN_REM-':'
00026Ar 2  D0 AA                bne     L246C
00026Cr 2  85 61                sta     ENDCHR
00026Er 2               ; ----------------------------------------------------------------------------
00026Er 2               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
00026Er 2               ; BY COPYING CHARS UP TO ENDCHR.
00026Er 2               ; ----------------------------------------------------------------------------
00026Er 2               L24C8:
00026Er 2  B5 00                lda     INPUTBUFFERX,x
000270r 2  F0 E0                beq     L24AC
000272r 2  C5 61                cmp     ENDCHR
000274r 2  F0 DC                beq     L24AC
000276r 2               L24D0:
000276r 2  C8                   iny
000277r 2  99 0B 00             sta     INPUTBUFFER-5,y
00027Ar 2  E8                   inx
00027Br 2  D0 F1                bne     L24C8
00027Dr 2               ; ----------------------------------------------------------------------------
00027Dr 2               ; ADVANCE POINTER TO NEXT TOKEN NAME
00027Dr 2               ; ----------------------------------------------------------------------------
00027Dr 2               L24D7:
00027Dr 2  A6 CF                ldx     TXTPTR
00027Fr 2  E6 62                inc     EOLPNTR
000281r 2               L24DB:
000281r 2  C8                   iny
000282r 2  B9 rr rr             lda     MATHTBL+28+1,y
000285r 2  10 FA                bpl     L24DB
000287r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
00028Ar 2  D0 B6                bne     L2498
00028Cr 2  B5 00                lda     INPUTBUFFERX,x
00028Er 2  10 C0                bpl     L24AA
000290r 2               ; ---END OF LINE------------------
000290r 2               L24EA:
000290r 2  99 0D 00             sta     INPUTBUFFER-3,y
000293r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000293r 2                       dec     TXTPTR+1
000293r 2               .endif
000293r 2  A9 0F                lda     #<INPUTBUFFER-1
000295r 2  85 CF                sta     TXTPTR
000297r 2  60                   rts
000298r 2               
000298r 2               ; ----------------------------------------------------------------------------
000298r 2               ; SEARCH FOR LINE
000298r 2               ;
000298r 2               ; (LINNUM) = LINE # TO FIND
000298r 2               ; IF NOT FOUND:  CARRY = 0
000298r 2               ;	LOWTR POINTS AT NEXT LINE
000298r 2               ; IF FOUND:      CARRY = 1
000298r 2               ;	LOWTR POINTS AT LINE
000298r 2               ; ----------------------------------------------------------------------------
000298r 2               FNDLIN:
000298r 2               .ifdef KBD
000298r 2                       jsr     CHRGET
000298r 2                       jmp     LE444
000298r 2               LE440:
000298r 2                       php
000298r 2                       jsr     LINGET
000298r 2               LE444:
000298r 2                       jsr     LF457
000298r 2                       ldx     #$FF
000298r 2                       plp
000298r 2                       beq     LE464
000298r 2                       jsr     CHRGOT
000298r 2                       beq     L2520
000298r 2                       cmp     #$A5
000298r 2                       bne     L2520
000298r 2                       jsr     CHRGET
000298r 2                       beq     LE464
000298r 2                       bcs     LE461
000298r 2                       jsr     LINGET
000298r 2                       beq     L2520
000298r 2               LE461:
000298r 2                       jmp     SYNERR
000298r 2               LE464:
000298r 2                       stx     LINNUM
000298r 2                       stx     LINNUM+1
000298r 2               .else
000298r 2  A5 80                lda     TXTTAB
00029Ar 2  A6 81                ldx     TXTTAB+1
00029Cr 2               FL1:
00029Cr 2  A0 01                ldy     #$01
00029Er 2  85 B4                sta     LOWTR
0002A0r 2  86 B5                stx     LOWTR+1
0002A2r 2  B1 B4                lda     (LOWTR),y
0002A4r 2  F0 1F                beq     L251F
0002A6r 2  C8                   iny
0002A7r 2  C8                   iny
0002A8r 2  A5 0F                lda     LINNUM+1
0002AAr 2  D1 B4                cmp     (LOWTR),y
0002ACr 2  90 18                bcc     L2520
0002AEr 2  F0 03                beq     L250D
0002B0r 2  88                   dey
0002B1r 2  D0 09                bne     L2516
0002B3r 2               L250D:
0002B3r 2  A5 0E                lda     LINNUM
0002B5r 2  88                   dey
0002B6r 2  D1 B4                cmp     (LOWTR),y
0002B8r 2  90 0C                bcc     L2520
0002BAr 2  F0 0A                beq     L2520
0002BCr 2               L2516:
0002BCr 2  88                   dey
0002BDr 2  B1 B4                lda     (LOWTR),y
0002BFr 2  AA                   tax
0002C0r 2  88                   dey
0002C1r 2  B1 B4                lda     (LOWTR),y
0002C3r 2  B0 D7                bcs     FL1
0002C5r 2               L251F:
0002C5r 2  18                   clc
0002C6r 2               .endif
0002C6r 2               L2520:
0002C6r 2  60                   rts
0002C7r 2               
0002C7r 2               ; ----------------------------------------------------------------------------
0002C7r 2               ; "NEW" STATEMENT
0002C7r 2               ; ----------------------------------------------------------------------------
0002C7r 2               NEW:
0002C7r 2  D0 FD                bne     L2520
0002C9r 2               SCRTCH:
0002C9r 2  A9 00                lda     #$00
0002CBr 2  A8                   tay
0002CCr 2  91 80                sta     (TXTTAB),y
0002CEr 2  C8                   iny
0002CFr 2  91 80                sta     (TXTTAB),y
0002D1r 2  A5 80                lda     TXTTAB
0002D3r 2               .ifdef CONFIG_2
0002D3r 2  18           		clc
0002D4r 2               .endif
0002D4r 2  69 02                adc     #$02
0002D6r 2  85 82                sta     VARTAB
0002D8r 2  A5 81                lda     TXTTAB+1
0002DAr 2  69 00                adc     #$00
0002DCr 2  85 83                sta     VARTAB+1
0002DEr 2               ; ----------------------------------------------------------------------------
0002DEr 2               SETPTRS:
0002DEr 2  20 rr rr             jsr     STXTPT
0002E1r 2               .ifdef CONFIG_11A
0002E1r 2  A9 00                lda     #$00
0002E3r 2               
0002E3r 2               ; ----------------------------------------------------------------------------
0002E3r 2               ; "CLEAR" STATEMENT
0002E3r 2               ; ----------------------------------------------------------------------------
0002E3r 2               CLEAR:
0002E3r 2  D0 2A                bne     L256A
0002E5r 2               .endif
0002E5r 2               CLEARC:
0002E5r 2               .ifdef KBD
0002E5r 2                       lda     #<CONST_MEMSIZ
0002E5r 2                       ldy     #>CONST_MEMSIZ
0002E5r 2               .else
0002E5r 2  A5 8C                lda     MEMSIZ
0002E7r 2  A4 8D                ldy     MEMSIZ+1
0002E9r 2               .endif
0002E9r 2  85 88                sta     FRETOP
0002EBr 2  84 89                sty     FRETOP+1
0002EDr 2               .ifdef CONFIG_CBM_ALL
0002EDr 2                       jsr     CLALL
0002EDr 2               .endif
0002EDr 2  A5 82                lda     VARTAB
0002EFr 2  A4 83                ldy     VARTAB+1
0002F1r 2  85 84                sta     ARYTAB
0002F3r 2  84 85                sty     ARYTAB+1
0002F5r 2  85 86                sta     STREND
0002F7r 2  84 87                sty     STREND+1
0002F9r 2  20 rr rr             jsr     RESTORE
0002FCr 2               ; ----------------------------------------------------------------------------
0002FCr 2               STKINI:
0002FCr 2  A2 6E                ldx     #TEMPST
0002FEr 2  86 6B                stx     TEMPPT
000300r 2  68                   pla
000301r 2               .ifdef CONFIG_2
000301r 2  A8           		tay
000302r 2               .else
000302r 2                       sta     STACK+STACK_TOP+1
000302r 2               .endif
000302r 2  68                   pla
000303r 2               .ifndef CONFIG_2
000303r 2                       sta     STACK+STACK_TOP+2
000303r 2               .endif
000303r 2  A2 FA                ldx     #STACK_TOP
000305r 2  9A                   txs
000306r 2               .ifdef CONFIG_2
000306r 2  48                   pha
000307r 2  98                   tya
000308r 2  48                   pha
000309r 2               .endif
000309r 2  A9 00                lda     #$00
00030Br 2  85 93                sta     OLDTEXT+1
00030Dr 2  85 67                sta     SUBFLG
00030Fr 2               L256A:
00030Fr 2  60                   rts
000310r 2               
000310r 2               ; ----------------------------------------------------------------------------
000310r 2               ; SET TXTPTR TO BEGINNING OF PROGRAM
000310r 2               ; ----------------------------------------------------------------------------
000310r 2               STXTPT:
000310r 2  18                   clc
000311r 2  A5 80                lda     TXTTAB
000313r 2  69 FF                adc     #$FF
000315r 2  85 CF                sta     TXTPTR
000317r 2  A5 81                lda     TXTTAB+1
000319r 2  69 FF                adc     #$FF
00031Br 2  85 D0                sta     TXTPTR+1
00031Dr 2  60                   rts
00031Er 2               
00031Er 2               ; ----------------------------------------------------------------------------
00031Er 2               .ifdef KBD
00031Er 2               LE4C0:
00031Er 2                       ldy     #<LE444
00031Er 2                       ldx     #>LE444
00031Er 2               LE4C4:
00031Er 2                       jsr     LFFD6
00031Er 2                       jsr     LFFED
00031Er 2                       lda     $0504
00031Er 2                       clc
00031Er 2                       adc     #$08
00031Er 2                       sta     $0504
00031Er 2                       rts
00031Er 2               
00031Er 2               CMPJMPADRS:
00031Er 2                       lda     1,x
00031Er 2                       cmp     JMPADRS+2
00031Er 2                       bne     LE4DE
00031Er 2                       lda     0,x
00031Er 2                       cmp     JMPADRS+1
00031Er 2               LE4DE:
00031Er 2                       rts
00031Er 2               .endif
00031Er 2               
00031Er 2               ; ----------------------------------------------------------------------------
00031Er 2               ; "LIST" STATEMENT
00031Er 2               ; ----------------------------------------------------------------------------
00031Er 2               LIST:
00031Er 2               .ifdef KBD
00031Er 2                       jsr     LE440
00031Er 2                       bne     LE4DE
00031Er 2                       pla
00031Er 2                       pla
00031Er 2               L25A6:
00031Er 2                       jsr     CRDO
00031Er 2               .else
00031Er 2                   .ifdef AIM65
00031Er 2                       pha
00031Er 2                       lda     #$00
00031Er 2               LB4BF:
00031Er 2                       sta     INPUTFLG
00031Er 2                       pla
00031Er 2                   .endif
00031Er 2                 .ifdef MICROTAN
00031Er 2                       php
00031Er 2                       jmp     LE21C ; patch
00031Er 2               LC57E:
00031Er 2                  .elseif .def(AIM65) || .def(SYM1)
00031Er 2                       php
00031Er 2                       jsr     LINGET
00031Er 2               LC57E:
00031Er 2                 .else
00031Er 2  90 06                bcc     L2581
000320r 2  F0 04                beq     L2581
000322r 2  C9 A4                cmp     #TOKEN_MINUS
000324r 2  D0 E9                bne     L256A
000326r 2               L2581:
000326r 2  20 rr rr             jsr     LINGET
000329r 2                 .endif
000329r 2  20 rr rr             jsr     FNDLIN
00032Cr 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
00032Cr 2                       plp
00032Cr 2                       beq     L2598
00032Cr 2                 .endif
00032Cr 2  20 CE 00             jsr     CHRGOT
00032Fr 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
00032Fr 2                       beq     L25A6
00032Fr 2                 .else
00032Fr 2  F0 0C                beq     L2598
000331r 2                 .endif
000331r 2  C9 A4                cmp     #TOKEN_MINUS
000333r 2  D0 91                bne     L2520
000335r 2  20 C8 00             jsr     CHRGET
000338r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000338r 2                       beq     L2598
000338r 2                       jsr     LINGET
000338r 2                       beq     L25A6
000338r 2                       rts
000338r 2                 .else
000338r 2  20 rr rr             jsr     LINGET
00033Br 2  D0 89                bne     L2520
00033Dr 2                 .endif
00033Dr 2               L2598:
00033Dr 2                 .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
00033Dr 2  68                   pla
00033Er 2  68                   pla
00033Fr 2  A5 0E                lda     LINNUM
000341r 2  05 0F                ora     LINNUM+1
000343r 2  D0 06                bne     L25A6
000345r 2                 .endif
000345r 2  A9 FF                lda     #$FF
000347r 2  85 0E                sta     LINNUM
000349r 2  85 0F                sta     LINNUM+1
00034Br 2               L25A6:
00034Br 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
00034Br 2                       pla
00034Br 2                       pla
00034Br 2                 .endif
00034Br 2               L25A6X:
00034Br 2               .endif
00034Br 2  A0 01                ldy     #$01
00034Dr 2               .ifdef CONFIG_DATAFLG
00034Dr 2                       sty     DATAFLG
00034Dr 2               .endif
00034Dr 2  B1 B4                lda     (LOWTRX),y
00034Fr 2  F0 39                beq     L25E5
000351r 2               .ifdef MICROTAN
000351r 2                       jmp     LE21F
000351r 2               LC5A9:
000351r 2               .else
000351r 2  20 rr rr             jsr     ISCNTC
000354r 2               .endif
000354r 2               .ifndef KBD
000354r 2  20 rr rr             jsr     CRDO
000357r 2               .endif
000357r 2  C8                   iny
000358r 2  B1 B4                lda     (LOWTRX),y
00035Ar 2  AA                   tax
00035Br 2  C8                   iny
00035Cr 2  B1 B4                lda     (LOWTRX),y
00035Er 2  C5 0F                cmp     LINNUM+1
000360r 2  D0 04                bne     L25C1
000362r 2  E4 0E                cpx     LINNUM
000364r 2  F0 02                beq     L25C3
000366r 2               L25C1:
000366r 2  B0 22                bcs     L25E5
000368r 2               ; ---LIST ONE LINE----------------
000368r 2               L25C3:
000368r 2  84 9E                sty     FORPNT
00036Ar 2  20 rr rr             jsr     LINPRT
00036Dr 2  A9 20                lda     #$20
00036Fr 2               L25CA:
00036Fr 2  A4 9E                ldy     FORPNT
000371r 2  29 7F                and     #$7F
000373r 2               L25CE:
000373r 2  20 rr rr             jsr     OUTDO
000376r 2               .ifdef CONFIG_DATAFLG
000376r 2                       cmp     #$22
000376r 2                       bne     LA519
000376r 2                       lda     DATAFLG
000376r 2                       eor     #$FF
000376r 2                       sta     DATAFLG
000376r 2               LA519:
000376r 2               .endif
000376r 2  C8                   iny
000377r 2               .ifdef CONFIG_11
000377r 2  F0 11                beq     L25E5
000379r 2               .endif
000379r 2  B1 B4                lda     (LOWTRX),y
00037Br 2  D0 10                bne     L25E8
00037Dr 2  A8                   tay
00037Er 2  B1 B4                lda     (LOWTRX),y
000380r 2  AA                   tax
000381r 2  C8                   iny
000382r 2  B1 B4                lda     (LOWTRX),y
000384r 2  86 B4                stx     LOWTRX
000386r 2  85 B5                sta     LOWTRX+1
000388r 2               .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000388r 2                       bne     L25A6X
000388r 2               .else
000388r 2  D0 C1                bne     L25A6
00038Ar 2               .endif
00038Ar 2               L25E5:
00038Ar 2               .ifdef AIM65
00038Ar 2                       lda     INPUTFLG
00038Ar 2                       beq     L25E5a
00038Ar 2                       jsr     CRDO
00038Ar 2                       jsr     CRDO
00038Ar 2                       lda     #$1a
00038Ar 2                       jsr     OUTDO
00038Ar 2                       jsr     $e50a
00038Ar 2               L25E5a:
00038Ar 2               .endif
00038Ar 2  4C rr rr             jmp     RESTART
00038Dr 2               L25E8:
00038Dr 2  10 E4                bpl     L25CE
00038Fr 2               .ifdef CONFIG_DATAFLG
00038Fr 2                       cmp     #$FF
00038Fr 2                       beq     L25CE
00038Fr 2                       bit     DATAFLG
00038Fr 2                       bmi     L25CE
00038Fr 2               .endif
00038Fr 2  38                   sec
000390r 2  E9 7F                sbc     #$7F
000392r 2  AA                   tax
000393r 2  84 9E                sty     FORPNT
000395r 2  A0 FF                ldy     #$FF
000397r 2               L25F2:
000397r 2  CA                   dex
000398r 2  F0 08                beq     L25FD
00039Ar 2               L25F5:
00039Ar 2  C8                   iny
00039Br 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
00039Er 2  10 FA                bpl     L25F5
0003A0r 2  30 F5                bmi     L25F2
0003A2r 2               L25FD:
0003A2r 2  C8                   iny
0003A3r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003A6r 2  30 C7                bmi     L25CA
0003A8r 2  20 rr rr             jsr     OUTDO
0003ABr 2  D0 F5                bne     L25FD	; always
0003ADr 2               
0003ADr 2               
0003ADr 1               .include "flow1.s"
0003ADr 2               .segment "CODE"
0003ADr 2               
0003ADr 2               ; ----------------------------------------------------------------------------
0003ADr 2               ; "FOR" STATEMENT
0003ADr 2               ;
0003ADr 2               ; FOR PUSHES 18 BYTES ON THE STACK:
0003ADr 2               ; 2 -- TXTPTR
0003ADr 2               ; 2 -- LINE NUMBER
0003ADr 2               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
0003ADr 2               ; 1 -- STEP SIGN
0003ADr 2               ; 5 -- STEP VALUE
0003ADr 2               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
0003ADr 2               ; 1 -- FOR TOKEN ($81)
0003ADr 2               ; ----------------------------------------------------------------------------
0003ADr 2               FOR:
0003ADr 2  A9 80                lda     #$80
0003AFr 2  85 67                sta     SUBFLG
0003B1r 2  20 rr rr             jsr     LET
0003B4r 2  20 rr rr             jsr     GTFORPNT
0003B7r 2  D0 05                bne     L2619
0003B9r 2  8A                   txa
0003BAr 2  69 0F                adc     #FOR_STACK1
0003BCr 2  AA                   tax
0003BDr 2  9A                   txs
0003BEr 2               L2619:
0003BEr 2  68                   pla
0003BFr 2  68                   pla
0003C0r 2  A9 09                lda     #FOR_STACK2
0003C2r 2  20 rr rr             jsr     CHKMEM
0003C5r 2  20 rr rr             jsr     DATAN
0003C8r 2  18                   clc
0003C9r 2  98                   tya
0003CAr 2  65 CF                adc     TXTPTR
0003CCr 2  48                   pha
0003CDr 2  A5 D0                lda     TXTPTR+1
0003CFr 2  69 00                adc     #$00
0003D1r 2  48                   pha
0003D2r 2  A5 8F                lda     CURLIN+1
0003D4r 2  48                   pha
0003D5r 2  A5 8E                lda     CURLIN
0003D7r 2  48                   pha
0003D8r 2  A9 9D                lda     #TOKEN_TO
0003DAr 2  20 rr rr             jsr     SYNCHR
0003DDr 2  20 rr rr             jsr     CHKNUM
0003E0r 2  20 rr rr             jsr     FRMNUM
0003E3r 2  A5 BB                lda     FACSIGN
0003E5r 2  09 7F                ora     #$7F
0003E7r 2  25 B7                and     FAC+1
0003E9r 2  85 B7                sta     FAC+1
0003EBr 2  A9 rr                lda     #<STEP
0003EDr 2  A0 rr                ldy     #>STEP
0003EFr 2  85 77                sta     INDEX
0003F1r 2  84 78                sty     INDEX+1
0003F3r 2  4C rr rr             jmp     FRM_STACK3
0003F6r 2               
0003F6r 2               ; ----------------------------------------------------------------------------
0003F6r 2               ; "STEP" PHRASE OF "FOR" STATEMENT
0003F6r 2               ; ----------------------------------------------------------------------------
0003F6r 2               STEP:
0003F6r 2  A9 rr                lda     #<CON_ONE
0003F8r 2  A0 rr                ldy     #>CON_ONE
0003FAr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0003FDr 2  20 CE 00             jsr     CHRGOT
000400r 2  C9 A2                cmp     #TOKEN_STEP
000402r 2  D0 06                bne     L2665
000404r 2  20 C8 00             jsr     CHRGET
000407r 2  20 rr rr             jsr     FRMNUM
00040Ar 2               L2665:
00040Ar 2  20 rr rr             jsr     SIGN
00040Dr 2  20 rr rr             jsr     FRM_STACK2
000410r 2  A5 9F                lda     FORPNT+1
000412r 2  48                   pha
000413r 2  A5 9E                lda     FORPNT
000415r 2  48                   pha
000416r 2  A9 81                lda     #$81
000418r 2  48                   pha
000419r 2               
000419r 2               ; ----------------------------------------------------------------------------
000419r 2               ; PERFORM NEXT STATEMENT
000419r 2               ; ----------------------------------------------------------------------------
000419r 2               NEWSTT:
000419r 2  20 rr rr             jsr     ISCNTC
00041Cr 2  A5 CF                lda     TXTPTR
00041Er 2  A4 D0                ldy     TXTPTR+1
000420r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
000420r 2                       cpy     #>INPUTBUFFER
000420r 2                 .ifdef CBM2
000420r 2                       nop
000420r 2                 .endif
000420r 2                       beq     LC6D4
000420r 2               .else
000420r 2               ; BUG on AppleSoft I,
000420r 2               ; fixed differently on AppleSoft II (ldx/inx)
000420r 2  F0 06                beq     L2683
000422r 2               .endif
000422r 2  85 92                sta     OLDTEXT
000424r 2  84 93                sty     OLDTEXT+1
000426r 2               LC6D4:
000426r 2  A0 00                ldy     #$00
000428r 2               L2683:
000428r 2  B1 CF                lda     (TXTPTR),y
00042Ar 2               .ifndef CONFIG_11
00042Ar 2                       beq     LA5DC	; old: 1 cycle more on generic case
00042Ar 2                       cmp     #$3A
00042Ar 2                       beq     NEWSTT2
00042Ar 2               SYNERR1:
00042Ar 2                       jmp     SYNERR
00042Ar 2               LA5DC:
00042Ar 2               .else
00042Ar 2  D0 40                bne     COLON; new: 1 cycle more on ":" case
00042Cr 2               .endif
00042Cr 2  A0 02                ldy     #$02
00042Er 2  B1 CF                lda     (TXTPTR),y
000430r 2  18                   clc
000431r 2               .ifdef CONFIG_2
000431r 2  D0 03 4C rr          jeq     L2701
000435r 2  rr           
000436r 2               .else
000436r 2                       beq     L2701
000436r 2               .endif
000436r 2  C8                   iny
000437r 2  B1 CF                lda     (TXTPTR),y
000439r 2  85 8E                sta     CURLIN
00043Br 2  C8                   iny
00043Cr 2  B1 CF                lda     (TXTPTR),y
00043Er 2  85 8F                sta     CURLIN+1
000440r 2  98                   tya
000441r 2  65 CF                adc     TXTPTR
000443r 2  85 CF                sta     TXTPTR
000445r 2  90 02                bcc     NEWSTT2
000447r 2  E6 D0                inc     TXTPTR+1
000449r 2               NEWSTT2:
000449r 2  20 C8 00             jsr     CHRGET
00044Cr 2  20 rr rr             jsr     EXECUTE_STATEMENT
00044Fr 2  4C rr rr             jmp     NEWSTT
000452r 2               
000452r 2               ; ----------------------------------------------------------------------------
000452r 2               ; EXECUTE A STATEMENT
000452r 2               ;
000452r 2               ; (A) IS FIRST CHAR OF STATEMENT
000452r 2               ; CARRY IS SET
000452r 2               ; ----------------------------------------------------------------------------
000452r 2               EXECUTE_STATEMENT:
000452r 2               .ifndef CONFIG_11A
000452r 2                       beq     RET1
000452r 2               .else
000452r 2  F0 3C                beq     RET2
000454r 2               .endif
000454r 2               .ifndef CONFIG_11
000454r 2                       sec
000454r 2               .endif
000454r 2               EXECUTE_STATEMENT1:
000454r 2  E9 80                sbc     #$80
000456r 2               .ifndef CONFIG_11
000456r 2                       jcc     LET	; old: 1 cycle more on instr.
000456r 2               .else
000456r 2  90 11                bcc     LET1; new: 1 cycle more on assignment
000458r 2               .endif
000458r 2  C9 1C                cmp     #NUM_TOKENS
00045Ar 2               .ifdef CONFIG_2
00045Ar 2  B0 17                bcs     LC721
00045Cr 2               .else
00045Cr 2                       bcs     SYNERR1
00045Cr 2               .endif
00045Cr 2  0A                   asl     a
00045Dr 2  A8                   tay
00045Er 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE+1,y
000461r 2  48                   pha
000462r 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE,y
000465r 2  48                   pha
000466r 2  4C C8 00             jmp     CHRGET
000469r 2               
000469r 2               .ifdef CONFIG_11
000469r 2               LET1:
000469r 2  4C rr rr             jmp     LET
00046Cr 2               
00046Cr 2               COLON:
00046Cr 2  C9 3A                cmp     #$3A
00046Er 2  F0 D9                beq     NEWSTT2
000470r 2               SYNERR1:
000470r 2  4C rr rr             jmp     SYNERR
000473r 2               .endif
000473r 2               
000473r 2               .ifdef CONFIG_2; GO TO
000473r 2               LC721:
000473r 2  C9 44                cmp     #TOKEN_GO-$80
000475r 2  D0 F9                bne     SYNERR1
000477r 2  20 C8 00             jsr     CHRGET
00047Ar 2  A9 9D                lda     #TOKEN_TO
00047Cr 2  20 rr rr             jsr     SYNCHR
00047Fr 2  4C rr rr             jmp     GOTO
000482r 2               .endif
000482r 2               
000482r 2               ; ----------------------------------------------------------------------------
000482r 2               ; "RESTORE" STATEMENT
000482r 2               ; ----------------------------------------------------------------------------
000482r 2               RESTORE:
000482r 2  38                   sec
000483r 2  A5 80                lda     TXTTAB
000485r 2  E9 01                sbc     #$01
000487r 2  A4 81                ldy     TXTTAB+1
000489r 2  B0 01                bcs     SETDA
00048Br 2  88                   dey
00048Cr 2               SETDA:
00048Cr 2  85 96                sta     DATPTR
00048Er 2  84 97                sty     DATPTR+1
000490r 2               RET2:
000490r 2  60                   rts
000491r 2               
000491r 2               .include "iscntc.s"
000491r 3               .segment "CODE"
000491r 3               ; ----------------------------------------------------------------------------
000491r 3               ; SEE IF CONTROL-C TYPED
000491r 3               ; ----------------------------------------------------------------------------
000491r 3               .ifndef CONFIG_CBM_ALL
000491r 3               .include "cbm_iscntc.s"
000491r 4               ; nothing - ISCNTC is a KERNAL function
000491r 4               
000491r 3               .endif
000491r 3               .ifdef KBD
000491r 3               .include "kbd_iscntc.s"
000491r 3               .endif
000491r 3               .ifdef OSI
000491r 3               .include "osi_iscntc.s"
000491r 3               .endif
000491r 3               .ifdef APPLE
000491r 3               .include "apple_iscntc.s"
000491r 3               .endif
000491r 3               .ifdef KIM
000491r 3               .include "kim_iscntc.s"
000491r 3               .endif
000491r 3               .ifdef MICROTAN
000491r 3               .include "microtan_iscntc.s"
000491r 3               .endif
000491r 3               .ifdef AIM65
000491r 3               .include "aim65_iscntc.s"
000491r 3               .endif
000491r 3               .ifdef SYM1
000491r 3               .include "sym1_iscntc.s"
000491r 3               .endif
000491r 3               .ifdef hmc56
000491r 3               .include "hmc56_iscntc.s"
000491r 4               ISCNTC:
000491r 4  20 rr rr             jsr MONRDKEY
000494r 4  90 07                bcc not_cntc
000496r 4  C9 03                cmp #3
000498r 4  D0 03                bne not_cntc
00049Ar 4  4C rr rr             jmp is_cntc
00049Dr 4               
00049Dr 4               not_cntc:
00049Dr 4  60                   rts
00049Er 4               
00049Er 4               is_cntc:
00049Er 4                       ; Fall through
00049Er 4               
00049Er 3               .endif
00049Er 3               ;!!! runs into "STOP"
00049Er 3               
00049Er 2               ;!!! runs into "STOP"
00049Er 2               ; ----------------------------------------------------------------------------
00049Er 2               ; "STOP" STATEMENT
00049Er 2               ; ----------------------------------------------------------------------------
00049Er 2               STOP:
00049Er 2  B0 01                bcs     END2
0004A0r 2               
0004A0r 2               ; ----------------------------------------------------------------------------
0004A0r 2               ; "END" STATEMENT
0004A0r 2               ; ----------------------------------------------------------------------------
0004A0r 2               END:
0004A0r 2  18                   clc
0004A1r 2               END2:
0004A1r 2  D0 3D                bne     RET1
0004A3r 2  A5 CF                lda     TXTPTR
0004A5r 2  A4 D0                ldy     TXTPTR+1
0004A7r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
0004A7r 2               ; BUG on AppleSoft I
0004A7r 2               ; fix exists on AppleSoft II
0004A7r 2               ; TXTPTR+1 will always be > 0
0004A7r 2                       ldx     CURLIN+1
0004A7r 2                       inx
0004A7r 2               .endif
0004A7r 2  F0 0C                beq     END4
0004A9r 2  85 92                sta     OLDTEXT
0004ABr 2  84 93                sty     OLDTEXT+1
0004ADr 2               CONTROL_C_TYPED:
0004ADr 2  A5 8E                lda     CURLIN
0004AFr 2  A4 8F                ldy     CURLIN+1
0004B1r 2  85 90                sta     OLDLIN
0004B3r 2  84 91                sty     OLDLIN+1
0004B5r 2               END4:
0004B5r 2  68                   pla
0004B6r 2  68                   pla
0004B7r 2               L2701:
0004B7r 2  A9 rr                lda     #<QT_BREAK
0004B9r 2  A0 rr                ldy     #>QT_BREAK
0004BBr 2               .ifndef KBD
0004BBr 2  A2 00                ldx     #$00
0004BDr 2  86 6A                stx     Z14
0004BFr 2               .endif
0004BFr 2  90 03                bcc     L270E
0004C1r 2  4C rr rr             jmp     PRINT_ERROR_LINNUM
0004C4r 2               L270E:
0004C4r 2  4C rr rr             jmp     RESTART
0004C7r 2               .ifdef KBD
0004C7r 2               LE664:
0004C7r 2                       tay
0004C7r 2                       jmp     SNGFLT
0004C7r 2               .endif
0004C7r 2               
0004C7r 2               ; ----------------------------------------------------------------------------
0004C7r 2               ; "CONT" COMMAND
0004C7r 2               ; ----------------------------------------------------------------------------
0004C7r 2               CONT:
0004C7r 2  D0 17                bne     RET1
0004C9r 2  A2 D2                ldx     #ERR_CANTCONT
0004CBr 2  A4 93                ldy     OLDTEXT+1
0004CDr 2  D0 03                bne     L271C
0004CFr 2  4C rr rr             jmp     ERROR
0004D2r 2               L271C:
0004D2r 2  A5 92                lda     OLDTEXT
0004D4r 2  85 CF                sta     TXTPTR
0004D6r 2  84 D0                sty     TXTPTR+1
0004D8r 2  A5 90                lda     OLDLIN
0004DAr 2  A4 91                ldy     OLDLIN+1
0004DCr 2  85 8E                sta     CURLIN
0004DEr 2  84 8F                sty     CURLIN+1
0004E0r 2               RET1:
0004E0r 2  60                   rts
0004E1r 2               
0004E1r 2               .ifdef KBD
0004E1r 2               PRT:
0004E1r 2                       jsr     GETBYT
0004E1r 2                       txa
0004E1r 2               ; not ROR bug safe
0004E1r 2                       ror     a
0004E1r 2                       ror     a
0004E1r 2                       ror     a
0004E1r 2                       sta     $8F
0004E1r 2                       rts
0004E1r 2               
0004E1r 2               LE68C:
0004E1r 2                       ldy     #$12
0004E1r 2               LE68E:
0004E1r 2                       lda     LEA30,y
0004E1r 2                       sta     $03A2,y
0004E1r 2                       dey
0004E1r 2                       bpl     LE68E
0004E1r 2                       rts
0004E1r 2               .endif
0004E1r 2               
0004E1r 2               .ifndef AIM65
0004E1r 2               .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0004E1r 2               ; CBM1 has the keyword removed,
0004E1r 2               ; but the code is still here
0004E1r 2               NULL:
0004E1r 2                       jsr     GETBYT
0004E1r 2                       bne     RET1
0004E1r 2                       inx
0004E1r 2                       cpx     #NULL_MAX
0004E1r 2                       bcs     L2739
0004E1r 2                       dex
0004E1r 2                       stx     Z15
0004E1r 2               L2738:
0004E1r 2                       rts
0004E1r 2               L2739:
0004E1r 2                       jmp     IQERR
0004E1r 2               .endif
0004E1r 2               .ifndef CONFIG_11A
0004E1r 2               CLEAR:
0004E1r 2                       bne     RET1
0004E1r 2                       jmp     CLEARC
0004E1r 2               .endif
0004E1r 2               .endif
0004E1r 2               
0004E1r 1               .include "loadsave.s"
0004E1r 2               .segment "CODE"
0004E1r 2               
0004E1r 2               .ifdef APPLE
0004E1r 2               .include "apple_loadsave.s"
0004E1r 2               .endif
0004E1r 2               .ifdef KIM
0004E1r 2               .include "kim_loadsave.s"
0004E1r 2               .endif
0004E1r 2               .ifdef MICROTAN
0004E1r 2               .include "microtan_loadsave.s"
0004E1r 2               .endif
0004E1r 2               .ifdef AIM65
0004E1r 2               .include "aim65_loadsave.s"
0004E1r 2               .endif
0004E1r 2               .ifdef SYM1
0004E1r 2               .include "sym1_loadsave.s"
0004E1r 2               .endif
0004E1r 2               
0004E1r 1               .include "flow2.s"
0004E1r 2               .segment "CODE"
0004E1r 2               ; ----------------------------------------------------------------------------
0004E1r 2               ; "RUN" COMMAND
0004E1r 2               ; ----------------------------------------------------------------------------
0004E1r 2               RUN:
0004E1r 2  D0 03                bne     L27CF
0004E3r 2  4C rr rr             jmp     SETPTRS
0004E6r 2               L27CF:
0004E6r 2  20 rr rr             jsr     CLEARC
0004E9r 2  4C rr rr             jmp     L27E9
0004ECr 2               
0004ECr 2               ; ----------------------------------------------------------------------------
0004ECr 2               ; "GOSUB" STATEMENT
0004ECr 2               ;
0004ECr 2               ; LEAVES 7 BYTES ON STACK:
0004ECr 2               ; 2 -- RETURN ADDRESS (NEWSTT)
0004ECr 2               ; 2 -- TXTPTR
0004ECr 2               ; 2 -- LINE #
0004ECr 2               ; 1 -- GOSUB TOKEN
0004ECr 2               ; ----------------------------------------------------------------------------
0004ECr 2               GOSUB:
0004ECr 2  A9 03                lda     #$03
0004EEr 2  20 rr rr             jsr     CHKMEM
0004F1r 2  A5 D0                lda     TXTPTR+1
0004F3r 2  48                   pha
0004F4r 2  A5 CF                lda     TXTPTR
0004F6r 2  48                   pha
0004F7r 2  A5 8F                lda     CURLIN+1
0004F9r 2  48                   pha
0004FAr 2  A5 8E                lda     CURLIN
0004FCr 2  48                   pha
0004FDr 2  A9 8C                lda     #TOKEN_GOSUB
0004FFr 2  48                   pha
000500r 2               L27E9:
000500r 2  20 CE 00             jsr     CHRGOT
000503r 2  20 rr rr             jsr     GOTO
000506r 2  4C rr rr             jmp     NEWSTT
000509r 2               
000509r 2               ; ----------------------------------------------------------------------------
000509r 2               ; "GOTO" STATEMENT
000509r 2               ; ALSO USED BY "RUN" AND "GOSUB"
000509r 2               ; ----------------------------------------------------------------------------
000509r 2               GOTO:
000509r 2  20 rr rr             jsr     LINGET
00050Cr 2  20 rr rr             jsr     REMN
00050Fr 2  A5 8F                lda     CURLIN+1
000511r 2  C5 0F                cmp     LINNUM+1
000513r 2  B0 0B                bcs     L2809
000515r 2  98                   tya
000516r 2  38                   sec
000517r 2  65 CF                adc     TXTPTR
000519r 2  A6 D0                ldx     TXTPTR+1
00051Br 2  90 07                bcc     L280D
00051Dr 2  E8                   inx
00051Er 2  B0 04                bcs     L280D
000520r 2               L2809:
000520r 2  A5 80                lda     TXTTAB
000522r 2  A6 81                ldx     TXTTAB+1
000524r 2               L280D:
000524r 2               .ifdef KBD
000524r 2                       jsr     LF457
000524r 2                       bne     UNDERR
000524r 2               .else
000524r 2  20 rr rr             jsr     FL1
000527r 2  90 1E                bcc     UNDERR
000529r 2               .endif
000529r 2  A5 B4                lda     LOWTRX
00052Br 2  E9 01                sbc     #$01
00052Dr 2  85 CF                sta     TXTPTR
00052Fr 2  A5 B5                lda     LOWTRX+1
000531r 2  E9 00                sbc     #$00
000533r 2  85 D0                sta     TXTPTR+1
000535r 2               L281E:
000535r 2  60                   rts
000536r 2               
000536r 2               ; ----------------------------------------------------------------------------
000536r 2               ; "POP" AND "RETURN" STATEMENTS
000536r 2               ; ----------------------------------------------------------------------------
000536r 2               POP:
000536r 2  D0 FD                bne     L281E
000538r 2  A9 FF                lda     #$FF
00053Ar 2               .ifdef CONFIG_2A
00053Ar 2  85 9F                sta     FORPNT+1 ; bugfix, wrong in AppleSoft II
00053Cr 2               .else
00053Cr 2                       sta     FORPNT
00053Cr 2               .endif
00053Cr 2  20 rr rr             jsr     GTFORPNT
00053Fr 2  9A                   txs
000540r 2  C9 8C                cmp     #TOKEN_GOSUB
000542r 2  F0 0B                beq     RETURN
000544r 2  A2 16                ldx     #ERR_NOGOSUB
000546r 2  2C                   .byte   $2C
000547r 2               UNDERR:
000547r 2  A2 5A                ldx     #ERR_UNDEFSTAT
000549r 2  4C rr rr             jmp     ERROR
00054Cr 2               ; ----------------------------------------------------------------------------
00054Cr 2               SYNERR2:
00054Cr 2  4C rr rr             jmp     SYNERR
00054Fr 2               ; ----------------------------------------------------------------------------
00054Fr 2               RETURN:
00054Fr 2  68                   pla
000550r 2  68                   pla
000551r 2  85 8E                sta     CURLIN
000553r 2  68                   pla
000554r 2  85 8F                sta     CURLIN+1
000556r 2  68                   pla
000557r 2  85 CF                sta     TXTPTR
000559r 2  68                   pla
00055Ar 2  85 D0                sta     TXTPTR+1
00055Cr 2               
00055Cr 2               ; ----------------------------------------------------------------------------
00055Cr 2               ; "DATA" STATEMENT
00055Cr 2               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
00055Cr 2               ; ----------------------------------------------------------------------------
00055Cr 2               DATA:
00055Cr 2  20 rr rr             jsr     DATAN
00055Fr 2               
00055Fr 2               ; ----------------------------------------------------------------------------
00055Fr 2               ; ADD (Y) TO TXTPTR
00055Fr 2               ; ----------------------------------------------------------------------------
00055Fr 2               ADDON:
00055Fr 2  98                   tya
000560r 2  18                   clc
000561r 2  65 CF                adc     TXTPTR
000563r 2  85 CF                sta     TXTPTR
000565r 2  90 02                bcc     L2852
000567r 2  E6 D0                inc     TXTPTR+1
000569r 2               L2852:
000569r 2  60                   rts
00056Ar 2               
00056Ar 2               ; ----------------------------------------------------------------------------
00056Ar 2               ; SCAN AHEAD TO NEXT ":" OR EOL
00056Ar 2               ; ----------------------------------------------------------------------------
00056Ar 2               DATAN:
00056Ar 2  A2 3A                ldx     #$3A
00056Cr 2  2C                   .byte   $2C
00056Dr 2               REMN:
00056Dr 2  A2 00                ldx     #$00
00056Fr 2  86 60                stx     CHARAC
000571r 2  A0 00                ldy     #$00
000573r 2  84 61                sty     ENDCHR
000575r 2               L285E:
000575r 2  A5 61                lda     ENDCHR
000577r 2  A6 60                ldx     CHARAC
000579r 2  85 60                sta     CHARAC
00057Br 2  86 61                stx     ENDCHR
00057Dr 2               L2866:
00057Dr 2  B1 CF                lda     (TXTPTR),y
00057Fr 2  F0 E8                beq     L2852
000581r 2  C5 61                cmp     ENDCHR
000583r 2  F0 E4                beq     L2852
000585r 2  C8                   iny
000586r 2  C9 22                cmp     #$22
000588r 2               .ifndef CONFIG_11
000588r 2                       beq     L285E; old: swap & cont is faster
000588r 2                       bne     L2866
000588r 2               .else
000588r 2  D0 F3                bne     L2866; new: cont is faster
00058Ar 2  F0 E9                beq     L285E
00058Cr 2               .endif
00058Cr 2               
00058Cr 2               ; ----------------------------------------------------------------------------
00058Cr 2               ; "IF" STATEMENT
00058Cr 2               ; ----------------------------------------------------------------------------
00058Cr 2               IF:
00058Cr 2  20 rr rr             jsr     FRMEVL
00058Fr 2  20 CE 00             jsr     CHRGOT
000592r 2  C9 88                cmp     #TOKEN_GOTO
000594r 2  F0 05                beq     L2884
000596r 2  A9 A0                lda     #TOKEN_THEN
000598r 2  20 rr rr             jsr     SYNCHR
00059Br 2               L2884:
00059Br 2  A5 B6                lda     FAC
00059Dr 2  D0 05                bne     L288D
00059Fr 2               
00059Fr 2               ; ----------------------------------------------------------------------------
00059Fr 2               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
00059Fr 2               ; ----------------------------------------------------------------------------
00059Fr 2               REM:
00059Fr 2  20 rr rr             jsr     REMN
0005A2r 2  F0 BB                beq     ADDON
0005A4r 2               L288D:
0005A4r 2  20 CE 00             jsr     CHRGOT
0005A7r 2  B0 03                bcs     L2895
0005A9r 2  4C rr rr             jmp     GOTO
0005ACr 2               L2895:
0005ACr 2  4C rr rr             jmp     EXECUTE_STATEMENT
0005AFr 2               
0005AFr 2               ; ----------------------------------------------------------------------------
0005AFr 2               ; "ON" STATEMENT
0005AFr 2               ;
0005AFr 2               ; ON <EXP> GOTO <LIST>
0005AFr 2               ; ON <EXP> GOSUB <LIST>
0005AFr 2               ; ----------------------------------------------------------------------------
0005AFr 2               ON:
0005AFr 2  20 rr rr             jsr     GETBYT
0005B2r 2  48                   pha
0005B3r 2  C9 8C                cmp     #TOKEN_GOSUB
0005B5r 2  F0 04                beq     L28A4
0005B7r 2               L28A0:
0005B7r 2  C9 88                cmp     #TOKEN_GOTO
0005B9r 2  D0 91                bne     SYNERR2
0005BBr 2               L28A4:
0005BBr 2  C6 BA                dec     FAC_LAST
0005BDr 2  D0 04                bne     L28AC
0005BFr 2  68                   pla
0005C0r 2  4C rr rr             jmp     EXECUTE_STATEMENT1
0005C3r 2               L28AC:
0005C3r 2  20 C8 00             jsr     CHRGET
0005C6r 2  20 rr rr             jsr     LINGET
0005C9r 2  C9 2C                cmp     #$2C
0005CBr 2  F0 EE                beq     L28A4
0005CDr 2  68                   pla
0005CEr 2               L28B7:
0005CEr 2  60                   rts
0005CFr 2               
0005CFr 1               .include "misc1.s"
0005CFr 2               .segment "CODE"
0005CFr 2               
0005CFr 2               ; ----------------------------------------------------------------------------
0005CFr 2               ; CONVERT LINE NUMBER
0005CFr 2               ; ----------------------------------------------------------------------------
0005CFr 2               LINGET:
0005CFr 2  A2 00                ldx     #$00
0005D1r 2  86 0E                stx     LINNUM
0005D3r 2  86 0F                stx     LINNUM+1
0005D5r 2               L28BE:
0005D5r 2  B0 F7                bcs     L28B7
0005D7r 2  E9 2F                sbc     #$2F
0005D9r 2  85 60                sta     CHARAC
0005DBr 2  A5 0F                lda     LINNUM+1
0005DDr 2  85 77                sta     INDEX
0005DFr 2  C9 19                cmp     #$19
0005E1r 2  B0 D4                bcs     L28A0
0005E3r 2               ; <<<<<DANGEROUS CODE>>>>>
0005E3r 2               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
0005E3r 2               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
0005E3r 2               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
0005E3r 2               ; FOR OTHER CALLS TO LINGET.
0005E3r 2               ;
0005E3r 2               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
0005E3r 2               ; THEN TYPE "GO TO 437761".
0005E3r 2               ;
0005E3r 2               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
0005E3r 2               ; THE PROBLEM.  ($AB00 - $ABFF)
0005E3r 2               ; <<<<<DANGEROUS CODE>>>>>
0005E3r 2  A5 0E                lda     LINNUM
0005E5r 2  0A                   asl     a
0005E6r 2  26 77                rol     INDEX
0005E8r 2  0A                   asl     a
0005E9r 2  26 77                rol     INDEX
0005EBr 2  65 0E                adc     LINNUM
0005EDr 2  85 0E                sta     LINNUM
0005EFr 2  A5 77                lda     INDEX
0005F1r 2  65 0F                adc     LINNUM+1
0005F3r 2  85 0F                sta     LINNUM+1
0005F5r 2  06 0E                asl     LINNUM
0005F7r 2  26 0F                rol     LINNUM+1
0005F9r 2  A5 0E                lda     LINNUM
0005FBr 2  65 60                adc     CHARAC
0005FDr 2  85 0E                sta     LINNUM
0005FFr 2  90 02                bcc     L28EC
000601r 2  E6 0F                inc     LINNUM+1
000603r 2               L28EC:
000603r 2  20 C8 00             jsr     CHRGET
000606r 2  4C rr rr             jmp     L28BE
000609r 2               
000609r 2               ; ----------------------------------------------------------------------------
000609r 2               ; "LET" STATEMENT
000609r 2               ;
000609r 2               ; LET <VAR> = <EXP>
000609r 2               ; <VAR> = <EXP>
000609r 2               ; ----------------------------------------------------------------------------
000609r 2               LET:
000609r 2  20 rr rr             jsr     PTRGET
00060Cr 2  85 9E                sta     FORPNT
00060Er 2  84 9F                sty     FORPNT+1
000610r 2  A9 AB                lda     #TOKEN_EQUAL
000612r 2  20 rr rr             jsr     SYNCHR
000615r 2               .ifndef CONFIG_SMALL
000615r 2  A5 65                lda     VALTYP+1
000617r 2  48                   pha
000618r 2               .endif
000618r 2  A5 64                lda     VALTYP
00061Ar 2  48                   pha
00061Br 2  20 rr rr             jsr     FRMEVL
00061Er 2  68                   pla
00061Fr 2  2A                   rol     a
000620r 2  20 rr rr             jsr     CHKVAL
000623r 2  D0 18                bne     LETSTRING
000625r 2               .ifndef CONFIG_SMALL
000625r 2  68                   pla
000626r 2               LET2:
000626r 2  10 12                bpl     L2923
000628r 2  20 rr rr             jsr     ROUND_FAC
00062Br 2  20 rr rr             jsr     AYINT
00062Er 2  A0 00                ldy     #$00
000630r 2  A5 B9                lda     FAC+3
000632r 2  91 9E                sta     (FORPNT),y
000634r 2  C8                   iny
000635r 2  A5 BA                lda     FAC+4
000637r 2  91 9E                sta     (FORPNT),y
000639r 2  60                   rts
00063Ar 2               L2923:
00063Ar 2               .endif
00063Ar 2               
00063Ar 2               ; ----------------------------------------------------------------------------
00063Ar 2               ; REAL VARIABLE = EXPRESSION
00063Ar 2               ; ----------------------------------------------------------------------------
00063Ar 2  4C rr rr             jmp     SETFOR
00063Dr 2               LETSTRING:
00063Dr 2               .ifndef CONFIG_SMALL
00063Dr 2  68                   pla
00063Er 2               .endif
00063Er 2               
00063Er 2               ; ----------------------------------------------------------------------------
00063Er 2               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
00063Er 2               ; ----------------------------------------------------------------------------
00063Er 2               PUTSTR:
00063Er 2               .ifdef CONFIG_CBM_ALL
00063Er 2                       ldy     FORPNT+1
00063Er 2                 .ifdef CBM1
00063Er 2                       cpy     #$D0	; TI$
00063Er 2                 .else
00063Er 2                       cpy     #$DE
00063Er 2                 .endif
00063Er 2                       bne     LC92B
00063Er 2                       jsr     FREFAC
00063Er 2                       cmp     #$06
00063Er 2                 .ifdef CBM2
00063Er 2                       bne     IQERR1
00063Er 2                 .else
00063Er 2                       jne     IQERR
00063Er 2                 .endif
00063Er 2                       ldy     #$00
00063Er 2                       sty     FAC
00063Er 2                       sty     FACSIGN
00063Er 2               LC8E8:
00063Er 2                       sty     STRNG2
00063Er 2                       jsr     LC91C
00063Er 2                       jsr     MUL10
00063Er 2                       inc     STRNG2
00063Er 2                       ldy     STRNG2
00063Er 2                       jsr     LC91C
00063Er 2                       jsr     COPY_FAC_TO_ARG_ROUNDED
00063Er 2                       tax
00063Er 2                       beq     LC902
00063Er 2                       inx
00063Er 2                       txa
00063Er 2                       jsr     LD9BF
00063Er 2               LC902:
00063Er 2                       ldy     STRNG2
00063Er 2                       iny
00063Er 2                       cpy     #$06
00063Er 2                       bne     LC8E8
00063Er 2                       jsr     MUL10
00063Er 2                       jsr     QINT
00063Er 2                       ldx     #$02
00063Er 2                       sei
00063Er 2               LC912:
00063Er 2                       lda     FAC+2,x
00063Er 2                       sta     TISTR,x
00063Er 2                       dex
00063Er 2                       bpl     LC912
00063Er 2                       cli
00063Er 2                       rts
00063Er 2               LC91C:
00063Er 2                       lda     (INDEX),y
00063Er 2                       jsr     CHRGOT2
00063Er 2                       bcc     LC926
00063Er 2               IQERR1:
00063Er 2                       jmp     IQERR
00063Er 2               LC926:
00063Er 2                       sbc     #$2F
00063Er 2                       jmp     ADDACC
00063Er 2               LC92B:
00063Er 2               .endif
00063Er 2  A0 02                ldy     #$02
000640r 2  B1 B9                lda     (FAC_LAST-1),y
000642r 2  C5 89                cmp     FRETOP+1
000644r 2  90 17                bcc     L2946
000646r 2  D0 07                bne     L2938
000648r 2  88                   dey
000649r 2  B1 B9                lda     (FAC_LAST-1),y
00064Br 2  C5 88                cmp     FRETOP
00064Dr 2  90 0E                bcc     L2946
00064Fr 2               L2938:
00064Fr 2  A4 BA                ldy     FAC_LAST
000651r 2  C4 83                cpy     VARTAB+1
000653r 2  90 08                bcc     L2946
000655r 2  D0 0D                bne     L294D
000657r 2  A5 B9                lda     FAC_LAST-1
000659r 2  C5 82                cmp     VARTAB
00065Br 2  B0 07                bcs     L294D
00065Dr 2               L2946:
00065Dr 2  A5 B9                lda     FAC_LAST-1
00065Fr 2  A4 BA                ldy     FAC_LAST
000661r 2  4C rr rr             jmp     L2963
000664r 2               L294D:
000664r 2  A0 00                ldy     #$00
000666r 2  B1 B9                lda     (FAC_LAST-1),y
000668r 2  20 rr rr             jsr     STRINI
00066Br 2  A5 A5                lda     DSCPTR
00066Dr 2  A4 A6                ldy     DSCPTR+1
00066Fr 2  85 C4                sta     STRNG1
000671r 2  84 C5                sty     STRNG1+1
000673r 2  20 rr rr             jsr     MOVINS
000676r 2  A9 B6                lda     #FAC
000678r 2  A0 00                ldy     #$00
00067Ar 2               L2963:
00067Ar 2  85 A5                sta     DSCPTR
00067Cr 2  84 A6                sty     DSCPTR+1
00067Er 2  20 rr rr             jsr     FRETMS
000681r 2  A0 00                ldy     #$00
000683r 2  B1 A5                lda     (DSCPTR),y
000685r 2  91 9E                sta     (FORPNT),y
000687r 2  C8                   iny
000688r 2  B1 A5                lda     (DSCPTR),y
00068Ar 2  91 9E                sta     (FORPNT),y
00068Cr 2  C8                   iny
00068Dr 2  B1 A5                lda     (DSCPTR),y
00068Fr 2  91 9E                sta     (FORPNT),y
000691r 2               RET5:
000691r 2  60                   rts
000692r 2               .ifdef AIM65
000692r 2               LB89D:
000692r 2                       cmp     #$21
000692r 2                       bne     RET5
000692r 2                       lda     #$80
000692r 2                       sta     PRIFLG
000692r 2                       jmp     CHRGET
000692r 2               .endif
000692r 2               
000692r 2               .ifdef CONFIG_FILE
000692r 2               PRINTH:
000692r 2                       jsr     CMD
000692r 2                       jmp     LCAD6
000692r 2               CMD:
000692r 2                       jsr     GETBYT
000692r 2                       beq     LC98F
000692r 2                       lda     #$2C
000692r 2                       jsr     SYNCHR
000692r 2               LC98F:
000692r 2                       php
000692r 2                       jsr     CHKOUT
000692r 2                       stx     CURDVC
000692r 2                       plp
000692r 2                       jmp     PRINT
000692r 2               .endif
000692r 2               
000692r 2               
000692r 1               .include "print.s"
000692r 2               .segment "CODE"
000692r 2               
000692r 2               .ifdef AIM65
000692r 2               PRINT:
000692r 2                       lda     PRIFLG
000692r 2                       sta     ZBE
000692r 2                       jsr     L297E
000692r 2               LB8B1:
000692r 2                       lda     ZBE
000692r 2                       sta     PRIFLG
000692r 2                       rts
000692r 2               .endif
000692r 2               
000692r 2               PRSTRING:
000692r 2  20 rr rr             jsr     STRPRT
000695r 2               L297E:
000695r 2  20 CE 00             jsr     CHRGOT
000698r 2               
000698r 2               ; ----------------------------------------------------------------------------
000698r 2               ; "PRINT" STATEMENT
000698r 2               ; ----------------------------------------------------------------------------
000698r 2               .ifndef AIM65
000698r 2               PRINT:
000698r 2               .endif
000698r 2  F0 3C                beq     CRDO
00069Ar 2               PRINT2:
00069Ar 2  F0 48                beq     L29DD
00069Cr 2               .ifdef AIM65
00069Cr 2                       jsr     LB89D
00069Cr 2                       beq     L29DD
00069Cr 2               .endif
00069Cr 2  C9 9C                cmp     #TOKEN_TAB
00069Er 2  F0 5C                beq     L29F5
0006A0r 2  C9 9F                cmp     #TOKEN_SPC
0006A2r 2               .ifdef CONFIG_2
0006A2r 2  18                   clc	; also AppleSoft II
0006A3r 2               .endif
0006A3r 2  F0 57                beq     L29F5
0006A5r 2  C9 2C                cmp     #','
0006A7r 2               ; Pre-KIM had no CLC. KIM added the CLC
0006A7r 2               ; here. Post-KIM moved the CLC up...
0006A7r 2               ; (makes no sense on KIM, liveness = 0)
0006A7r 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
0006A7r 2                       clc
0006A7r 2               .endif
0006A7r 2  F0 3C                beq     L29DE
0006A9r 2  C9 3B                cmp     #$3B
0006ABr 2  F0 64                beq     L2A0D
0006ADr 2  20 rr rr             jsr     FRMEVL
0006B0r 2  24 64                bit     VALTYP
0006B2r 2  30 DE                bmi     PRSTRING
0006B4r 2  20 rr rr             jsr     FOUT
0006B7r 2  20 rr rr             jsr     STRLIT
0006BAr 2               .ifndef CONFIG_NO_CR
0006BAr 2  A0 00                ldy     #$00
0006BCr 2  B1 B9                lda     (FAC_LAST-1),y
0006BEr 2  18                   clc
0006BFr 2  65 0B                adc     POSX
0006C1r 2                 .ifdef KBD
0006C1r 2                       cmp     #$28
0006C1r 2                 .else
0006C1r 2  C5 0C                cmp     Z17
0006C3r 2                 .endif
0006C3r 2  90 03                bcc     L29B1
0006C5r 2  20 rr rr             jsr     CRDO
0006C8r 2               L29B1:
0006C8r 2               .endif
0006C8r 2  20 rr rr             jsr     STRPRT
0006CBr 2               .ifdef KBD
0006CBr 2                       jmp     L297E
0006CBr 2               .else
0006CBr 2  20 rr rr             jsr     OUTSP
0006CEr 2  D0 C5                bne     L297E ; branch always
0006D0r 2               .endif
0006D0r 2               
0006D0r 2               .ifdef KBD
0006D0r 2               ; PATCHES
0006D0r 2               LE86C:
0006D0r 2                       pla
0006D0r 2                       jmp     CONTROL_C_TYPED
0006D0r 2               LE870:
0006D0r 2                       jsr     GETBYT
0006D0r 2                       txa
0006D0r 2               LE874:
0006D0r 2                       beq     LE878
0006D0r 2                       bpl     LE8F2
0006D0r 2               LE878:
0006D0r 2                       jmp     IQERR
0006D0r 2               ; PATCHES
0006D0r 2               .endif
0006D0r 2               
0006D0r 2               
0006D0r 2               
0006D0r 2               .ifndef KBD
0006D0r 2               L29B9:
0006D0r 2                 .ifdef CBM2
0006D0r 2                       lda     #$00
0006D0r 2                       sta     INPUTBUFFER,x
0006D0r 2                       ldx     #<(INPUTBUFFER-1)
0006D0r 2                       ldy     #>(INPUTBUFFER-1)
0006D0r 2                 .else
0006D0r 2                   .ifndef APPLE
0006D0r 2  A0 00                ldy     #$00
0006D2r 2  94 10                sty     INPUTBUFFER,x
0006D4r 2  A2 0F                ldx     #LINNUM+1
0006D6r 2                   .endif
0006D6r 2                   .if .def(MICROTAN) || .def(SYM1)
0006D6r 2                       bne     CRDO2
0006D6r 2               	.endif
0006D6r 2                 .endif
0006D6r 2                 .ifdef CONFIG_FILE
0006D6r 2                       lda     CURDVC
0006D6r 2                       bne     L29DD
0006D6r 2                 .endif
0006D6r 2               .endif
0006D6r 2               
0006D6r 2               
0006D6r 2               CRDO:
0006D6r 2               .if .def(CONFIG_PRINTNULLS) && .def(CONFIG_FILE)
0006D6r 2                       lda     CURDVC
0006D6r 2                       bne     LC9D8
0006D6r 2                       sta     POSX
0006D6r 2               LC9D8:
0006D6r 2               .endif
0006D6r 2  A9 0D                lda     #CRLF_1
0006D8r 2               .ifndef CONFIG_CBM_ALL
0006D8r 2  85 0B                sta     POSX
0006DAr 2               .endif
0006DAr 2  20 rr rr             jsr     OUTDO
0006DDr 2               CRDO2:
0006DDr 2  A9 0A                lda     #CRLF_2
0006DFr 2  20 rr rr             jsr     OUTDO
0006E2r 2               
0006E2r 2               PRINTNULLS:
0006E2r 2               .if .def(KBD) || .def(AIM65)
0006E2r 2                       lda     #$00
0006E2r 2                       sta     POSX
0006E2r 2                       eor     #$FF
0006E2r 2               .else
0006E2r 2                 .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0006E2r 2                   .ifdef CONFIG_FILE
0006E2r 2                   ; Although there is no statement for it,
0006E2r 2                   ; CBM1 had NULL support and ignores
0006E2r 2                   ; it when not targeting the screen,
0006E2r 2                   ; CBM2 dropped it completely.
0006E2r 2                       lda     CURDVC
0006E2r 2                       bne     L29DD
0006E2r 2                   .endif
0006E2r 2                       txa
0006E2r 2                       pha
0006E2r 2                       ldx     Z15
0006E2r 2                       beq     L29D9
0006E2r 2                     .ifdef SYM1
0006E2r 2                       lda     #$FF
0006E2r 2                     .else
0006E2r 2                       lda     #$00
0006E2r 2                     .endif
0006E2r 2               L29D3:
0006E2r 2                       jsr     OUTDO
0006E2r 2                       dex
0006E2r 2                       bne     L29D3
0006E2r 2               L29D9:
0006E2r 2                       stx     POSX
0006E2r 2                       pla
0006E2r 2                       tax
0006E2r 2                 .else
0006E2r 2                   .ifndef CONFIG_2
0006E2r 2                       lda     #$00
0006E2r 2                       sta     POSX
0006E2r 2                   .endif
0006E2r 2  49 FF                eor     #$FF
0006E4r 2                 .endif
0006E4r 2               .endif
0006E4r 2               L29DD:
0006E4r 2  60                   rts
0006E5r 2               L29DE:
0006E5r 2  A5 0B                lda     POSX
0006E7r 2               .ifndef CONFIG_NO_CR
0006E7r 2                 .ifdef KBD
0006E7r 2                       cmp     #$1A
0006E7r 2                 .else
0006E7r 2  C5 0D                cmp     Z18
0006E9r 2                 .endif
0006E9r 2  90 06                bcc     L29EA
0006EBr 2  20 rr rr             jsr     CRDO
0006EEr 2  4C rr rr             jmp     L2A0D
0006F1r 2               L29EA:
0006F1r 2               .endif
0006F1r 2  38                   sec
0006F2r 2               L29EB:
0006F2r 2               .if .def(CONFIG_CBM_ALL) || .def(AIM65)
0006F2r 2                       sbc     #$0A
0006F2r 2               .else
0006F2r 2                 .ifdef KBD
0006F2r 2                       sbc     #$0D
0006F2r 2                 .else
0006F2r 2  E9 0E                sbc     #$0E
0006F4r 2                 .endif
0006F4r 2               .endif
0006F4r 2  B0 FC                bcs     L29EB
0006F6r 2  49 FF                eor     #$FF
0006F8r 2  69 01                adc     #$01
0006FAr 2  D0 10                bne     L2A08
0006FCr 2               L29F5:
0006FCr 2               .ifdef CONFIG_11A
0006FCr 2  08                   php
0006FDr 2               .else
0006FDr 2                       pha
0006FDr 2               .endif
0006FDr 2  20 rr rr             jsr     GTBYTC
000700r 2  C9 29                cmp     #')'
000702r 2               .ifdef CONFIG_11A
000702r 2                 .ifdef CONFIG_2
000702r 2  D0 5C                bne     SYNERR4
000704r 2                 .else
000704r 2                       jne     SYNERR
000704r 2                 .endif
000704r 2  28                   plp
000705r 2  90 06                bcc     L2A09
000707r 2               .else
000707r 2                 .ifdef CONFIG_11
000707r 2                       jne     SYNERR
000707r 2                 .else
000707r 2                       bne     SYNERR4
000707r 2                 .endif
000707r 2                       pla
000707r 2                       cmp     #TOKEN_TAB
000707r 2                 .ifdef CONFIG_11
000707r 2                       bne     L2A09
000707r 2                 .else
000707r 2                       bne     L2A0A
000707r 2                 .endif
000707r 2               .endif
000707r 2  8A                   txa
000708r 2  E5 0B                sbc     POSX
00070Ar 2  90 05                bcc     L2A0D
00070Cr 2               .ifndef CONFIG_11
00070Cr 2                       beq     L2A0D
00070Cr 2               .endif
00070Cr 2               L2A08:
00070Cr 2  AA                   tax
00070Dr 2               .ifdef CONFIG_11
00070Dr 2               L2A09:
00070Dr 2  E8                   inx
00070Er 2               .endif
00070Er 2               L2A0A:
00070Er 2               .ifndef CONFIG_11
00070Er 2                       jsr     OUTSP
00070Er 2               .endif
00070Er 2  CA                   dex
00070Fr 2               .ifndef CONFIG_11
00070Fr 2                       bne     L2A0A
00070Fr 2               .else
00070Fr 2  D0 06                bne     L2A13
000711r 2               .endif
000711r 2               L2A0D:
000711r 2  20 C8 00             jsr     CHRGET
000714r 2  4C rr rr             jmp     PRINT2
000717r 2               .ifdef CONFIG_11
000717r 2               L2A13:
000717r 2  20 rr rr             jsr     OUTSP
00071Ar 2  D0 F2                bne     L2A0A
00071Cr 2               .endif
00071Cr 2               
00071Cr 2               ; ----------------------------------------------------------------------------
00071Cr 2               ; PRINT STRING AT (Y,A)
00071Cr 2               ; ----------------------------------------------------------------------------
00071Cr 2               STROUT:
00071Cr 2  20 rr rr             jsr     STRLIT
00071Fr 2               
00071Fr 2               ; ----------------------------------------------------------------------------
00071Fr 2               ; PRINT STRING AT (FACMO,FACLO)
00071Fr 2               ; ----------------------------------------------------------------------------
00071Fr 2               STRPRT:
00071Fr 2  20 rr rr             jsr     FREFAC
000722r 2  AA                   tax
000723r 2  A0 00                ldy     #$00
000725r 2  E8                   inx
000726r 2               L2A22:
000726r 2  CA                   dex
000727r 2  F0 BB                beq     L29DD
000729r 2  B1 77                lda     (INDEX),y
00072Br 2  20 rr rr             jsr     OUTDO
00072Er 2  C8                   iny
00072Fr 2  C9 0D                cmp     #$0D
000731r 2  D0 F3                bne     L2A22
000733r 2  20 rr rr             jsr     PRINTNULLS
000736r 2  4C rr rr             jmp     L2A22
000739r 2               ; ----------------------------------------------------------------------------
000739r 2               OUTSP:
000739r 2               .ifdef CONFIG_FILE
000739r 2                 .ifndef CBM1
000739r 2               ; on non-screen devices, print SPACE
000739r 2               ; instead of CRSR RIGHT
000739r 2                       lda     CURDVC
000739r 2                       beq     LCA40
000739r 2                       lda     #$20
000739r 2                       .byte   $2C
000739r 2               LCA40:
000739r 2                 .endif
000739r 2                       lda     #$1D ; CRSR RIGHT
000739r 2               .else
000739r 2  A9 20                lda     #$20
00073Br 2               .endif
00073Br 2  2C                   .byte   $2C
00073Cr 2               OUTQUES:
00073Cr 2  A9 3F                lda     #$3F
00073Er 2               
00073Er 2               ; ----------------------------------------------------------------------------
00073Er 2               ; PRINT CHAR FROM (A)
00073Er 2               ; ----------------------------------------------------------------------------
00073Er 2               OUTDO:
00073Er 2               .ifndef KBD
00073Er 2  24 6A                bit     Z14
000740r 2  30 09                bmi     L2A56
000742r 2               .endif
000742r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
000742r 2               ; Commodore forgot to remove this in CBM1
000742r 2                       pha
000742r 2               .endif
000742r 2               .ifdef CBM1
000742r 2                       cmp     #$1D ; CRSR RIGHT
000742r 2                       beq     LCA6A
000742r 2                       cmp     #$9D ; CRSR LEFT
000742r 2                       beq     LCA5A
000742r 2                       cmp     #$14 ; DEL
000742r 2                       bne     LCA64
000742r 2               LCA5A:
000742r 2                       lda     POSX
000742r 2                       beq     L2A4E
000742r 2                       lda     CURDVC
000742r 2                       bne     L2A4E
000742r 2                       dec     POSX
000742r 2               LCA64:
000742r 2                       and     #$7F
000742r 2               .endif
000742r 2               .ifndef CBM2
000742r 2  C9 20                cmp     #$20
000744r 2  90 02                bcc     L2A4E
000746r 2               .endif
000746r 2               LCA6A:
000746r 2               .ifdef CONFIG_CBM1_PATCHES
000746r 2                       lda     CURDVC
000746r 2                       jsr     PATCH6
000746r 2                       nop
000746r 2               .endif
000746r 2               .ifdef CONFIG_PRINT_CR
000746r 2                       lda     POSX
000746r 2                       cmp     Z17
000746r 2                       bne     L2A4C
000746r 2                 .ifdef AIM65
000746r 2                       lda #$00
000746r 2                       sta POSX
000746r 2                 .elseif .def(APPLE)
000746r 2                       nop ; PATCH!
000746r 2                       nop ; don't print CR
000746r 2                       nop
000746r 2                 .else
000746r 2                       jsr     CRDO
000746r 2                 .endif
000746r 2               L2A4C:
000746r 2               .endif
000746r 2               .ifndef CONFIG_CBM_ALL
000746r 2  E6 0B                inc     POSX
000748r 2               .endif
000748r 2               L2A4E:
000748r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
000748r 2               ; Commodore forgot to remove this in CBM1
000748r 2                       pla
000748r 2               .endif
000748r 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
000748r 2                       sty     DIMFLG
000748r 2               .endif
000748r 2               .ifdef CONFIG_IO_MSB
000748r 2                       ora     #$80
000748r 2               .endif
000748r 2  20 rr rr             jsr     MONCOUT
00074Br 2               .ifdef CONFIG_IO_MSB
00074Br 2                       and     #$7F
00074Br 2               .endif
00074Br 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
00074Br 2                       ldy     DIMFLG
00074Br 2               .endif
00074Br 2               .ifdef OSI
00074Br 2                       nop
00074Br 2                       nop
00074Br 2                       nop
00074Br 2                       nop
00074Br 2               .endif
00074Br 2               L2A56:
00074Br 2  29 FF                and     #$FF
00074Dr 2               LE8F2:
00074Dr 2  60                   rts
00074Er 2               
00074Er 2               ; ----------------------------------------------------------------------------
00074Er 2               ; ???
00074Er 2               ; ----------------------------------------------------------------------------
00074Er 2               .ifdef KBD
00074Er 2               LE8F3:
00074Er 2                       pha
00074Er 2                       lda     $047F
00074Er 2                       clc
00074Er 2                       beq     LE900
00074Er 2                       lda     #$00
00074Er 2                       sta     $047F
00074Er 2                       sec
00074Er 2               LE900:
00074Er 2                       pla
00074Er 2                       rts
00074Er 2               .endif
00074Er 2               
00074Er 1               .include "input.s"
00074Er 2               .segment "CODE"
00074Er 2               
00074Er 2               ; ----------------------------------------------------------------------------
00074Er 2               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
00074Er 2               ; IN NUMERIC FIELD.  MUST DISTINGUISH
00074Er 2               ; BETWEEN INPUT, READ, AND GET
00074Er 2               ; ----------------------------------------------------------------------------
00074Er 2               INPUTERR:
00074Er 2  A5 68                lda     INPUTFLG
000750r 2  F0 11                beq     RESPERR	; INPUT
000752r 2               .ifndef SYM1
000752r 2               .ifndef CONFIG_SMALL
000752r 2               .ifdef CONFIG_10A
000752r 2               ; without this, it treats GET errors
000752r 2               ; like READ errors
000752r 2  30 04                bmi     L2A63	; READ
000754r 2  A0 FF                ldy     #$FF	; GET
000756r 2  D0 04                bne     L2A67
000758r 2               L2A63:
000758r 2               .endif
000758r 2               .endif
000758r 2               .endif
000758r 2               .ifdef CONFIG_CBM1_PATCHES
000758r 2                       jsr     PATCH5
000758r 2               		nop
000758r 2               .else
000758r 2  A5 94                lda     Z8C
00075Ar 2  A4 95                ldy     Z8C+1
00075Cr 2               .endif
00075Cr 2               L2A67:
00075Cr 2  85 8E                sta     CURLIN
00075Er 2  84 8F                sty     CURLIN+1
000760r 2               SYNERR4:
000760r 2  4C rr rr             jmp     SYNERR
000763r 2               RESPERR:
000763r 2               .ifdef CONFIG_FILE
000763r 2                       lda     CURDVC
000763r 2                       beq     LCA8F
000763r 2                       ldx     #ERR_BADDATA
000763r 2                       jmp     ERROR
000763r 2               LCA8F:
000763r 2               .endif
000763r 2  A9 rr                lda     #<ERRREENTRY
000765r 2  A0 rr                ldy     #>ERRREENTRY
000767r 2  20 rr rr             jsr     STROUT
00076Ar 2  A5 92                lda     OLDTEXT
00076Cr 2  A4 93                ldy     OLDTEXT+1
00076Er 2  85 CF                sta     TXTPTR
000770r 2  84 D0                sty     TXTPTR+1
000772r 2               RTS20:
000772r 2  60                   rts
000773r 2               
000773r 2               ; ----------------------------------------------------------------------------
000773r 2               ; "GET" STATEMENT
000773r 2               ; ----------------------------------------------------------------------------
000773r 2               .ifndef CONFIG_SMALL
000773r 2               .ifndef SYM1
000773r 2               GET:
000773r 2  20 rr rr             jsr     ERRDIR
000776r 2               ; CBM: if GET#, then switch input
000776r 2               .ifdef CONFIG_FILE
000776r 2                       cmp     #'#'
000776r 2                       bne     LCAB6
000776r 2                       jsr     CHRGET
000776r 2                       jsr     GETBYT
000776r 2                       lda     #','
000776r 2                       jsr     SYNCHR
000776r 2                       jsr     CHKIN
000776r 2                       stx     CURDVC
000776r 2               LCAB6:
000776r 2               .endif
000776r 2  A2 11                ldx     #<(INPUTBUFFER+1)
000778r 2  A0 00                ldy     #>(INPUTBUFFER+1)
00077Ar 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
00077Ar 2                       lda     #$00
00077Ar 2                       sta     INPUTBUFFER+1
00077Ar 2               .else
00077Ar 2  84 11                sty     INPUTBUFFER+1
00077Cr 2               .endif
00077Cr 2  A9 40                lda     #$40
00077Er 2  20 rr rr             jsr     PROCESS_INPUT_LIST
000781r 2               ; CBM: if GET#, then switch input back
000781r 2               .ifdef CONFIG_FILE
000781r 2                       ldx     CURDVC
000781r 2                       bne     LCAD8
000781r 2               .endif
000781r 2  60                   rts
000782r 2               .endif
000782r 2               .endif
000782r 2               
000782r 2               ; ----------------------------------------------------------------------------
000782r 2               ; "INPUT#" STATEMENT
000782r 2               ; ----------------------------------------------------------------------------
000782r 2               .ifdef CONFIG_FILE
000782r 2               INPUTH:
000782r 2                       jsr     GETBYT
000782r 2                       lda     #$2C
000782r 2                       jsr     SYNCHR
000782r 2                       jsr     CHKIN
000782r 2                       stx     CURDVC
000782r 2                       jsr     L2A9E
000782r 2               LCAD6:
000782r 2                       lda     CURDVC
000782r 2               LCAD8:
000782r 2                       jsr     CLRCH
000782r 2                       ldx     #$00
000782r 2                       stx     CURDVC
000782r 2                       rts
000782r 2               LCAE0:
000782r 2               .endif
000782r 2               
000782r 2               .ifdef SYM1
000782r 2               LC9B0:
000782r 2                       jsr     OUTQUES	; '?'
000782r 2                       jsr     OUTSP
000782r 2                       jmp     L2A9E
000782r 2               .endif
000782r 2               ; ----------------------------------------------------------------------------
000782r 2               ; "INPUT" STATEMENT
000782r 2               ; ----------------------------------------------------------------------------
000782r 2               INPUT:
000782r 2               .ifndef KBD
000782r 2  46 6A                lsr     Z14
000784r 2               .endif
000784r 2               .ifdef AIM65
000784r 2                       lda     PRIFLG
000784r 2                       sta     ZBE
000784r 2                       jsr     LCFFA
000784r 2               .endif
000784r 2  C9 22                cmp     #$22
000786r 2               .ifdef SYM1
000786r 2                       bne     LC9B0
000786r 2               .else
000786r 2  D0 0B                bne     L2A9E
000788r 2               .endif
000788r 2  20 rr rr             jsr     STRTXT
00078Br 2  A9 3B                lda     #$3B
00078Dr 2  20 rr rr             jsr     SYNCHR
000790r 2  20 rr rr             jsr     STRPRT
000793r 2               L2A9E:
000793r 2  20 rr rr             jsr     ERRDIR
000796r 2  A9 2C                lda     #$2C
000798r 2  85 0F                sta     INPUTBUFFER-1
00079Ar 2               LCAF8:
00079Ar 2               .ifdef APPLE
00079Ar 2                       jsr     INLINX
00079Ar 2               .elseif .def(SYM1)
00079Ar 2                       jsr     INLIN
00079Ar 2               .else
00079Ar 2  20 rr rr             jsr     NXIN
00079Dr 2               .endif
00079Dr 2               .ifdef KBD
00079Dr 2                       bmi     L2ABE
00079Dr 2               .else
00079Dr 2                 .ifdef CONFIG_FILE
00079Dr 2                       lda     CURDVC
00079Dr 2                       beq     LCB0C
00079Dr 2                       lda     Z96
00079Dr 2                       and     #$02
00079Dr 2                       beq     LCB0C
00079Dr 2                       jsr     LCAD6
00079Dr 2                       jmp     DATA
00079Dr 2               LCB0C:
00079Dr 2                 .endif
00079Dr 2  A5 10                lda     INPUTBUFFER
00079Fr 2  D0 12                bne     L2ABE
0007A1r 2                 .ifdef CONFIG_FILE
0007A1r 2                       lda     CURDVC
0007A1r 2                       bne     LCAF8
0007A1r 2                 .endif
0007A1r 2                 .ifdef CONFIG_CBM1_PATCHES
0007A1r 2                       jmp     PATCH1
0007A1r 2                 .else
0007A1r 2  18                   clc
0007A2r 2  4C rr rr             jmp     CONTROL_C_TYPED
0007A5r 2                 .endif
0007A5r 2               .endif
0007A5r 2               
0007A5r 2               NXIN:
0007A5r 2               .ifdef KBD
0007A5r 2                       jsr     INLIN
0007A5r 2                       bmi     RTS20
0007A5r 2                       pla
0007A5r 2                       jmp     LE86C
0007A5r 2               .else
0007A5r 2                 .ifdef CONFIG_FILE
0007A5r 2                       lda     CURDVC
0007A5r 2                       bne     LCB21
0007A5r 2                 .endif
0007A5r 2  20 rr rr             jsr     OUTQUES	; '?'
0007A8r 2  20 rr rr             jsr     OUTSP
0007ABr 2               LCB21:
0007ABr 2  4C rr rr             jmp     INLIN
0007AEr 2               .endif
0007AEr 2               
0007AEr 2               ; ----------------------------------------------------------------------------
0007AEr 2               ; "GETC" STATEMENT
0007AEr 2               ; ----------------------------------------------------------------------------
0007AEr 2               .ifdef KBD
0007AEr 2               GETC:
0007AEr 2                       jsr     CONINT
0007AEr 2                       jsr     LF43D
0007AEr 2                       jmp     LE664
0007AEr 2               .endif
0007AEr 2               
0007AEr 2               ; ----------------------------------------------------------------------------
0007AEr 2               ; "READ" STATEMENT
0007AEr 2               ; ----------------------------------------------------------------------------
0007AEr 2               READ:
0007AEr 2  A6 96                ldx     DATPTR
0007B0r 2  A4 97                ldy     DATPTR+1
0007B2r 2               .ifdef CONFIG_NO_READ_Y_IS_ZERO_HACK
0007B2r 2               ; AppleSoft II, too
0007B2r 2                       lda     #$98	; READ
0007B2r 2                       .byte   $2C
0007B2r 2               L2ABE:
0007B2r 2                       lda     #$00	; INPUT
0007B2r 2               .else
0007B2r 2  A9                   .byte   $A9	; LDA #$98
0007B3r 2               L2ABE:
0007B3r 2  98                   tya
0007B4r 2               .endif
0007B4r 2               
0007B4r 2               ; ----------------------------------------------------------------------------
0007B4r 2               ; PROCESS INPUT LIST
0007B4r 2               ;
0007B4r 2               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
0007B4r 2               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
0007B4r 2               ; 				$40 FOR GET
0007B4r 2               ;				$98 FOR READ
0007B4r 2               ; ----------------------------------------------------------------------------
0007B4r 2               PROCESS_INPUT_LIST:
0007B4r 2  85 68                sta     INPUTFLG
0007B6r 2  86 98                stx     INPTR
0007B8r 2  84 99                sty     INPTR+1
0007BAr 2               PROCESS_INPUT_ITEM:
0007BAr 2  20 rr rr             jsr     PTRGET
0007BDr 2  85 9E                sta     FORPNT
0007BFr 2  84 9F                sty     FORPNT+1
0007C1r 2  A5 CF                lda     TXTPTR
0007C3r 2  A4 D0                ldy     TXTPTR+1
0007C5r 2  85 0E                sta     TXPSV
0007C7r 2  84 0F                sty     TXPSV+1
0007C9r 2  A6 98                ldx     INPTR
0007CBr 2  A4 99                ldy     INPTR+1
0007CDr 2  86 CF                stx     TXTPTR
0007CFr 2  84 D0                sty     TXTPTR+1
0007D1r 2  20 CE 00             jsr     CHRGOT
0007D4r 2  D0 1B                bne     INSTART
0007D6r 2  24 68                bit     INPUTFLG
0007D8r 2               .ifndef CONFIG_SMALL ; GET
0007D8r 2                .ifndef SYM1
0007D8r 2  50 0B                bvc     L2AF0
0007DAr 2                 .ifdef MICROTAN
0007DAr 2                       jsr     MONRDKEY2
0007DAr 2                 .elseif .def(AIM65)
0007DAr 2                       jsr     MONRDKEY2
0007DAr 2                 .else
0007DAr 2  20 rr rr             jsr     MONRDKEY
0007DDr 2                 .endif
0007DDr 2                 .ifdef CONFIG_IO_MSB
0007DDr 2                       and     #$7F
0007DDr 2                 .endif
0007DDr 2  85 10                sta     INPUTBUFFER
0007DFr 2               ; BUG: The beq/bne L2AF8 below is supposed
0007DFr 2               ; to be always taken. For this to happen,
0007DFr 2               ; the last load must be a 0 for beq
0007DFr 2               ; and != 0 for bne. The original Microsoft
0007DFr 2               ; code had ldx/ldy/bne here, which was only
0007DFr 2               ; correct for a non-ZP INPUTBUFFER. Commodore
0007DFr 2               ; fixed it in CBMBASIC V1 by swapping the
0007DFr 2               ; ldx and the ldy. It was broken on KIM,
0007DFr 2               ; but okay on APPLE and CBM2, because
0007DFr 2               ; these used a non-ZP INPUTBUFFER.
0007DFr 2               ; Microsoft fixed this somewhere after KIM
0007DFr 2               ; and before MICROTAN, by using beq instead
0007DFr 2               ; of bne in the ZP case.
0007DFr 2                 .ifdef CBM1
0007DFr 2                       ldy     #>(INPUTBUFFER-1)
0007DFr 2                       ldx     #<(INPUTBUFFER-1)
0007DFr 2                 .else
0007DFr 2  A2 0F                ldx     #<(INPUTBUFFER-1)
0007E1r 2  A0 00                ldy     #>(INPUTBUFFER-1)
0007E3r 2                 .endif
0007E3r 2                 .if .def(CONFIG_2) && (!.def(CONFIG_NO_INPUTBUFFER_ZP))
0007E3r 2  F0 08                beq     L2AF8	; always
0007E5r 2                 .else
0007E5r 2                       bne     L2AF8	; always
0007E5r 2                 .endif
0007E5r 2               L2AF0:
0007E5r 2                .endif
0007E5r 2               .endif
0007E5r 2  30 71                bmi     FINDATA
0007E7r 2               .ifdef CONFIG_FILE
0007E7r 2                       lda     CURDVC
0007E7r 2                       bne     LCB64
0007E7r 2               .endif
0007E7r 2               .ifdef KBD
0007E7r 2                       jsr     OUTQUESSP
0007E7r 2               .else
0007E7r 2  20 rr rr             jsr     OUTQUES
0007EAr 2               .endif
0007EAr 2               LCB64:
0007EAr 2  20 rr rr             jsr     NXIN
0007EDr 2               L2AF8:
0007EDr 2  86 CF                stx     TXTPTR
0007EFr 2  84 D0                sty     TXTPTR+1
0007F1r 2               
0007F1r 2               ; ----------------------------------------------------------------------------
0007F1r 2               INSTART:
0007F1r 2  20 C8 00             jsr     CHRGET
0007F4r 2  24 64                bit     VALTYP
0007F6r 2  10 31                bpl     L2B34
0007F8r 2               .ifndef CONFIG_SMALL ; GET
0007F8r 2                .ifndef SYM1
0007F8r 2  24 68                bit     INPUTFLG
0007FAr 2  50 09                bvc     L2B10
0007FCr 2                 .ifdef CONFIG_CBM1_PATCHES
0007FCr 2                       lda     #$00
0007FCr 2                       jsr     PATCH4
0007FCr 2                       nop
0007FCr 2                 .else
0007FCr 2  E8                   inx
0007FDr 2  86 CF                stx     TXTPTR
0007FFr 2  A9 00                lda     #$00
000801r 2  85 60                sta     CHARAC
000803r 2  F0 0C                beq     L2B1C
000805r 2                 .endif
000805r 2               L2B10:
000805r 2                .endif
000805r 2               .endif
000805r 2  85 60                sta     CHARAC
000807r 2  C9 22                cmp     #$22
000809r 2  F0 07                beq     L2B1D
00080Br 2  A9 3A                lda     #$3A
00080Dr 2  85 60                sta     CHARAC
00080Fr 2  A9 2C                lda     #$2C
000811r 2               L2B1C:
000811r 2  18                   clc
000812r 2               L2B1D:
000812r 2  85 61                sta     ENDCHR
000814r 2  A5 CF                lda     TXTPTR
000816r 2  A4 D0                ldy     TXTPTR+1
000818r 2  69 00                adc     #$00
00081Ar 2  90 01                bcc     L2B28
00081Cr 2  C8                   iny
00081Dr 2               L2B28:
00081Dr 2  20 rr rr             jsr     STRLT2
000820r 2  20 rr rr             jsr     POINT
000823r 2               .ifdef CONFIG_SMALL
000823r 2                       jsr     LETSTRING
000823r 2               .else
000823r 2  20 rr rr             jsr     PUTSTR
000826r 2               .endif
000826r 2  4C rr rr             jmp     INPUT_MORE
000829r 2               ; ----------------------------------------------------------------------------
000829r 2               L2B34:
000829r 2  20 rr rr             jsr     FIN
00082Cr 2               .ifdef CONFIG_SMALL
00082Cr 2                       jsr     SETFOR
00082Cr 2               .else
00082Cr 2  A5 65                lda     VALTYP+1
00082Er 2  20 rr rr             jsr     LET2
000831r 2               .endif
000831r 2               ; ----------------------------------------------------------------------------
000831r 2               INPUT_MORE:
000831r 2  20 CE 00             jsr     CHRGOT
000834r 2  F0 07                beq     L2B48
000836r 2  C9 2C                cmp     #$2C
000838r 2  F0 03                beq     L2B48
00083Ar 2  4C rr rr             jmp     INPUTERR
00083Dr 2               L2B48:
00083Dr 2  A5 CF                lda     TXTPTR
00083Fr 2  A4 D0                ldy     TXTPTR+1
000841r 2  85 98                sta     INPTR
000843r 2  84 99                sty     INPTR+1
000845r 2  A5 0E                lda     TXPSV
000847r 2  A4 0F                ldy     TXPSV+1
000849r 2  85 CF                sta     TXTPTR
00084Br 2  84 D0                sty     TXTPTR+1
00084Dr 2  20 CE 00             jsr     CHRGOT
000850r 2  F0 2C                beq     INPDONE
000852r 2  20 rr rr             jsr     CHKCOM
000855r 2  4C rr rr             jmp     PROCESS_INPUT_ITEM
000858r 2               ; ----------------------------------------------------------------------------
000858r 2               FINDATA:
000858r 2  20 rr rr             jsr     DATAN
00085Br 2  C8                   iny
00085Cr 2  AA                   tax
00085Dr 2  D0 12                bne     L2B7C
00085Fr 2  A2 2A                ldx     #ERR_NODATA
000861r 2  C8                   iny
000862r 2  B1 CF                lda     (TXTPTR),y
000864r 2  F0 69                beq     GERR
000866r 2  C8                   iny
000867r 2  B1 CF                lda     (TXTPTR),y
000869r 2  85 94                sta     Z8C
00086Br 2  C8                   iny
00086Cr 2  B1 CF                lda     (TXTPTR),y
00086Er 2  C8                   iny
00086Fr 2  85 95                sta     Z8C+1
000871r 2               L2B7C:
000871r 2  B1 CF                lda     (TXTPTR),y
000873r 2  AA                   tax
000874r 2  20 rr rr             jsr     ADDON
000877r 2  E0 83                cpx     #$83
000879r 2  D0 DD                bne     FINDATA
00087Br 2  4C rr rr             jmp     INSTART
00087Er 2               ; ---NO MORE INPUT REQUESTED------
00087Er 2               INPDONE:
00087Er 2  A5 98                lda     INPTR
000880r 2  A4 99                ldy     INPTR+1
000882r 2  A6 68                ldx     INPUTFLG
000884r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_11))
000884r 2                       beq     L2B94 ; INPUT
000884r 2               .else
000884r 2  10 03                bpl     L2B94; INPUT or GET
000886r 2               .endif
000886r 2  4C rr rr             jmp     SETDA
000889r 2               L2B94:
000889r 2  A0 00                ldy     #$00
00088Br 2               .ifdef AIM65
00088Br 2                       jsr     LB8B1
00088Br 2               .endif
00088Br 2  B1 98                lda     (INPTR),y
00088Dr 2  F0 07                beq     L2BA1
00088Fr 2               .ifdef CONFIG_FILE
00088Fr 2                       lda     CURDVC
00088Fr 2                       bne     L2BA1
00088Fr 2               .endif
00088Fr 2  A9 rr                lda     #<ERREXTRA
000891r 2  A0 rr                ldy     #>ERREXTRA
000893r 2  4C rr rr             jmp     STROUT
000896r 2               L2BA1:
000896r 2  60                   rts
000897r 2               
000897r 2               ; ----------------------------------------------------------------------------
000897r 2               ERREXTRA:
000897r 2               .ifdef KBD
000897r 2                       .byte   "?Extra"
000897r 2               .else
000897r 2  3F 45 58 54          .byte   "?EXTRA IGNORED"
00089Br 2  52 41 20 49  
00089Fr 2  47 4E 4F 52  
0008A5r 2               .endif
0008A5r 2  0D 0A 00             .byte   $0D,$0A,$00
0008A8r 2               ERRREENTRY:
0008A8r 2               .ifdef KBD
0008A8r 2                       .byte   "What?"
0008A8r 2               .else
0008A8r 2  3F 52 45 44          .byte   "?REDO FROM START"
0008ACr 2  4F 20 46 52  
0008B0r 2  4F 4D 20 53  
0008B8r 2               .endif
0008B8r 2  0D 0A 00             .byte   $0D,$0A,$00
0008BBr 2               .ifdef KBD
0008BBr 2               LEA30:
0008BBr 2                       .byte   "B"
0008BBr 2                       .byte   $FD
0008BBr 2                       .byte   "GsBASIC"
0008BBr 2                       .byte   $00,$1B,$0D,$13
0008BBr 2                       .byte   " BASIC"
0008BBr 2               .endif
0008BBr 2               
0008BBr 1               .include "eval.s"
0008BBr 2               .segment "CODE"
0008BBr 2               
0008BBr 2               ; ----------------------------------------------------------------------------
0008BBr 2               ; "NEXT" STATEMENT
0008BBr 2               ; ----------------------------------------------------------------------------
0008BBr 2               NEXT:
0008BBr 2  D0 04                bne     NEXT1
0008BDr 2  A0 00                ldy     #$00
0008BFr 2  F0 03                beq     NEXT2
0008C1r 2               NEXT1:
0008C1r 2  20 rr rr             jsr     PTRGET
0008C4r 2               NEXT2:
0008C4r 2  85 9E                sta     FORPNT
0008C6r 2  84 9F                sty     FORPNT+1
0008C8r 2  20 rr rr             jsr     GTFORPNT
0008CBr 2  F0 04                beq     NEXT3
0008CDr 2  A2 00                ldx     #$00
0008CFr 2               GERR:
0008CFr 2  F0 66                beq     JERROR
0008D1r 2               NEXT3:
0008D1r 2  9A                   txs
0008D2r 2               .ifndef CONFIG_2
0008D2r 2                       inx
0008D2r 2                       inx
0008D2r 2                       inx
0008D2r 2                       inx
0008D2r 2               .endif
0008D2r 2  8A                   txa
0008D3r 2               .ifdef CONFIG_2
0008D3r 2  18                   clc
0008D4r 2  69 04                adc     #$04
0008D6r 2  48                   pha
0008D7r 2  69 06                adc     #BYTES_FP+1
0008D9r 2  85 79                sta     DEST
0008DBr 2  68                   pla
0008DCr 2               .else
0008DCr 2                       inx
0008DCr 2                       inx
0008DCr 2                       inx
0008DCr 2                       inx
0008DCr 2                       inx
0008DCr 2               .ifndef CONFIG_SMALL
0008DCr 2                       inx
0008DCr 2               .endif
0008DCr 2                       stx     DEST
0008DCr 2               .endif
0008DCr 2  A0 01                ldy     #>STACK
0008DEr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0008E1r 2  BA                   tsx
0008E2r 2  BD 09 01             lda     STACK+BYTES_FP+4,x
0008E5r 2  85 BB                sta     FACSIGN
0008E7r 2  A5 9E                lda     FORPNT
0008E9r 2  A4 9F                ldy     FORPNT+1
0008EBr 2  20 rr rr             jsr     FADD
0008EEr 2  20 rr rr             jsr     SETFOR
0008F1r 2  A0 01                ldy     #>STACK
0008F3r 2  20 rr rr             jsr     FCOMP2
0008F6r 2  BA                   tsx
0008F7r 2  38                   sec
0008F8r 2  FD 09 01             sbc     STACK+BYTES_FP+4,x
0008FBr 2  F0 17                beq     L2C22
0008FDr 2  BD 0F 01             lda     STACK+2*BYTES_FP+5,x
000900r 2  85 8E                sta     CURLIN
000902r 2  BD 10 01             lda     STACK+2*BYTES_FP+6,x
000905r 2  85 8F                sta     CURLIN+1
000907r 2  BD 12 01             lda     STACK+2*BYTES_FP+8,x
00090Ar 2  85 CF                sta     TXTPTR
00090Cr 2  BD 11 01             lda     STACK+2*BYTES_FP+7,x
00090Fr 2  85 D0                sta     TXTPTR+1
000911r 2               L2C1F:
000911r 2  4C rr rr             jmp     NEWSTT
000914r 2               L2C22:
000914r 2  8A                   txa
000915r 2  69 11                adc     #2*BYTES_FP+7
000917r 2  AA                   tax
000918r 2  9A                   txs
000919r 2  20 CE 00             jsr     CHRGOT
00091Cr 2  C9 2C                cmp     #$2C
00091Er 2  D0 F1                bne     L2C1F
000920r 2  20 C8 00             jsr     CHRGET
000923r 2  20 rr rr             jsr     NEXT1
000926r 2               
000926r 2               ; ----------------------------------------------------------------------------
000926r 2               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
000926r 2               ; ----------------------------------------------------------------------------
000926r 2               FRMNUM:
000926r 2  20 rr rr             jsr     FRMEVL
000929r 2               
000929r 2               ; ----------------------------------------------------------------------------
000929r 2               ; MAKE SURE (FAC) IS NUMERIC
000929r 2               ; ----------------------------------------------------------------------------
000929r 2               CHKNUM:
000929r 2  18                   clc
00092Ar 2  24                   .byte   $24
00092Br 2               
00092Br 2               ; ----------------------------------------------------------------------------
00092Br 2               ; MAKE SURE (FAC) IS STRING
00092Br 2               ; ----------------------------------------------------------------------------
00092Br 2               CHKSTR:
00092Br 2  38                   sec
00092Cr 2               
00092Cr 2               ; ----------------------------------------------------------------------------
00092Cr 2               ; MAKE SURE (FAC) IS CORRECT TYPE
00092Cr 2               ; IF C=0, TYPE MUST BE NUMERIC
00092Cr 2               ; IF C=1, TYPE MUST BE STRING
00092Cr 2               ; ----------------------------------------------------------------------------
00092Cr 2               CHKVAL:
00092Cr 2  24 64                bit     VALTYP
00092Er 2  30 03                bmi     L2C41
000930r 2  B0 03                bcs     L2C43
000932r 2               L2C40:
000932r 2  60                   rts
000933r 2               L2C41:
000933r 2  B0 FD                bcs     L2C40
000935r 2               L2C43:
000935r 2  A2 A3                ldx     #ERR_BADTYPE
000937r 2               JERROR:
000937r 2  4C rr rr             jmp     ERROR
00093Ar 2               
00093Ar 2               ; ----------------------------------------------------------------------------
00093Ar 2               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
00093Ar 2               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
00093Ar 2               ; EXPRESSIONS.
00093Ar 2               ; ----------------------------------------------------------------------------
00093Ar 2               FRMEVL:
00093Ar 2  A6 CF                ldx     TXTPTR
00093Cr 2  D0 02                bne     L2C4E
00093Er 2  C6 D0                dec     TXTPTR+1
000940r 2               L2C4E:
000940r 2  C6 CF                dec     TXTPTR
000942r 2  A2 00                ldx     #$00
000944r 2  24                   .byte   $24
000945r 2               FRMEVL1:
000945r 2  48                   pha
000946r 2  8A                   txa
000947r 2  48                   pha
000948r 2  A9 01                lda     #$01
00094Ar 2  20 rr rr             jsr     CHKMEM
00094Dr 2  20 rr rr             jsr     FRM_ELEMENT
000950r 2  A9 00                lda     #$00
000952r 2  85 A2                sta     CPRTYP
000954r 2               FRMEVL2:
000954r 2  20 CE 00             jsr     CHRGOT
000957r 2               L2C65:
000957r 2  38                   sec
000958r 2  E9 AA                sbc     #TOKEN_GREATER
00095Ar 2  90 17                bcc     L2C81
00095Cr 2  C9 03                cmp     #$03
00095Er 2  B0 13                bcs     L2C81
000960r 2  C9 01                cmp     #$01
000962r 2  2A                   rol     a
000963r 2  49 01                eor     #$01
000965r 2  45 A2                eor     CPRTYP
000967r 2  C5 A2                cmp     CPRTYP
000969r 2  90 61                bcc     SNTXERR
00096Br 2  85 A2                sta     CPRTYP
00096Dr 2  20 C8 00             jsr     CHRGET
000970r 2  4C rr rr             jmp     L2C65
000973r 2               L2C81:
000973r 2  A6 A2                ldx     CPRTYP
000975r 2  D0 2C                bne     FRM_RELATIONAL
000977r 2  B0 7B                bcs     L2D02
000979r 2  69 07                adc     #$07
00097Br 2  90 77                bcc     L2D02
00097Dr 2  65 64                adc     VALTYP
00097Fr 2  D0 03                bne     L2C92
000981r 2  4C rr rr             jmp     CAT
000984r 2               L2C92:
000984r 2  69 FF                adc     #$FF
000986r 2  85 77                sta     INDEX
000988r 2  0A                   asl     a
000989r 2  65 77                adc     INDEX
00098Br 2  A8                   tay
00098Cr 2               FRM_PRECEDENCE_TEST:
00098Cr 2  68                   pla
00098Dr 2  D9 rr rr             cmp     MATHTBL,y
000990r 2  B0 67                bcs     FRM_PERFORM1
000992r 2  20 rr rr             jsr     CHKNUM
000995r 2               L2CA3:
000995r 2  48                   pha
000996r 2               L2CA4:
000996r 2  20 rr rr             jsr     FRM_RECURSE
000999r 2  68                   pla
00099Ar 2  A4 A0                ldy     LASTOP
00099Cr 2  10 17                bpl     PREFNC
00099Er 2  AA                   tax
00099Fr 2  F0 56                beq     GOEX
0009A1r 2  D0 5F                bne     FRM_PERFORM2
0009A3r 2               
0009A3r 2               ; ----------------------------------------------------------------------------
0009A3r 2               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
0009A3r 2               ; ----------------------------------------------------------------------------
0009A3r 2               FRM_RELATIONAL:
0009A3r 2  46 64                lsr     VALTYP
0009A5r 2  8A                   txa
0009A6r 2  2A                   rol     a
0009A7r 2  A6 CF                ldx     TXTPTR
0009A9r 2  D0 02                bne     L2CBB
0009ABr 2  C6 D0                dec     TXTPTR+1
0009ADr 2               L2CBB:
0009ADr 2  C6 CF                dec     TXTPTR
0009AFr 2  A0 1B                ldy     #$1B
0009B1r 2  85 A2                sta     CPRTYP
0009B3r 2  D0 D7                bne     FRM_PRECEDENCE_TEST
0009B5r 2               PREFNC:
0009B5r 2  D9 rr rr             cmp     MATHTBL,y
0009B8r 2  B0 48                bcs     FRM_PERFORM2
0009BAr 2  90 D9                bcc     L2CA3
0009BCr 2               
0009BCr 2               ; ----------------------------------------------------------------------------
0009BCr 2               ; STACK THIS OPERATION AND CALL FRMEVL FOR
0009BCr 2               ; ANOTHER ONE
0009BCr 2               ; ----------------------------------------------------------------------------
0009BCr 2               FRM_RECURSE:
0009BCr 2  B9 rr rr             lda     MATHTBL+2,y
0009BFr 2  48                   pha
0009C0r 2  B9 rr rr             lda     MATHTBL+1,y
0009C3r 2  48                   pha
0009C4r 2  20 rr rr             jsr     FRM_STACK1
0009C7r 2  A5 A2                lda     CPRTYP
0009C9r 2  4C rr rr             jmp     FRMEVL1
0009CCr 2               SNTXERR:
0009CCr 2  4C rr rr             jmp     SYNERR
0009CFr 2               
0009CFr 2               ; ----------------------------------------------------------------------------
0009CFr 2               ; STACK (FAC)
0009CFr 2               ; THREE ENTRY POINTS:
0009CFr 2               ; 	1, FROM FRMEVL
0009CFr 2               ;	2, FROM "STEP"
0009CFr 2               ;	3, FROM "FOR"
0009CFr 2               ; ----------------------------------------------------------------------------
0009CFr 2               FRM_STACK1:
0009CFr 2  A5 BB                lda     FACSIGN
0009D1r 2  BE rr rr             ldx     MATHTBL,y
0009D4r 2               
0009D4r 2               ; ----------------------------------------------------------------------------
0009D4r 2               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
0009D4r 2               ; ----------------------------------------------------------------------------
0009D4r 2               FRM_STACK2:
0009D4r 2  A8                   tay
0009D5r 2  68                   pla
0009D6r 2  85 77                sta     INDEX
0009D8r 2               .ifndef CONFIG_2B
0009D8r 2  E6 77                inc     INDEX ; bug: assumes not on page boundary
0009DAr 2               ; bug exists on AppleSoft II
0009DAr 2               .endif
0009DAr 2  68                   pla
0009DBr 2  85 78                sta     INDEX+1
0009DDr 2               .ifdef CONFIG_2B
0009DDr 2                       inc     INDEX
0009DDr 2                       bne     LEB69
0009DDr 2                       inc     INDEX+1
0009DDr 2               LEB69:
0009DDr 2               .endif
0009DDr 2  98                   tya
0009DEr 2  48                   pha
0009DFr 2               
0009DFr 2               ; ----------------------------------------------------------------------------
0009DFr 2               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
0009DFr 2               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
0009DFr 2               ; ----------------------------------------------------------------------------
0009DFr 2               FRM_STACK3:
0009DFr 2  20 rr rr             jsr     ROUND_FAC
0009E2r 2               .ifndef CONFIG_SMALL
0009E2r 2  A5 BA                lda     FAC+4
0009E4r 2  48                   pha
0009E5r 2               .endif
0009E5r 2  A5 B9                lda     FAC+3
0009E7r 2  48                   pha
0009E8r 2  A5 B8                lda     FAC+2
0009EAr 2  48                   pha
0009EBr 2  A5 B7                lda     FAC+1
0009EDr 2  48                   pha
0009EEr 2  A5 B6                lda     FAC
0009F0r 2  48                   pha
0009F1r 2  6C 77 00             jmp     (INDEX)
0009F4r 2               L2D02:
0009F4r 2  A0 FF                ldy     #$FF
0009F6r 2  68                   pla
0009F7r 2               GOEX:
0009F7r 2  F0 23                beq     EXIT
0009F9r 2               
0009F9r 2               ; ----------------------------------------------------------------------------
0009F9r 2               ; PERFORM STACKED OPERATION
0009F9r 2               ;
0009F9r 2               ; (A) = PRECEDENCE BYTE
0009F9r 2               ; STACK:  1 -- CPRMASK
0009F9r 2               ;	5 -- (ARG)
0009F9r 2               ;	2 -- ADDR OF PERFORMER
0009F9r 2               ; ----------------------------------------------------------------------------
0009F9r 2               FRM_PERFORM1:
0009F9r 2  C9 64                cmp     #$64
0009FBr 2  F0 03                beq     L2D0E
0009FDr 2  20 rr rr             jsr     CHKNUM
000A00r 2               L2D0E:
000A00r 2  84 A0                sty     LASTOP
000A02r 2               FRM_PERFORM2:
000A02r 2  68                   pla
000A03r 2  4A                   lsr     a
000A04r 2  85 69                sta     CPRMASK
000A06r 2  68                   pla
000A07r 2  85 BE                sta     ARG
000A09r 2  68                   pla
000A0Ar 2  85 BF                sta     ARG+1
000A0Cr 2  68                   pla
000A0Dr 2  85 C0                sta     ARG+2
000A0Fr 2  68                   pla
000A10r 2  85 C1                sta     ARG+3
000A12r 2  68                   pla
000A13r 2               .ifndef CONFIG_SMALL
000A13r 2  85 C2                sta     ARG+4
000A15r 2  68                   pla
000A16r 2               .endif
000A16r 2  85 C3                sta     ARGSIGN
000A18r 2  45 BB                eor     FACSIGN
000A1Ar 2  85 C4                sta     SGNCPR
000A1Cr 2               EXIT:
000A1Cr 2  A5 B6                lda     FAC
000A1Er 2  60                   rts
000A1Fr 2               
000A1Fr 2               ; ----------------------------------------------------------------------------
000A1Fr 2               ; GET ELEMENT IN EXPRESSION
000A1Fr 2               ;
000A1Fr 2               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
000A1Fr 2               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
000A1Fr 2               ; ----------------------------------------------------------------------------
000A1Fr 2               FRM_ELEMENT:
000A1Fr 2  A9 00                lda     #$00
000A21r 2  85 64                sta     VALTYP
000A23r 2               L2D31:
000A23r 2  20 C8 00             jsr     CHRGET
000A26r 2  B0 03                bcs     L2D39
000A28r 2               L2D36:
000A28r 2  4C rr rr             jmp     FIN
000A2Br 2               L2D39:
000A2Br 2  20 rr rr             jsr     ISLETC
000A2Er 2  B0 67                bcs     FRM_VARIABLE
000A30r 2               .ifdef CONFIG_CBM_ALL
000A30r 2                       cmp     #$FF
000A30r 2                       bne     LCDC1
000A30r 2                       lda     #<CON_PI
000A30r 2                       ldy     #>CON_PI
000A30r 2                       jsr     LOAD_FAC_FROM_YA
000A30r 2                       jmp     CHRGET
000A30r 2               CON_PI:
000A30r 2                       .byte   $82,$49,$0f,$DA,$A1
000A30r 2               LCDC1:
000A30r 2               .endif
000A30r 2  C9 2E                cmp     #$2E
000A32r 2  F0 F4                beq     L2D36
000A34r 2  C9 A4                cmp     #TOKEN_MINUS
000A36r 2  F0 58                beq     MIN
000A38r 2  C9 A3                cmp     #TOKEN_PLUS
000A3Ar 2  F0 E7                beq     L2D31
000A3Cr 2  C9 22                cmp     #$22
000A3Er 2  D0 0F                bne     NOT_
000A40r 2               
000A40r 2               ; ----------------------------------------------------------------------------
000A40r 2               ; STRING CONSTANT ELEMENT
000A40r 2               ;
000A40r 2               ; SET Y,A = (TXTPTR)+CARRY
000A40r 2               ; ----------------------------------------------------------------------------
000A40r 2               STRTXT:
000A40r 2  A5 CF                lda     TXTPTR
000A42r 2  A4 D0                ldy     TXTPTR+1
000A44r 2  69 00                adc     #$00
000A46r 2  90 01                bcc     L2D57
000A48r 2  C8                   iny
000A49r 2               L2D57:
000A49r 2  20 rr rr             jsr     STRLIT
000A4Cr 2  4C rr rr             jmp     POINT
000A4Fr 2               
000A4Fr 2               ; ----------------------------------------------------------------------------
000A4Fr 2               ; "NOT" FUNCTION
000A4Fr 2               ; IF FAC=0, RETURN FAC=1
000A4Fr 2               ; IF FAC<>0, RETURN FAC=0
000A4Fr 2               ; ----------------------------------------------------------------------------
000A4Fr 2               NOT_:
000A4Fr 2  C9 A1                cmp     #TOKEN_NOT
000A51r 2  D0 13                bne     L2D74
000A53r 2  A0 18                ldy     #$18
000A55r 2  D0 3B                bne     EQUL
000A57r 2               
000A57r 2               ; ----------------------------------------------------------------------------
000A57r 2               ; COMPARISON FOR EQUALITY (= OPERATOR)
000A57r 2               ; ALSO USED TO EVALUATE "NOT" FUNCTION
000A57r 2               ; ----------------------------------------------------------------------------
000A57r 2               EQUOP:
000A57r 2  20 rr rr             jsr     AYINT
000A5Ar 2  A5 BA                lda     FAC_LAST
000A5Cr 2  49 FF                eor     #$FF
000A5Er 2  A8                   tay
000A5Fr 2  A5 B9                lda     FAC_LAST-1
000A61r 2  49 FF                eor     #$FF
000A63r 2  4C rr rr             jmp     GIVAYF
000A66r 2               L2D74:
000A66r 2               .ifdef SYM1
000A66r 2                       cmp     #TOKEN_USR
000A66r 2                       bne     LCC8A
000A66r 2                       jmp     LCDBD
000A66r 2               LCC8A:
000A66r 2                       cmp     #$26
000A66r 2                       bne     LCC91
000A66r 2                       jmp     LCDFE
000A66r 2               LCC91:
000A66r 2               .endif
000A66r 2  C9 9E                cmp     #TOKEN_FN
000A68r 2  D0 03                bne     L2D7B
000A6Ar 2  4C rr rr             jmp     L31F3
000A6Dr 2               L2D7B:
000A6Dr 2  C9 AD                cmp     #TOKEN_SGN
000A6Fr 2  90 03                bcc     PARCHK
000A71r 2  4C rr rr             jmp     UNARY
000A74r 2               
000A74r 2               ; ----------------------------------------------------------------------------
000A74r 2               ; EVALUATE "(EXPRESSION)"
000A74r 2               ; ----------------------------------------------------------------------------
000A74r 2               PARCHK:
000A74r 2  20 rr rr             jsr     CHKOPN
000A77r 2  20 rr rr             jsr     FRMEVL
000A7Ar 2               CHKCLS:
000A7Ar 2  A9 29                lda     #$29
000A7Cr 2  2C                   .byte   $2C
000A7Dr 2               CHKOPN:
000A7Dr 2  A9 28                lda     #$28
000A7Fr 2  2C                   .byte   $2C
000A80r 2               CHKCOM:
000A80r 2  A9 2C                lda     #$2C
000A82r 2               
000A82r 2               ; ----------------------------------------------------------------------------
000A82r 2               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
000A82r 2               ; ----------------------------------------------------------------------------
000A82r 2               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
000A82r 2  A0 00                ldy     #$00
000A84r 2  D1 CF                cmp     (TXTPTR),y
000A86r 2  D0 03                bne     SYNERR
000A88r 2  4C C8 00             jmp     CHRGET
000A8Br 2               ; ----------------------------------------------------------------------------
000A8Br 2               SYNERR:
000A8Br 2  A2 10                ldx     #ERR_SYNTAX
000A8Dr 2  4C rr rr             jmp     ERROR
000A90r 2               ; ----------------------------------------------------------------------------
000A90r 2               MIN:
000A90r 2  A0 15                ldy     #$15
000A92r 2               EQUL:
000A92r 2  68                   pla
000A93r 2  68                   pla
000A94r 2  4C rr rr             jmp     L2CA4
000A97r 2               ; ----------------------------------------------------------------------------
000A97r 2               FRM_VARIABLE:
000A97r 2  20 rr rr             jsr     PTRGET
000A9Ar 2               FRM_VARIABLE_CALL	= *-1
000A9Ar 2  85 B9                sta     FAC_LAST-1
000A9Cr 2  84 BA                sty     FAC_LAST
000A9Er 2               .ifdef CONFIG_CBM_ALL
000A9Er 2                       lda     VARNAM
000A9Er 2                       ldy     VARNAM+1
000A9Er 2               .endif
000A9Er 2  A6 64                ldx     VALTYP
000AA0r 2  F0 05                beq     L2DB1
000AA2r 2               .ifdef CONFIG_CBM_ALL
000AA2r 2                 .ifdef CONFIG_CBM1_PATCHES
000AA2r 2                       jmp     PATCH2
000AA2r 2                       clc
000AA2r 2               LCE3B:
000AA2r 2                 .else
000AA2r 2                       ldx     #$00
000AA2r 2                       stx     STRNG1+1
000AA2r 2                       bit     FAC+4
000AA2r 2                       bpl     LCE53
000AA2r 2                       cmp     #$54	; T
000AA2r 2                       bne     LCE53
000AA2r 2                 .endif
000AA2r 2                       cpy     #$C9	; I$
000AA2r 2                       bne     LCE53
000AA2r 2                       jsr     LCE76
000AA2r 2                       sty     EXPON
000AA2r 2                       dey
000AA2r 2                       sty     STRNG2
000AA2r 2                       ldy     #$06
000AA2r 2                       sty     INDX
000AA2r 2                       ldy     #$24
000AA2r 2                       jsr     LDD3A
000AA2r 2                       jmp     LD353
000AA2r 2               LCE53:
000AA2r 2               .endif
000AA2r 2               .ifdef CONFIG_2
000AA2r 2                 .ifndef CBM2
000AA2r 2               ; bugfix?
000AA2r 2               ; fixed on AppleSoft II, not on any CBM
000AA2r 2  A2 00                ldx     #$00
000AA4r 2  86 C5                stx     STRNG1+1
000AA6r 2                 .endif
000AA6r 2               .endif
000AA6r 2  60                   rts
000AA7r 2               L2DB1:
000AA7r 2               .ifndef CONFIG_SMALL
000AA7r 2  A6 65                ldx     VALTYP+1
000AA9r 2  10 0D                bpl     L2DC2
000AABr 2  A0 00                ldy     #$00
000AADr 2  B1 B9                lda     (FAC+3),y
000AAFr 2  AA                   tax
000AB0r 2  C8                   iny
000AB1r 2  B1 B9                lda     (FAC+3),y
000AB3r 2  A8                   tay
000AB4r 2  8A                   txa
000AB5r 2  4C rr rr             jmp     GIVAYF
000AB8r 2               L2DC2:
000AB8r 2               .endif
000AB8r 2               .ifdef CONFIG_CBM1_PATCHES
000AB8r 2                       jmp     PATCH3
000AB8r 2                       .byte   $19
000AB8r 2               .endif
000AB8r 2               .ifdef CBM2
000AB8r 2                       bit     FAC+4
000AB8r 2                       bpl     LCE90
000AB8r 2                       cmp     #$54
000AB8r 2                       bne     LCE82
000AB8r 2               .endif
000AB8r 2               .ifndef CONFIG_CBM_ALL
000AB8r 2  4C rr rr             jmp     LOAD_FAC_FROM_YA
000ABBr 2               .endif
000ABBr 2               .ifdef CONFIG_CBM_ALL
000ABBr 2               LCE69:
000ABBr 2                       cpy     #$49
000ABBr 2               .ifdef CBM1
000ABBr 2                       bne     LCE82
000ABBr 2               .else
000ABBr 2                       bne     LCE90
000ABBr 2               .endif
000ABBr 2                       jsr     LCE76
000ABBr 2                       tya
000ABBr 2                       ldx     #$A0
000ABBr 2                       jmp     LDB21
000ABBr 2               LCE76:
000ABBr 2               .ifdef CBM1
000ABBr 2                       lda     #$FE
000ABBr 2                       ldy     #$01
000ABBr 2               .else
000ABBr 2                       lda     #$8B
000ABBr 2                       ldy     #$00
000ABBr 2               .endif
000ABBr 2                       sei
000ABBr 2                       jsr     LOAD_FAC_FROM_YA
000ABBr 2                       cli
000ABBr 2                       sty     FAC+1
000ABBr 2                       rts
000ABBr 2               LCE82:
000ABBr 2                       cmp     #$53
000ABBr 2                       bne     LCE90
000ABBr 2                       cpy     #$54
000ABBr 2                       bne     LCE90
000ABBr 2                       lda     Z96
000ABBr 2                       jmp     FLOAT
000ABBr 2               LCE90:
000ABBr 2                       lda     FAC+3
000ABBr 2                       ldy     FAC+4
000ABBr 2                       jmp     LOAD_FAC_FROM_YA
000ABBr 2               .endif
000ABBr 2               
000ABBr 2               ; ----------------------------------------------------------------------------
000ABBr 2               UNARY:
000ABBr 2  0A                   asl     a
000ABCr 2  48                   pha
000ABDr 2  AA                   tax
000ABEr 2  20 C8 00             jsr     CHRGET
000AC1r 2  E0 81                cpx     #<(TOKEN_LEFTSTR*2-1)
000AC3r 2  90 20                bcc     L2DEF
000AC5r 2  20 rr rr             jsr     CHKOPN
000AC8r 2  20 rr rr             jsr     FRMEVL
000ACBr 2  20 rr rr             jsr     CHKCOM
000ACEr 2  20 rr rr             jsr     CHKSTR
000AD1r 2  68                   pla
000AD2r 2  AA                   tax
000AD3r 2  A5 BA                lda     FAC_LAST
000AD5r 2  48                   pha
000AD6r 2  A5 B9                lda     FAC_LAST-1
000AD8r 2  48                   pha
000AD9r 2  8A                   txa
000ADAr 2  48                   pha
000ADBr 2  20 rr rr             jsr     GETBYT
000ADEr 2  68                   pla
000ADFr 2  A8                   tay
000AE0r 2  8A                   txa
000AE1r 2  48                   pha
000AE2r 2  4C rr rr             jmp     L2DF4
000AE5r 2               L2DEF:
000AE5r 2  20 rr rr             jsr     PARCHK
000AE8r 2  68                   pla
000AE9r 2  A8                   tay
000AEAr 2               L2DF4:
000AEAr 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$100,y
000AEDr 2  85 AA                sta     JMPADRS+1
000AEFr 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$101,y
000AF2r 2  85 AB                sta     JMPADRS+2
000AF4r 2               .ifdef KBD
000AF4r 2                       jsr     LF47D
000AF4r 2               .else
000AF4r 2  20 A9 00             jsr     JMPADRS
000AF7r 2               .endif
000AF7r 2  4C rr rr             jmp     CHKNUM
000AFAr 2               
000AFAr 2               ; ----------------------------------------------------------------------------
000AFAr 2               OR:
000AFAr 2  A0 FF                ldy     #$FF
000AFCr 2  2C                   .byte   $2C
000AFDr 2               ; ----------------------------------------------------------------------------
000AFDr 2               TAND:
000AFDr 2  A0 00                ldy     #$00
000AFFr 2  84 62                sty     EOLPNTR
000B01r 2  20 rr rr             jsr     AYINT
000B04r 2  A5 B9                lda     FAC_LAST-1
000B06r 2  45 62                eor     EOLPNTR
000B08r 2  85 60                sta     CHARAC
000B0Ar 2  A5 BA                lda     FAC_LAST
000B0Cr 2  45 62                eor     EOLPNTR
000B0Er 2  85 61                sta     ENDCHR
000B10r 2  20 rr rr             jsr     COPY_ARG_TO_FAC
000B13r 2  20 rr rr             jsr     AYINT
000B16r 2  A5 BA                lda     FAC_LAST
000B18r 2  45 62                eor     EOLPNTR
000B1Ar 2  25 61                and     ENDCHR
000B1Cr 2  45 62                eor     EOLPNTR
000B1Er 2  A8                   tay
000B1Fr 2  A5 B9                lda     FAC_LAST-1
000B21r 2  45 62                eor     EOLPNTR
000B23r 2  25 60                and     CHARAC
000B25r 2  45 62                eor     EOLPNTR
000B27r 2  4C rr rr             jmp     GIVAYF
000B2Ar 2               
000B2Ar 2               ; ----------------------------------------------------------------------------
000B2Ar 2               ; PERFORM RELATIONAL OPERATIONS
000B2Ar 2               ; ----------------------------------------------------------------------------
000B2Ar 2               RELOPS:
000B2Ar 2  20 rr rr             jsr     CHKVAL
000B2Dr 2  B0 13                bcs     STRCMP
000B2Fr 2  A5 C3                lda     ARGSIGN
000B31r 2  09 7F                ora     #$7F
000B33r 2  25 BF                and     ARG+1
000B35r 2  85 BF                sta     ARG+1
000B37r 2  A9 BE                lda     #<ARG
000B39r 2  A0 00                ldy     #$00
000B3Br 2  20 rr rr             jsr     FCOMP
000B3Er 2  AA                   tax
000B3Fr 2  4C rr rr             jmp     NUMCMP
000B42r 2               
000B42r 2               ; ----------------------------------------------------------------------------
000B42r 2               ; STRING COMPARISON
000B42r 2               ; ----------------------------------------------------------------------------
000B42r 2               STRCMP:
000B42r 2  A9 00                lda     #$00
000B44r 2  85 64                sta     VALTYP
000B46r 2  C6 A2                dec     CPRTYP
000B48r 2  20 rr rr             jsr     FREFAC
000B4Br 2  85 B6                sta     FAC
000B4Dr 2  86 B7                stx     FAC+1
000B4Fr 2  84 B8                sty     FAC+2
000B51r 2  A5 C1                lda     ARG_LAST-1
000B53r 2  A4 C2                ldy     ARG_LAST
000B55r 2  20 rr rr             jsr     FRETMP
000B58r 2  86 C1                stx     ARG_LAST-1
000B5Ar 2  84 C2                sty     ARG_LAST
000B5Cr 2  AA                   tax
000B5Dr 2  38                   sec
000B5Er 2  E5 B6                sbc     FAC
000B60r 2  F0 08                beq     L2E74
000B62r 2  A9 01                lda     #$01
000B64r 2  90 04                bcc     L2E74
000B66r 2  A6 B6                ldx     FAC
000B68r 2  A9 FF                lda     #$FF
000B6Ar 2               L2E74:
000B6Ar 2  85 BB                sta     FACSIGN
000B6Cr 2  A0 FF                ldy     #$FF
000B6Er 2  E8                   inx
000B6Fr 2               STRCMP1:
000B6Fr 2  C8                   iny
000B70r 2  CA                   dex
000B71r 2  D0 07                bne     L2E84
000B73r 2  A6 BB                ldx     FACSIGN
000B75r 2               NUMCMP:
000B75r 2  30 0F                bmi     CMPDONE
000B77r 2  18                   clc
000B78r 2  90 0C                bcc     CMPDONE
000B7Ar 2               L2E84:
000B7Ar 2  B1 C1                lda     (ARG_LAST-1),y
000B7Cr 2  D1 B7                cmp     (FAC+1),y
000B7Er 2  F0 EF                beq     STRCMP1
000B80r 2  A2 FF                ldx     #$FF
000B82r 2  B0 02                bcs     CMPDONE
000B84r 2  A2 01                ldx     #$01
000B86r 2               CMPDONE:
000B86r 2  E8                   inx
000B87r 2  8A                   txa
000B88r 2  2A                   rol     a
000B89r 2  25 69                and     CPRMASK
000B8Br 2  F0 02                beq     L2E99
000B8Dr 2  A9 FF                lda     #$FF
000B8Fr 2               L2E99:
000B8Fr 2  4C rr rr             jmp     FLOAT
000B92r 2               
000B92r 2               .ifdef SYM1
000B92r 2               LCDBD:
000B92r 2                       jsr     CHRGET
000B92r 2                       jsr     CHKOPN
000B92r 2                       jsr     FRMEVL
000B92r 2                       jsr     CHRGOT
000B92r 2                       cmp     #$29
000B92r 2                       beq     LCDF1
000B92r 2                       jsr     AYINT
000B92r 2                       lda     FAC+4
000B92r 2                       ldy     FAC+3
000B92r 2                       sta     USR+1
000B92r 2                       sty     USR+2
000B92r 2               LCDD8:
000B92r 2                       jsr     CHKCOM
000B92r 2                       jsr     FRMEVL
000B92r 2                       jsr     CHRGOT
000B92r 2                       cmp     #$29
000B92r 2                       beq     LCDF1
000B92r 2                       jsr     AYINT
000B92r 2                       lda     FAC+3
000B92r 2                       pha
000B92r 2                       lda     FAC+4
000B92r 2                       pha
000B92r 2                       jmp     LCDD8
000B92r 2               
000B92r 2               LCDF1:
000B92r 2                       jsr     CHRGET
000B92r 2                       jsr     AYINT
000B92r 2                       lda     FAC+3
000B92r 2                       ldy     FAC+4
000B92r 2                       jmp     USR
000B92r 2               
000B92r 2               LCDFE:
000B92r 2                       lda     ZD4
000B92r 2                       pha
000B92r 2                       lda     ZD3
000B92r 2                       pha
000B92r 2                       jsr     CHRGET
000B92r 2                       cmp     #$22
000B92r 2                       bne     LCE49
000B92r 2                       jsr     CHRGET
000B92r 2                       jsr     LCE2B
000B92r 2                       tax
000B92r 2                       jsr     CHRGOT
000B92r 2                       jsr     LCE2B
000B92r 2                       pha
000B92r 2                       jsr     CHRGOT
000B92r 2                       cmp     #$22
000B92r 2                       bne     LCE48
000B92r 2                       jsr     CHRGET
000B92r 2                       pla
000B92r 2                       tay
000B92r 2                       pla
000B92r 2                       pla
000B92r 2                       txa
000B92r 2                       jmp     GIVAYF
000B92r 2               
000B92r 2               LCE2B:
000B92r 2                       jsr     ASCNIB
000B92r 2                       bcs     LCE47
000B92r 2                       pha
000B92r 2                       jsr     CHRGET
000B92r 2                       jsr     ASCNIB
000B92r 2                       sta     FAC+4
000B92r 2                       bcs     LCE46
000B92r 2                       jsr     CHRGET
000B92r 2                       pla
000B92r 2                       asl     a
000B92r 2                       asl     a
000B92r 2                       asl     a
000B92r 2                       asl     a
000B92r 2                       ora     FAC+4
000B92r 2                       rts
000B92r 2               
000B92r 2               LCE46:
000B92r 2                       pla
000B92r 2               LCE47:
000B92r 2                       pla
000B92r 2               LCE48:
000B92r 2                       pla
000B92r 2               LCE49:
000B92r 2                       pla
000B92r 2                       sta     ZD3
000B92r 2                       pla
000B92r 2                       sta     ZD4
000B92r 2                       jmp     ZERO_FAC
000B92r 2               .endif
000B92r 2               
000B92r 1               .include "var.s"
000B92r 2               .segment "CODE"
000B92r 2               
000B92r 2               ; ----------------------------------------------------------------------------
000B92r 2               ; "DIM" STATEMENT
000B92r 2               ; ----------------------------------------------------------------------------
000B92r 2               NXDIM:
000B92r 2  20 rr rr             jsr     CHKCOM
000B95r 2               DIM:
000B95r 2  AA                   tax
000B96r 2  20 rr rr             jsr     PTRGET2
000B99r 2  20 CE 00             jsr     CHRGOT
000B9Cr 2  D0 F4                bne     NXDIM
000B9Er 2  60                   rts
000B9Fr 2               
000B9Fr 2               ; ----------------------------------------------------------------------------
000B9Fr 2               ; PTRGET -- GENERAL VARIABLE SCAN
000B9Fr 2               ;
000B9Fr 2               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
000B9Fr 2               ; VARTAB AND ARYTAB FOR THE NAME.
000B9Fr 2               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
000B9Fr 2               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
000B9Fr 2               ;
000B9Fr 2               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
000B9Fr 2               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
000B9Fr 2               ;		ELSE = 0
000B9Fr 2               ;
000B9Fr 2               ;	SUBFLG -- = $00
000B9Fr 2               ;		= $40 IF CALLED FROM "GETARYPT"
000B9Fr 2               ; ----------------------------------------------------------------------------
000B9Fr 2               PTRGET:
000B9Fr 2  A2 00                ldx     #$00
000BA1r 2  20 CE 00             jsr     CHRGOT
000BA4r 2               PTRGET2:
000BA4r 2  86 63                stx     DIMFLG
000BA6r 2               PTRGET3:
000BA6r 2  85 9A                sta     VARNAM
000BA8r 2  20 CE 00             jsr     CHRGOT
000BABr 2  20 rr rr             jsr     ISLETC
000BAEr 2  B0 03                bcs     NAMOK
000BB0r 2               SYNERR3:
000BB0r 2  4C rr rr             jmp     SYNERR
000BB3r 2               NAMOK:
000BB3r 2  A2 00                ldx     #$00
000BB5r 2  86 64                stx     VALTYP
000BB7r 2               .ifndef CONFIG_SMALL
000BB7r 2  86 65                stx     VALTYP+1
000BB9r 2               .endif
000BB9r 2  20 C8 00             jsr     CHRGET
000BBCr 2  90 05                bcc     L2ECD
000BBEr 2  20 rr rr             jsr     ISLETC
000BC1r 2  90 0B                bcc     L2ED8
000BC3r 2               L2ECD:
000BC3r 2  AA                   tax
000BC4r 2               L2ECE:
000BC4r 2  20 C8 00             jsr     CHRGET
000BC7r 2  90 FB                bcc     L2ECE
000BC9r 2  20 rr rr             jsr     ISLETC
000BCCr 2  B0 F6                bcs     L2ECE
000BCEr 2               L2ED8:
000BCEr 2  C9 24                cmp     #$24
000BD0r 2               .ifdef CONFIG_SMALL
000BD0r 2                       bne     L2EF9
000BD0r 2               .else
000BD0r 2  D0 06                bne     L2EE2
000BD2r 2               .endif
000BD2r 2  A9 FF                lda     #$FF
000BD4r 2  85 64                sta     VALTYP
000BD6r 2               .ifndef CONFIG_SMALL
000BD6r 2  D0 10                bne     L2EF2
000BD8r 2               L2EE2:
000BD8r 2  C9 25                cmp     #$25
000BDAr 2  D0 13                bne     L2EF9
000BDCr 2  A5 67                lda     SUBFLG
000BDEr 2  D0 D0                bne     SYNERR3
000BE0r 2  A9 80                lda     #$80
000BE2r 2  85 65                sta     VALTYP+1
000BE4r 2  05 9A                ora     VARNAM
000BE6r 2  85 9A                sta     VARNAM
000BE8r 2               L2EF2:
000BE8r 2               .endif
000BE8r 2  8A                   txa
000BE9r 2  09 80                ora     #$80
000BEBr 2  AA                   tax
000BECr 2  20 C8 00             jsr     CHRGET
000BEFr 2               L2EF9:
000BEFr 2  86 9B                stx     VARNAM+1
000BF1r 2  38                   sec
000BF2r 2  05 67                ora     SUBFLG
000BF4r 2  E9 28                sbc     #$28
000BF6r 2  D0 03                bne     L2F05
000BF8r 2  4C rr rr             jmp     ARRAY
000BFBr 2               L2F05:
000BFBr 2  A9 00                lda     #$00
000BFDr 2  85 67                sta     SUBFLG
000BFFr 2  A5 82                lda     VARTAB
000C01r 2  A6 83                ldx     VARTAB+1
000C03r 2  A0 00                ldy     #$00
000C05r 2               L2F0F:
000C05r 2  86 B5                stx     LOWTR+1
000C07r 2               L2F11:
000C07r 2  85 B4                sta     LOWTR
000C09r 2  E4 85                cpx     ARYTAB+1
000C0Br 2  D0 04                bne     L2F1B
000C0Dr 2  C5 84                cmp     ARYTAB
000C0Fr 2  F0 22                beq     NAMENOTFOUND
000C11r 2               L2F1B:
000C11r 2  A5 9A                lda     VARNAM
000C13r 2  D1 B4                cmp     (LOWTR),y
000C15r 2  D0 08                bne     L2F29
000C17r 2  A5 9B                lda     VARNAM+1
000C19r 2  C8                   iny
000C1Ar 2  D1 B4                cmp     (LOWTR),y
000C1Cr 2  F0 62                beq     SET_VARPNT_AND_YA
000C1Er 2  88                   dey
000C1Fr 2               L2F29:
000C1Fr 2  18                   clc
000C20r 2  A5 B4                lda     LOWTR
000C22r 2  69 07                adc     #BYTES_PER_VARIABLE
000C24r 2  90 E1                bcc     L2F11
000C26r 2  E8                   inx
000C27r 2  D0 DC                bne     L2F0F
000C29r 2               
000C29r 2               ; ----------------------------------------------------------------------------
000C29r 2               ; CHECK IF (A) IS ASCII LETTER A-Z
000C29r 2               ;
000C29r 2               ; RETURN CARRY = 1 IF A-Z
000C29r 2               ;	= 0 IF NOT
000C29r 2               ; ----------------------------------------------------------------------------
000C29r 2               ISLETC:
000C29r 2  C9 41                cmp     #$41
000C2Br 2  90 05                bcc     L2F3C
000C2Dr 2  E9 5B                sbc     #$5B
000C2Fr 2  38                   sec
000C30r 2  E9 A5                sbc     #$A5
000C32r 2               L2F3C:
000C32r 2  60                   rts
000C33r 2               
000C33r 2               ; ----------------------------------------------------------------------------
000C33r 2               ; VARIABLE NOT FOUND, SO MAKE ONE
000C33r 2               ; ----------------------------------------------------------------------------
000C33r 2               NAMENOTFOUND:
000C33r 2  68                   pla
000C34r 2  48                   pha
000C35r 2  C9 rr                cmp     #<FRM_VARIABLE_CALL
000C37r 2  D0 05                bne     MAKENEWVARIABLE
000C39r 2               .ifdef CONFIG_SAFE_NAMENOTFOUND
000C39r 2                       tsx
000C39r 2                       lda     STACK+2,x
000C39r 2                       cmp     #>FRM_VARIABLE_CALL
000C39r 2                       bne     MAKENEWVARIABLE
000C39r 2               .endif
000C39r 2               LD015:
000C39r 2  A9 rr                lda     #<C_ZERO
000C3Br 2  A0 rr                ldy     #>C_ZERO
000C3Dr 2  60                   rts
000C3Er 2               
000C3Er 2               ; ----------------------------------------------------------------------------
000C3Er 2               .ifndef CONFIG_2
000C3Er 2               C_ZERO:
000C3Er 2                       .byte   $00,$00
000C3Er 2               .endif
000C3Er 2               
000C3Er 2               ; ----------------------------------------------------------------------------
000C3Er 2               ; MAKE A NEW SIMPLE VARIABLE
000C3Er 2               ;
000C3Er 2               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
000C3Er 2               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
000C3Er 2               ; ----------------------------------------------------------------------------
000C3Er 2               MAKENEWVARIABLE:
000C3Er 2               .ifdef CONFIG_CBM_ALL
000C3Er 2                       lda     VARNAM
000C3Er 2                       ldy     VARNAM+1
000C3Er 2                       cmp     #$54
000C3Er 2                       bne     LD02F
000C3Er 2                       cpy     #$C9
000C3Er 2                       beq     LD015
000C3Er 2                       cpy     #$49
000C3Er 2                       bne     LD02F
000C3Er 2               LD02C:
000C3Er 2                       jmp     SYNERR
000C3Er 2               LD02F:
000C3Er 2                       cmp     #$53
000C3Er 2                       bne     LD037
000C3Er 2                       cpy     #$54
000C3Er 2                       beq     LD02C
000C3Er 2               LD037:
000C3Er 2               .endif
000C3Er 2  A5 84                lda     ARYTAB
000C40r 2  A4 85                ldy     ARYTAB+1
000C42r 2  85 B4                sta     LOWTR
000C44r 2  84 B5                sty     LOWTR+1
000C46r 2  A5 86                lda     STREND
000C48r 2  A4 87                ldy     STREND+1
000C4Ar 2  85 AF                sta     HIGHTR
000C4Cr 2  84 B0                sty     HIGHTR+1
000C4Er 2  18                   clc
000C4Fr 2  69 07                adc     #BYTES_PER_VARIABLE
000C51r 2  90 01                bcc     L2F68
000C53r 2  C8                   iny
000C54r 2               L2F68:
000C54r 2  85 AD                sta     HIGHDS
000C56r 2  84 AE                sty     HIGHDS+1
000C58r 2  20 rr rr             jsr     BLTU
000C5Br 2  A5 AD                lda     HIGHDS
000C5Dr 2  A4 AE                ldy     HIGHDS+1
000C5Fr 2  C8                   iny
000C60r 2  85 84                sta     ARYTAB
000C62r 2  84 85                sty     ARYTAB+1
000C64r 2  A0 00                ldy     #$00
000C66r 2  A5 9A                lda     VARNAM
000C68r 2  91 B4                sta     (LOWTR),y
000C6Ar 2  C8                   iny
000C6Br 2  A5 9B                lda     VARNAM+1
000C6Dr 2  91 B4                sta     (LOWTR),y
000C6Fr 2  A9 00                lda     #$00
000C71r 2  C8                   iny
000C72r 2  91 B4                sta     (LOWTR),y
000C74r 2  C8                   iny
000C75r 2  91 B4                sta     (LOWTR),y
000C77r 2  C8                   iny
000C78r 2  91 B4                sta     (LOWTR),y
000C7Ar 2  C8                   iny
000C7Br 2  91 B4                sta     (LOWTR),y
000C7Dr 2               .ifndef CONFIG_SMALL
000C7Dr 2  C8                   iny
000C7Er 2  91 B4                sta     (LOWTR),y
000C80r 2               .endif
000C80r 2               
000C80r 2               ; ----------------------------------------------------------------------------
000C80r 2               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
000C80r 2               ; ----------------------------------------------------------------------------
000C80r 2               SET_VARPNT_AND_YA:
000C80r 2  A5 B4                lda     LOWTR
000C82r 2  18                   clc
000C83r 2  69 02                adc     #$02
000C85r 2  A4 B5                ldy     LOWTR+1
000C87r 2  90 01                bcc     L2F9E
000C89r 2  C8                   iny
000C8Ar 2               L2F9E:
000C8Ar 2  85 9C                sta     VARPNT
000C8Cr 2  84 9D                sty     VARPNT+1
000C8Er 2  60                   rts
000C8Fr 2               
000C8Fr 1               .include "array.s"
000C8Fr 2               .segment "CODE"
000C8Fr 2               
000C8Fr 2               ; ----------------------------------------------------------------------------
000C8Fr 2               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
000C8Fr 2               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
000C8Fr 2               ; ----------------------------------------------------------------------------
000C8Fr 2               GETARY:
000C8Fr 2  A5 62                lda     EOLPNTR
000C91r 2  0A                   asl     a
000C92r 2  69 05                adc     #$05
000C94r 2  65 B4                adc     LOWTR
000C96r 2  A4 B5                ldy     LOWTR+1
000C98r 2  90 01                bcc     L2FAF
000C9Ar 2  C8                   iny
000C9Br 2               L2FAF:
000C9Br 2  85 AD                sta     HIGHDS
000C9Dr 2  84 AE                sty     HIGHDS+1
000C9Fr 2  60                   rts
000CA0r 2               
000CA0r 2               ; ----------------------------------------------------------------------------
000CA0r 2               NEG32768:
000CA0r 2  90 80 00 00          .byte   $90,$80,$00,$00
000CA4r 2               
000CA4r 2               .ifdef CONFIG_2C
000CA4r 2               		.byte	$00; bugfix: short number
000CA4r 2               .endif
000CA4r 2               
000CA4r 2               ; ----------------------------------------------------------------------------
000CA4r 2               ; EVALUATE NUMERIC FORMULA AT TXTPTR
000CA4r 2               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
000CA4r 2               ; IN FAC+3,4
000CA4r 2               ; ----------------------------------------------------------------------------
000CA4r 2               MAKINT:
000CA4r 2  20 C8 00             jsr     CHRGET
000CA7r 2               .ifdef CONFIG_2
000CA7r 2  20 rr rr             jsr     FRMEVL
000CAAr 2               .else
000CAAr 2                       jsr     FRMNUM
000CAAr 2               .endif
000CAAr 2               
000CAAr 2               ; ----------------------------------------------------------------------------
000CAAr 2               ; CONVERT FAC TO INTEGER
000CAAr 2               ; MUST BE POSITIVE AND LESS THAN 32768
000CAAr 2               ; ----------------------------------------------------------------------------
000CAAr 2               MKINT:
000CAAr 2               .ifdef CONFIG_2
000CAAr 2  20 rr rr             jsr     CHKNUM
000CADr 2               .endif
000CADr 2  A5 BB                lda     FACSIGN
000CAFr 2  30 0D                bmi     MI1
000CB1r 2               
000CB1r 2               ; ----------------------------------------------------------------------------
000CB1r 2               ; CONVERT FAC TO INTEGER
000CB1r 2               ; MUST BE -32767 <= FAC <= 32767
000CB1r 2               ; ----------------------------------------------------------------------------
000CB1r 2               AYINT:
000CB1r 2  A5 B6                lda     FAC
000CB3r 2  C9 90                cmp     #$90
000CB5r 2  90 09                bcc     MI2
000CB7r 2  A9 rr                lda     #<NEG32768
000CB9r 2  A0 rr                ldy     #>NEG32768
000CBBr 2  20 rr rr             jsr     FCOMP
000CBEr 2               MI1:
000CBEr 2  D0 7A                bne     IQERR
000CC0r 2               MI2:
000CC0r 2  4C rr rr             jmp     QINT
000CC3r 2               
000CC3r 2               ; ----------------------------------------------------------------------------
000CC3r 2               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
000CC3r 2               ; ----------------------------------------------------------------------------
000CC3r 2               ARRAY:
000CC3r 2  A5 63                lda     DIMFLG
000CC5r 2               .ifndef CONFIG_SMALL
000CC5r 2  05 65                ora     VALTYP+1
000CC7r 2               .endif
000CC7r 2  48                   pha
000CC8r 2  A5 64                lda     VALTYP
000CCAr 2  48                   pha
000CCBr 2  A0 00                ldy     #$00
000CCDr 2               L2FDE:
000CCDr 2  98                   tya
000CCEr 2  48                   pha
000CCFr 2  A5 9B                lda     VARNAM+1
000CD1r 2  48                   pha
000CD2r 2  A5 9A                lda     VARNAM
000CD4r 2  48                   pha
000CD5r 2  20 rr rr             jsr     MAKINT
000CD8r 2  68                   pla
000CD9r 2  85 9A                sta     VARNAM
000CDBr 2  68                   pla
000CDCr 2  85 9B                sta     VARNAM+1
000CDEr 2  68                   pla
000CDFr 2  A8                   tay
000CE0r 2  BA                   tsx
000CE1r 2  BD 02 01             lda     STACK+2,x
000CE4r 2  48                   pha
000CE5r 2  BD 01 01             lda     STACK+1,x
000CE8r 2  48                   pha
000CE9r 2  A5 B9                lda     FAC_LAST-1
000CEBr 2  9D 02 01             sta     STACK+2,x
000CEEr 2  A5 BA                lda     FAC_LAST
000CF0r 2  9D 01 01             sta     STACK+1,x
000CF3r 2  C8                   iny
000CF4r 2  20 CE 00             jsr     CHRGOT
000CF7r 2  C9 2C                cmp     #$2C
000CF9r 2  F0 D2                beq     L2FDE
000CFBr 2  84 62                sty     EOLPNTR
000CFDr 2  20 rr rr             jsr     CHKCLS
000D00r 2  68                   pla
000D01r 2  85 64                sta     VALTYP
000D03r 2  68                   pla
000D04r 2               .ifndef CONFIG_SMALL
000D04r 2  85 65                sta     VALTYP+1
000D06r 2  29 7F                and     #$7F
000D08r 2               .endif
000D08r 2  85 63                sta     DIMFLG
000D0Ar 2               ; ----------------------------------------------------------------------------
000D0Ar 2               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
000D0Ar 2               ; ----------------------------------------------------------------------------
000D0Ar 2  A6 84                ldx     ARYTAB
000D0Cr 2  A5 85                lda     ARYTAB+1
000D0Er 2               L301F:
000D0Er 2  86 B4                stx     LOWTR
000D10r 2  85 B5                sta     LOWTR+1
000D12r 2  C5 87                cmp     STREND+1
000D14r 2  D0 04                bne     L302B
000D16r 2  E4 86                cpx     STREND
000D18r 2  F0 39                beq     MAKE_NEW_ARRAY
000D1Ar 2               L302B:
000D1Ar 2  A0 00                ldy     #$00
000D1Cr 2  B1 B4                lda     (LOWTR),y
000D1Er 2  C8                   iny
000D1Fr 2  C5 9A                cmp     VARNAM
000D21r 2  D0 06                bne     L303A
000D23r 2  A5 9B                lda     VARNAM+1
000D25r 2  D1 B4                cmp     (LOWTR),y
000D27r 2  F0 16                beq     USE_OLD_ARRAY
000D29r 2               L303A:
000D29r 2  C8                   iny
000D2Ar 2  B1 B4                lda     (LOWTR),y
000D2Cr 2  18                   clc
000D2Dr 2  65 B4                adc     LOWTR
000D2Fr 2  AA                   tax
000D30r 2  C8                   iny
000D31r 2  B1 B4                lda     (LOWTR),y
000D33r 2  65 B5                adc     LOWTR+1
000D35r 2  90 D7                bcc     L301F
000D37r 2               
000D37r 2               ; ----------------------------------------------------------------------------
000D37r 2               ; ERROR:  BAD SUBSCRIPTS
000D37r 2               ; ----------------------------------------------------------------------------
000D37r 2               SUBERR:
000D37r 2  A2 6B                ldx     #ERR_BADSUBS
000D39r 2  2C                   .byte   $2C
000D3Ar 2               
000D3Ar 2               ; ----------------------------------------------------------------------------
000D3Ar 2               ; ERROR:  ILLEGAL QUANTITY
000D3Ar 2               ; ----------------------------------------------------------------------------
000D3Ar 2               IQERR:
000D3Ar 2  A2 35                ldx     #ERR_ILLQTY
000D3Cr 2               JER:
000D3Cr 2  4C rr rr             jmp     ERROR
000D3Fr 2               
000D3Fr 2               ; ----------------------------------------------------------------------------
000D3Fr 2               ; FOUND THE ARRAY
000D3Fr 2               ; ----------------------------------------------------------------------------
000D3Fr 2               USE_OLD_ARRAY:
000D3Fr 2  A2 78                ldx     #ERR_REDIMD
000D41r 2  A5 63                lda     DIMFLG
000D43r 2  D0 F7                bne     JER
000D45r 2  20 rr rr             jsr     GETARY
000D48r 2  A5 62                lda     EOLPNTR
000D4Ar 2  A0 04                ldy     #$04
000D4Cr 2  D1 B4                cmp     (LOWTR),y
000D4Er 2  D0 E7                bne     SUBERR
000D50r 2  4C rr rr             jmp     FIND_ARRAY_ELEMENT
000D53r 2               
000D53r 2               ; ----------------------------------------------------------------------------
000D53r 2               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
000D53r 2               ; ----------------------------------------------------------------------------
000D53r 2               MAKE_NEW_ARRAY:
000D53r 2  20 rr rr             jsr     GETARY
000D56r 2  20 rr rr             jsr     REASON
000D59r 2  A9 00                lda     #$00
000D5Br 2  A8                   tay
000D5Cr 2  85 C7                sta     STRNG2+1
000D5Er 2  A2 05                ldx     #BYTES_PER_ELEMENT
000D60r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000D60r 2                       stx     STRNG2
000D60r 2               .endif
000D60r 2  A5 9A                lda     VARNAM
000D62r 2  91 B4                sta     (LOWTR),y
000D64r 2               .ifndef CONFIG_SMALL
000D64r 2  10 01                bpl     L3078
000D66r 2  CA                   dex
000D67r 2               L3078:
000D67r 2               .endif
000D67r 2  C8                   iny
000D68r 2  A5 9B                lda     VARNAM+1
000D6Ar 2  91 B4                sta     (LOWTR),y
000D6Cr 2               .if (!.def(CONFIG_SMALL)) || .def(CONFIG_2)
000D6Cr 2  10 02                bpl     L3081
000D6Er 2  CA                   dex
000D6Fr 2                 .if !(.def(CONFIG_SMALL) && .def(CONFIG_2))
000D6Fr 2  CA                   dex
000D70r 2                 .endif
000D70r 2               L3081:
000D70r 2  86 C6                stx     STRNG2
000D72r 2               .endif
000D72r 2  A5 62                lda     EOLPNTR
000D74r 2  C8                   iny
000D75r 2  C8                   iny
000D76r 2  C8                   iny
000D77r 2  91 B4                sta     (LOWTR),y
000D79r 2               L308A:
000D79r 2  A2 0B                ldx     #$0B
000D7Br 2  A9 00                lda     #$00
000D7Dr 2  24 63                bit     DIMFLG
000D7Fr 2  50 08                bvc     L309A
000D81r 2  68                   pla
000D82r 2  18                   clc
000D83r 2  69 01                adc     #$01
000D85r 2  AA                   tax
000D86r 2  68                   pla
000D87r 2  69 00                adc     #$00
000D89r 2               L309A:
000D89r 2  C8                   iny
000D8Ar 2  91 B4                sta     (LOWTR),y
000D8Cr 2  C8                   iny
000D8Dr 2  8A                   txa
000D8Er 2  91 B4                sta     (LOWTR),y
000D90r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000D93r 2  86 C6                stx     STRNG2
000D95r 2  85 C7                sta     STRNG2+1
000D97r 2  A4 77                ldy     INDEX
000D99r 2  C6 62                dec     EOLPNTR
000D9Br 2  D0 DC                bne     L308A
000D9Dr 2  65 AE                adc     HIGHDS+1
000D9Fr 2  B0 5D                bcs     GME
000DA1r 2  85 AE                sta     HIGHDS+1
000DA3r 2  A8                   tay
000DA4r 2  8A                   txa
000DA5r 2  65 AD                adc     HIGHDS
000DA7r 2  90 03                bcc     L30BD
000DA9r 2  C8                   iny
000DAAr 2  F0 52                beq     GME
000DACr 2               L30BD:
000DACr 2  20 rr rr             jsr     REASON
000DAFr 2  85 86                sta     STREND
000DB1r 2  84 87                sty     STREND+1
000DB3r 2  A9 00                lda     #$00
000DB5r 2  E6 C7                inc     STRNG2+1
000DB7r 2  A4 C6                ldy     STRNG2
000DB9r 2  F0 05                beq     L30D1
000DBBr 2               L30CC:
000DBBr 2  88                   dey
000DBCr 2  91 AD                sta     (HIGHDS),y
000DBEr 2  D0 FB                bne     L30CC
000DC0r 2               L30D1:
000DC0r 2  C6 AE                dec     HIGHDS+1
000DC2r 2  C6 C7                dec     STRNG2+1
000DC4r 2  D0 F5                bne     L30CC
000DC6r 2  E6 AE                inc     HIGHDS+1
000DC8r 2  38                   sec
000DC9r 2  A5 86                lda     STREND
000DCBr 2  E5 B4                sbc     LOWTR
000DCDr 2  A0 02                ldy     #$02
000DCFr 2  91 B4                sta     (LOWTR),y
000DD1r 2  A5 87                lda     STREND+1
000DD3r 2  C8                   iny
000DD4r 2  E5 B5                sbc     LOWTR+1
000DD6r 2  91 B4                sta     (LOWTR),y
000DD8r 2  A5 63                lda     DIMFLG
000DDAr 2  D0 62                bne     RTS9
000DDCr 2  C8                   iny
000DDDr 2               
000DDDr 2               ; ----------------------------------------------------------------------------
000DDDr 2               ; FIND SPECIFIED ARRAY ELEMENT
000DDDr 2               ;
000DDDr 2               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
000DDDr 2               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
000DDDr 2               ; ----------------------------------------------------------------------------
000DDDr 2               FIND_ARRAY_ELEMENT:
000DDDr 2  B1 B4                lda     (LOWTR),y
000DDFr 2  85 62                sta     EOLPNTR
000DE1r 2  A9 00                lda     #$00
000DE3r 2  85 C6                sta     STRNG2
000DE5r 2               L30F6:
000DE5r 2  85 C7                sta     STRNG2+1
000DE7r 2  C8                   iny
000DE8r 2  68                   pla
000DE9r 2  AA                   tax
000DEAr 2  85 B9                sta     FAC_LAST-1
000DECr 2  68                   pla
000DEDr 2  85 BA                sta     FAC_LAST
000DEFr 2  D1 B4                cmp     (LOWTR),y
000DF1r 2  90 0E                bcc     FAE2
000DF3r 2  D0 06                bne     GSE
000DF5r 2  C8                   iny
000DF6r 2  8A                   txa
000DF7r 2  D1 B4                cmp     (LOWTR),y
000DF9r 2  90 07                bcc     FAE3
000DFBr 2               ; ----------------------------------------------------------------------------
000DFBr 2               GSE:
000DFBr 2  4C rr rr             jmp     SUBERR
000DFEr 2               GME:
000DFEr 2  4C rr rr             jmp     MEMERR
000E01r 2               ; ----------------------------------------------------------------------------
000E01r 2               FAE2:
000E01r 2  C8                   iny
000E02r 2               FAE3:
000E02r 2  A5 C7                lda     STRNG2+1
000E04r 2  05 C6                ora     STRNG2
000E06r 2  18                   clc
000E07r 2  F0 0A                beq     L3124
000E09r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000E0Cr 2  8A                   txa
000E0Dr 2  65 B9                adc     FAC_LAST-1
000E0Fr 2  AA                   tax
000E10r 2  98                   tya
000E11r 2  A4 77                ldy     INDEX
000E13r 2               L3124:
000E13r 2  65 BA                adc     FAC_LAST
000E15r 2  86 C6                stx     STRNG2
000E17r 2  C6 62                dec     EOLPNTR
000E19r 2  D0 CA                bne     L30F6
000E1Br 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000E1Br 2                       asl     STRNG2
000E1Br 2                       rol     a
000E1Br 2                       bcs     GSE
000E1Br 2                       asl     STRNG2
000E1Br 2                       rol     a
000E1Br 2                       bcs     GSE
000E1Br 2                       tay
000E1Br 2                       lda     STRNG2
000E1Br 2               .else
000E1Br 2                 .ifdef CONFIG_11A
000E1Br 2  85 C7                sta     STRNG2+1
000E1Dr 2                 .endif
000E1Dr 2  A2 05                ldx     #BYTES_FP
000E1Fr 2                 .ifdef CONFIG_SMALL
000E1Fr 2                       lda     VARNAM+1
000E1Fr 2                 .else
000E1Fr 2  A5 9A                lda     VARNAM
000E21r 2                 .endif
000E21r 2  10 01                bpl     L3135
000E23r 2  CA                   dex
000E24r 2               L3135:
000E24r 2                 .ifdef CONFIG_SMALL
000E24r 2                       stx     RESULT+1
000E24r 2                 .else
000E24r 2  A5 9B                lda     VARNAM+1
000E26r 2  10 02                bpl     L313B
000E28r 2  CA                   dex
000E29r 2  CA                   dex
000E2Ar 2               L313B:
000E2Ar 2  86 7D                stx     RESULT+2
000E2Cr 2                 .endif
000E2Cr 2  A9 00                lda     #$00
000E2Er 2  20 rr rr             jsr     MULTIPLY_SUBS1
000E31r 2  8A                   txa
000E32r 2               .endif
000E32r 2  65 AD                adc     HIGHDS
000E34r 2  85 9C                sta     VARPNT
000E36r 2  98                   tya
000E37r 2  65 AE                adc     HIGHDS+1
000E39r 2  85 9D                sta     VARPNT+1
000E3Br 2  A8                   tay
000E3Cr 2  A5 9C                lda     VARPNT
000E3Er 2               RTS9:
000E3Er 2  60                   rts
000E3Fr 2               
000E3Fr 2               ; ----------------------------------------------------------------------------
000E3Fr 2               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
000E3Fr 2               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
000E3Fr 2               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
000E3Fr 2               ; ----------------------------------------------------------------------------
000E3Fr 2               MULTIPLY_SUBSCRIPT:
000E3Fr 2  84 77                sty     INDEX
000E41r 2  B1 B4                lda     (LOWTR),y
000E43r 2  85 7D                sta     RESULT_LAST-2
000E45r 2  88                   dey
000E46r 2  B1 B4                lda     (LOWTR),y
000E48r 2               MULTIPLY_SUBS1:
000E48r 2  85 7E                sta     RESULT_LAST-1
000E4Ar 2  A9 10                lda     #$10
000E4Cr 2  85 B2                sta     INDX
000E4Er 2  A2 00                ldx     #$00
000E50r 2  A0 00                ldy     #$00
000E52r 2               L3163:
000E52r 2  8A                   txa
000E53r 2  0A                   asl     a
000E54r 2  AA                   tax
000E55r 2  98                   tya
000E56r 2  2A                   rol     a
000E57r 2  A8                   tay
000E58r 2  B0 A4                bcs     GME
000E5Ar 2  06 C6                asl     STRNG2
000E5Cr 2  26 C7                rol     STRNG2+1
000E5Er 2  90 0B                bcc     L317C
000E60r 2  18                   clc
000E61r 2  8A                   txa
000E62r 2  65 7D                adc     RESULT_LAST-2
000E64r 2  AA                   tax
000E65r 2  98                   tya
000E66r 2  65 7E                adc     RESULT_LAST-1
000E68r 2  A8                   tay
000E69r 2  B0 93                bcs     GME
000E6Br 2               L317C:
000E6Br 2  C6 B2                dec     INDX
000E6Dr 2  D0 E3                bne     L3163
000E6Fr 2  60                   rts
000E70r 2               
000E70r 2               
000E70r 1               .include "misc2.s"
000E70r 2               .segment "CODE"
000E70r 2               
000E70r 2               ; ----------------------------------------------------------------------------
000E70r 2               ; "FRE" FUNCTION
000E70r 2               ;
000E70r 2               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
000E70r 2               ; ----------------------------------------------------------------------------
000E70r 2               FRE:
000E70r 2  A5 64                lda     VALTYP
000E72r 2  F0 03                beq     L3188
000E74r 2  20 rr rr             jsr     FREFAC
000E77r 2               L3188:
000E77r 2  20 rr rr             jsr     GARBAG
000E7Ar 2  38                   sec
000E7Br 2  A5 88                lda     FRETOP
000E7Dr 2  E5 86                sbc     STREND
000E7Fr 2  A8                   tay
000E80r 2  A5 89                lda     FRETOP+1
000E82r 2  E5 87                sbc     STREND+1
000E84r 2               ; FALL INTO GIVAYF TO FLOAT THE VALUE
000E84r 2               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
000E84r 2               
000E84r 2               ; ----------------------------------------------------------------------------
000E84r 2               ; FLOAT THE SIGNED INTEGER IN A,Y
000E84r 2               ; ----------------------------------------------------------------------------
000E84r 2               GIVAYF:
000E84r 2  A2 00                ldx     #$00
000E86r 2  86 64                stx     VALTYP
000E88r 2  85 B7                sta     FAC+1
000E8Ar 2  84 B8                sty     FAC+2
000E8Cr 2  A2 90                ldx     #$90
000E8Er 2  4C rr rr             jmp     FLOAT1
000E91r 2               POS:
000E91r 2  A4 0B                ldy     POSX
000E93r 2               
000E93r 2               ; ----------------------------------------------------------------------------
000E93r 2               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
000E93r 2               ; ----------------------------------------------------------------------------
000E93r 2               SNGFLT:
000E93r 2  A9 00                lda     #$00
000E95r 2  F0 ED                beq     GIVAYF
000E97r 2               
000E97r 2               ; ----------------------------------------------------------------------------
000E97r 2               ; CHECK FOR DIRECT OR RUNNING MODE
000E97r 2               ; GIVING ERROR IF DIRECT MODE
000E97r 2               ; ----------------------------------------------------------------------------
000E97r 2               ERRDIR:
000E97r 2  A6 8F                ldx     CURLIN+1
000E99r 2  E8                   inx
000E9Ar 2  D0 A2                bne     RTS9
000E9Cr 2  A2 95                ldx     #ERR_ILLDIR
000E9Er 2               .ifdef CONFIG_2
000E9Er 2  2C                   .byte   $2C
000E9Fr 2               LD288:
000E9Fr 2  A2 E0                ldx     #ERR_UNDEFFN
000EA1r 2               .endif
000EA1r 2               L31AF:
000EA1r 2  4C rr rr             jmp     ERROR
000EA4r 2               DEF:
000EA4r 2  20 rr rr             jsr     FNC
000EA7r 2  20 rr rr             jsr     ERRDIR
000EAAr 2  20 rr rr             jsr     CHKOPN
000EADr 2  A9 80                lda     #$80
000EAFr 2  85 67                sta     SUBFLG
000EB1r 2  20 rr rr             jsr     PTRGET
000EB4r 2  20 rr rr             jsr     CHKNUM
000EB7r 2  20 rr rr             jsr     CHKCLS
000EBAr 2  A9 AB                lda     #TOKEN_EQUAL
000EBCr 2  20 rr rr             jsr     SYNCHR
000EBFr 2               .ifndef CONFIG_SMALL
000EBFr 2  48                   pha
000EC0r 2               .endif
000EC0r 2  A5 9D                lda     VARPNT+1
000EC2r 2  48                   pha
000EC3r 2  A5 9C                lda     VARPNT
000EC5r 2  48                   pha
000EC6r 2  A5 D0                lda     TXTPTR+1
000EC8r 2  48                   pha
000EC9r 2  A5 CF                lda     TXTPTR
000ECBr 2  48                   pha
000ECCr 2  20 rr rr             jsr     DATA
000ECFr 2  4C rr rr             jmp     L3250
000ED2r 2               FNC:
000ED2r 2  A9 9E                lda     #TOKEN_FN
000ED4r 2  20 rr rr             jsr     SYNCHR
000ED7r 2  09 80                ora     #$80
000ED9r 2  85 67                sta     SUBFLG
000EDBr 2  20 rr rr             jsr     PTRGET3
000EDEr 2  85 A3                sta     FNCNAM
000EE0r 2  84 A4                sty     FNCNAM+1
000EE2r 2  4C rr rr             jmp     CHKNUM
000EE5r 2               L31F3:
000EE5r 2  20 rr rr             jsr     FNC
000EE8r 2  A5 A4                lda     FNCNAM+1
000EEAr 2  48                   pha
000EEBr 2  A5 A3                lda     FNCNAM
000EEDr 2  48                   pha
000EEEr 2  20 rr rr             jsr     PARCHK
000EF1r 2  20 rr rr             jsr     CHKNUM
000EF4r 2  68                   pla
000EF5r 2  85 A3                sta     FNCNAM
000EF7r 2  68                   pla
000EF8r 2  85 A4                sta     FNCNAM+1
000EFAr 2  A0 02                ldy     #$02
000EFCr 2               .ifndef CONFIG_2
000EFCr 2                       ldx     #ERR_UNDEFFN
000EFCr 2               .endif
000EFCr 2  B1 A3                lda     (FNCNAM),y
000EFEr 2               .ifndef CONFIG_2
000EFEr 2                       beq     L31AF
000EFEr 2               .endif
000EFEr 2  85 9C                sta     VARPNT
000F00r 2  AA                   tax
000F01r 2  C8                   iny
000F02r 2  B1 A3                lda     (FNCNAM),y
000F04r 2               .ifdef CONFIG_2
000F04r 2  F0 99                beq     LD288
000F06r 2               .endif
000F06r 2  85 9D                sta     VARPNT+1
000F08r 2               .ifndef CONFIG_SMALL
000F08r 2  C8                   iny
000F09r 2               .endif
000F09r 2               L3219:
000F09r 2  B1 9C                lda     (VARPNT),y
000F0Br 2  48                   pha
000F0Cr 2  88                   dey
000F0Dr 2  10 FA                bpl     L3219
000F0Fr 2  A4 9D                ldy     VARPNT+1
000F11r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
000F14r 2  A5 D0                lda     TXTPTR+1
000F16r 2  48                   pha
000F17r 2  A5 CF                lda     TXTPTR
000F19r 2  48                   pha
000F1Ar 2  B1 A3                lda     (FNCNAM),y
000F1Cr 2  85 CF                sta     TXTPTR
000F1Er 2  C8                   iny
000F1Fr 2  B1 A3                lda     (FNCNAM),y
000F21r 2  85 D0                sta     TXTPTR+1
000F23r 2  A5 9D                lda     VARPNT+1
000F25r 2  48                   pha
000F26r 2  A5 9C                lda     VARPNT
000F28r 2  48                   pha
000F29r 2  20 rr rr             jsr     FRMNUM
000F2Cr 2  68                   pla
000F2Dr 2  85 A3                sta     FNCNAM
000F2Fr 2  68                   pla
000F30r 2  85 A4                sta     FNCNAM+1
000F32r 2  20 CE 00             jsr     CHRGOT
000F35r 2  F0 03                beq     L324A
000F37r 2  4C rr rr             jmp     SYNERR
000F3Ar 2               L324A:
000F3Ar 2  68                   pla
000F3Br 2  85 CF                sta     TXTPTR
000F3Dr 2  68                   pla
000F3Er 2  85 D0                sta     TXTPTR+1
000F40r 2               L3250:
000F40r 2  A0 00                ldy     #$00
000F42r 2  68                   pla
000F43r 2  91 A3                sta     (FNCNAM),y
000F45r 2  68                   pla
000F46r 2  C8                   iny
000F47r 2  91 A3                sta     (FNCNAM),y
000F49r 2  68                   pla
000F4Ar 2  C8                   iny
000F4Br 2  91 A3                sta     (FNCNAM),y
000F4Dr 2  68                   pla
000F4Er 2  C8                   iny
000F4Fr 2  91 A3                sta     (FNCNAM),y
000F51r 2               .ifndef CONFIG_SMALL
000F51r 2  68                   pla
000F52r 2  C8                   iny
000F53r 2  91 A3                sta     (FNCNAM),y
000F55r 2               .endif
000F55r 2  60                   rts
000F56r 2               
000F56r 1               .include "string.s"
000F56r 2               .segment "CODE"
000F56r 2               ; ----------------------------------------------------------------------------
000F56r 2               ; "STR$" FUNCTION
000F56r 2               ; ----------------------------------------------------------------------------
000F56r 2               STR:
000F56r 2  20 rr rr             jsr     CHKNUM
000F59r 2  A0 00                ldy     #$00
000F5Br 2  20 rr rr             jsr     FOUT1
000F5Er 2  68                   pla
000F5Fr 2  68                   pla
000F60r 2               LD353:
000F60r 2  A9 FF                lda     #<(STACK2-1)
000F62r 2  A0 00                ldy     #>(STACK2-1)
000F64r 2               .if STACK2 > $0100
000F64r 2                       bne     STRLIT
000F64r 2               .else
000F64r 2  F0 12                beq     STRLIT
000F66r 2               .endif
000F66r 2               
000F66r 2               ; ----------------------------------------------------------------------------
000F66r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000F66r 2               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
000F66r 2               ; ----------------------------------------------------------------------------
000F66r 2               STRINI:
000F66r 2  A6 B9                ldx     FAC_LAST-1
000F68r 2  A4 BA                ldy     FAC_LAST
000F6Ar 2  86 A5                stx     DSCPTR
000F6Cr 2  84 A6                sty     DSCPTR+1
000F6Er 2               
000F6Er 2               ; ----------------------------------------------------------------------------
000F6Er 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000F6Er 2               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
000F6Er 2               ; ----------------------------------------------------------------------------
000F6Er 2               STRSPA:
000F6Er 2  20 rr rr             jsr     GETSPA
000F71r 2  86 B7                stx     FAC+1
000F73r 2  84 B8                sty     FAC+2
000F75r 2  85 B6                sta     FAC
000F77r 2  60                   rts
000F78r 2               
000F78r 2               ; ----------------------------------------------------------------------------
000F78r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000F78r 2               ; AND TERMINATED BY $00 OR QUOTATION MARK
000F78r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000F78r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000F78r 2               ; ----------------------------------------------------------------------------
000F78r 2               STRLIT:
000F78r 2  A2 22                ldx     #$22
000F7Ar 2  86 60                stx     CHARAC
000F7Cr 2  86 61                stx     ENDCHR
000F7Er 2               
000F7Er 2               ; ----------------------------------------------------------------------------
000F7Er 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000F7Er 2               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
000F7Er 2               ;
000F7Er 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000F7Er 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000F7Er 2               ; ----------------------------------------------------------------------------
000F7Er 2               STRLT2:
000F7Er 2  85 C4                sta     STRNG1
000F80r 2  84 C5                sty     STRNG1+1
000F82r 2  85 B7                sta     FAC+1
000F84r 2  84 B8                sty     FAC+2
000F86r 2  A0 FF                ldy     #$FF
000F88r 2               L3298:
000F88r 2  C8                   iny
000F89r 2  B1 C4                lda     (STRNG1),y
000F8Br 2  F0 0C                beq     L32A9
000F8Dr 2  C5 60                cmp     CHARAC
000F8Fr 2  F0 04                beq     L32A5
000F91r 2  C5 61                cmp     ENDCHR
000F93r 2  D0 F3                bne     L3298
000F95r 2               L32A5:
000F95r 2  C9 22                cmp     #$22
000F97r 2  F0 01                beq     L32AA
000F99r 2               L32A9:
000F99r 2  18                   clc
000F9Ar 2               L32AA:
000F9Ar 2  84 B6                sty     FAC
000F9Cr 2  98                   tya
000F9Dr 2  65 C4                adc     STRNG1
000F9Fr 2  85 C6                sta     STRNG2
000FA1r 2  A6 C5                ldx     STRNG1+1
000FA3r 2  90 01                bcc     L32B6
000FA5r 2  E8                   inx
000FA6r 2               L32B6:
000FA6r 2  86 C7                stx     STRNG2+1
000FA8r 2  A5 C5                lda     STRNG1+1
000FAAr 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000FAAr 2                       beq     LD399
000FAAr 2                       cmp     #>INPUTBUFFER
000FAAr 2               .elseif .def(AIM65)
000FAAr 2                       beq     LD399
000FAAr 2                       cmp     #$01
000FAAr 2               .endif
000FAAr 2  D0 0B                bne     PUTNEW
000FACr 2               LD399:
000FACr 2  98                   tya
000FADr 2  20 rr rr             jsr     STRINI
000FB0r 2  A6 C4                ldx     STRNG1
000FB2r 2  A4 C5                ldy     STRNG1+1
000FB4r 2  20 rr rr             jsr     MOVSTR
000FB7r 2               
000FB7r 2               ; ----------------------------------------------------------------------------
000FB7r 2               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
000FB7r 2               ;
000FB7r 2               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
000FB7r 2               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
000FB7r 2               ; ----------------------------------------------------------------------------
000FB7r 2               PUTNEW:
000FB7r 2  A6 6B                ldx     TEMPPT
000FB9r 2  E0 77                cpx     #TEMPST+9
000FBBr 2  D0 05                bne     PUTEMP
000FBDr 2  A2 BF                ldx     #ERR_FRMCPX
000FBFr 2               JERR:
000FBFr 2  4C rr rr             jmp     ERROR
000FC2r 2               PUTEMP:
000FC2r 2  A5 B6                lda     FAC
000FC4r 2  95 00                sta     0,x
000FC6r 2  A5 B7                lda     FAC+1
000FC8r 2  95 01                sta     1,x
000FCAr 2  A5 B8                lda     FAC+2
000FCCr 2  95 02                sta     2,x
000FCEr 2  A0 00                ldy     #$00
000FD0r 2  86 B9                stx     FAC_LAST-1
000FD2r 2  84 BA                sty     FAC_LAST
000FD4r 2               .ifdef CONFIG_2
000FD4r 2  84 C5                sty     FACEXTENSION
000FD6r 2               .endif
000FD6r 2  88                   dey
000FD7r 2  84 64                sty     VALTYP
000FD9r 2  86 6C                stx     LASTPT
000FDBr 2  E8                   inx
000FDCr 2  E8                   inx
000FDDr 2  E8                   inx
000FDEr 2  86 6B                stx     TEMPPT
000FE0r 2  60                   rts
000FE1r 2               
000FE1r 2               ; ----------------------------------------------------------------------------
000FE1r 2               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
000FE1r 2               ; (A)=# BYTES SPACE TO MAKE
000FE1r 2               ;
000FE1r 2               ; RETURN WITH (A) SAME,
000FE1r 2               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
000FE1r 2               ; ----------------------------------------------------------------------------
000FE1r 2               GETSPA:
000FE1r 2  46 66                lsr     DATAFLG
000FE3r 2               L32F1:
000FE3r 2  48                   pha
000FE4r 2  49 FF                eor     #$FF
000FE6r 2  38                   sec
000FE7r 2  65 88                adc     FRETOP
000FE9r 2  A4 89                ldy     FRETOP+1
000FEBr 2  B0 01                bcs     L32FC
000FEDr 2  88                   dey
000FEEr 2               L32FC:
000FEEr 2  C4 87                cpy     STREND+1
000FF0r 2  90 11                bcc     L3311
000FF2r 2  D0 04                bne     L3306
000FF4r 2  C5 86                cmp     STREND
000FF6r 2  90 0B                bcc     L3311
000FF8r 2               L3306:
000FF8r 2  85 88                sta     FRETOP
000FFAr 2  84 89                sty     FRETOP+1
000FFCr 2  85 8A                sta     FRESPC
000FFEr 2  84 8B                sty     FRESPC+1
001000r 2  AA                   tax
001001r 2  68                   pla
001002r 2  60                   rts
001003r 2               L3311:
001003r 2  A2 4D                ldx     #ERR_MEMFULL
001005r 2  A5 66                lda     DATAFLG
001007r 2  30 B6                bmi     JERR
001009r 2  20 rr rr             jsr     GARBAG
00100Cr 2  A9 80                lda     #$80
00100Er 2  85 66                sta     DATAFLG
001010r 2  68                   pla
001011r 2  D0 D0                bne     L32F1
001013r 2               
001013r 2               ; ----------------------------------------------------------------------------
001013r 2               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
001013r 2               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
001013r 2               ; BELOW STRING AREA DOWN TO STREND.
001013r 2               ; ----------------------------------------------------------------------------
001013r 2               GARBAG:
001013r 2               
001013r 2               .ifdef CONST_MEMSIZ
001013r 2                       ldx     #<CONST_MEMSIZ
001013r 2                       lda     #>CONST_MEMSIZ
001013r 2               .else
001013r 2  A6 8C                ldx     MEMSIZ
001015r 2  A5 8D                lda     MEMSIZ+1
001017r 2               .endif
001017r 2               FINDHIGHESTSTRING:
001017r 2  86 88                stx     FRETOP
001019r 2  85 89                sta     FRETOP+1
00101Br 2  A0 00                ldy     #$00
00101Dr 2  84 A4                sty     FNCNAM+1
00101Fr 2               .ifdef CONFIG_2
00101Fr 2  84 A3                sty     FNCNAM	; GC bugfix!
001021r 2               .endif
001021r 2  A5 86                lda     STREND
001023r 2  A6 87                ldx     STREND+1
001025r 2  85 B4                sta     LOWTR
001027r 2  86 B5                stx     LOWTR+1
001029r 2  A9 6E                lda     #TEMPST
00102Br 2  A2 00                ldx     #$00
00102Dr 2  85 77                sta     INDEX
00102Fr 2  86 78                stx     INDEX+1
001031r 2               L333D:
001031r 2  C5 6B                cmp     TEMPPT
001033r 2  F0 05                beq     L3346
001035r 2  20 rr rr             jsr     CHECK_VARIABLE
001038r 2  F0 F7                beq     L333D
00103Ar 2               L3346:
00103Ar 2  A9 07                lda     #BYTES_PER_VARIABLE
00103Cr 2  85 A8                sta     DSCLEN
00103Er 2  A5 82                lda     VARTAB
001040r 2  A6 83                ldx     VARTAB+1
001042r 2  85 77                sta     INDEX
001044r 2  86 78                stx     INDEX+1
001046r 2               L3352:
001046r 2  E4 85                cpx     ARYTAB+1
001048r 2  D0 04                bne     L335A
00104Ar 2  C5 84                cmp     ARYTAB
00104Cr 2  F0 05                beq     L335F
00104Er 2               L335A:
00104Er 2  20 rr rr             jsr     CHECK_SIMPLE_VARIABLE
001051r 2  F0 F3                beq     L3352
001053r 2               L335F:
001053r 2  85 AD                sta     HIGHDS
001055r 2  86 AE                stx     HIGHDS+1
001057r 2  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
001059r 2  85 A8                sta     DSCLEN
00105Br 2               L3367:
00105Br 2  A5 AD                lda     HIGHDS
00105Dr 2  A6 AE                ldx     HIGHDS+1
00105Fr 2               L336B:
00105Fr 2  E4 87                cpx     STREND+1
001061r 2  D0 07                bne     L3376
001063r 2  C5 86                cmp     STREND
001065r 2  D0 03                bne     L3376
001067r 2  4C rr rr             jmp     MOVE_HIGHEST_STRING_TO_TOP
00106Ar 2               L3376:
00106Ar 2  85 77                sta     INDEX
00106Cr 2  86 78                stx     INDEX+1
00106Er 2               .ifdef CONFIG_SMALL
00106Er 2                       ldy     #$01
00106Er 2               .else
00106Er 2  A0 00                ldy     #$00
001070r 2  B1 77                lda     (INDEX),y
001072r 2  AA                   tax
001073r 2  C8                   iny
001074r 2               .endif
001074r 2  B1 77                lda     (INDEX),y
001076r 2  08                   php
001077r 2  C8                   iny
001078r 2  B1 77                lda     (INDEX),y
00107Ar 2  65 AD                adc     HIGHDS
00107Cr 2  85 AD                sta     HIGHDS
00107Er 2  C8                   iny
00107Fr 2  B1 77                lda     (INDEX),y
001081r 2  65 AE                adc     HIGHDS+1
001083r 2  85 AE                sta     HIGHDS+1
001085r 2  28                   plp
001086r 2  10 D3                bpl     L3367
001088r 2               .ifndef CONFIG_SMALL
001088r 2  8A                   txa
001089r 2  30 D0                bmi     L3367
00108Br 2               .endif
00108Br 2  C8                   iny
00108Cr 2  B1 77                lda     (INDEX),y
00108Er 2               .ifdef CONFIG_CBM1_PATCHES
00108Er 2                       jsr     LE7F3 ; XXX patch, call into screen editor
00108Er 2               .else
00108Er 2                 .ifdef CONFIG_11
00108Er 2  A0 00                ldy     #$00	; GC bugfix
001090r 2                 .endif
001090r 2  0A                   asl     a
001091r 2  69 05                adc     #$05
001093r 2               .endif
001093r 2  65 77                adc     INDEX
001095r 2  85 77                sta     INDEX
001097r 2  90 02                bcc     L33A7
001099r 2  E6 78                inc     INDEX+1
00109Br 2               L33A7:
00109Br 2  A6 78                ldx     INDEX+1
00109Dr 2               L33A9:
00109Dr 2  E4 AE                cpx     HIGHDS+1
00109Fr 2  D0 04                bne     L33B1
0010A1r 2  C5 AD                cmp     HIGHDS
0010A3r 2  F0 BA                beq     L336B
0010A5r 2               L33B1:
0010A5r 2  20 rr rr             jsr     CHECK_VARIABLE
0010A8r 2  F0 F3                beq     L33A9
0010AAr 2               
0010AAr 2               ; ----------------------------------------------------------------------------
0010AAr 2               ; PROCESS A SIMPLE VARIABLE
0010AAr 2               ; ----------------------------------------------------------------------------
0010AAr 2               CHECK_SIMPLE_VARIABLE:
0010AAr 2               .ifndef CONFIG_SMALL
0010AAr 2  B1 77                lda     (INDEX),y
0010ACr 2  30 35                bmi     CHECK_BUMP
0010AEr 2               .endif
0010AEr 2  C8                   iny
0010AFr 2  B1 77                lda     (INDEX),y
0010B1r 2  10 30                bpl     CHECK_BUMP
0010B3r 2  C8                   iny
0010B4r 2               
0010B4r 2               ; ----------------------------------------------------------------------------
0010B4r 2               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
0010B4r 2               ; ----------------------------------------------------------------------------
0010B4r 2               CHECK_VARIABLE:
0010B4r 2  B1 77                lda     (INDEX),y
0010B6r 2  F0 2B                beq     CHECK_BUMP
0010B8r 2  C8                   iny
0010B9r 2  B1 77                lda     (INDEX),y
0010BBr 2  AA                   tax
0010BCr 2  C8                   iny
0010BDr 2  B1 77                lda     (INDEX),y
0010BFr 2  C5 89                cmp     FRETOP+1
0010C1r 2  90 06                bcc     L33D5
0010C3r 2  D0 1E                bne     CHECK_BUMP
0010C5r 2  E4 88                cpx     FRETOP
0010C7r 2  B0 1A                bcs     CHECK_BUMP
0010C9r 2               L33D5:
0010C9r 2  C5 B5                cmp     LOWTR+1
0010CBr 2  90 16                bcc     CHECK_BUMP
0010CDr 2  D0 04                bne     L33DF
0010CFr 2  E4 B4                cpx     LOWTR
0010D1r 2  90 10                bcc     CHECK_BUMP
0010D3r 2               L33DF:
0010D3r 2  86 B4                stx     LOWTR
0010D5r 2  85 B5                sta     LOWTR+1
0010D7r 2  A5 77                lda     INDEX
0010D9r 2  A6 78                ldx     INDEX+1
0010DBr 2  85 A3                sta     FNCNAM
0010DDr 2  86 A4                stx     FNCNAM+1
0010DFr 2  A5 A8                lda     DSCLEN
0010E1r 2  85 AA                sta     Z52
0010E3r 2               
0010E3r 2               ; ----------------------------------------------------------------------------
0010E3r 2               ; ADD (DSCLEN) TO PNTR IN INDEX
0010E3r 2               ; RETURN WITH Y=0, PNTR ALSO IN X,A
0010E3r 2               ; ----------------------------------------------------------------------------
0010E3r 2               CHECK_BUMP:
0010E3r 2  A5 A8                lda     DSCLEN
0010E5r 2  18                   clc
0010E6r 2  65 77                adc     INDEX
0010E8r 2  85 77                sta     INDEX
0010EAr 2  90 02                bcc     L33FA
0010ECr 2  E6 78                inc     INDEX+1
0010EEr 2               L33FA:
0010EEr 2  A6 78                ldx     INDEX+1
0010F0r 2  A0 00                ldy     #$00
0010F2r 2  60                   rts
0010F3r 2               
0010F3r 2               ; ----------------------------------------------------------------------------
0010F3r 2               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
0010F3r 2               ; TO TOP AND GO BACK FOR ANOTHER
0010F3r 2               ; ----------------------------------------------------------------------------
0010F3r 2               MOVE_HIGHEST_STRING_TO_TOP:
0010F3r 2               .ifdef CONFIG_2
0010F3r 2  A5 A4                lda     FNCNAM+1	; GC bugfix
0010F5r 2  05 A3                ora     FNCNAM
0010F7r 2               .else
0010F7r 2                       ldx     FNCNAM+1
0010F7r 2               .endif
0010F7r 2  F0 F5                beq     L33FA
0010F9r 2  A5 AA                lda     Z52
0010FBr 2               .ifndef CONFIG_10A
0010FBr 2                       sbc     #$03
0010FBr 2               .else
0010FBr 2  29 04                and     #$04
0010FDr 2               .endif
0010FDr 2  4A                   lsr     a
0010FEr 2  A8                   tay
0010FFr 2  85 AA                sta     Z52
001101r 2  B1 A3                lda     (FNCNAM),y
001103r 2  65 B4                adc     LOWTR
001105r 2  85 AF                sta     HIGHTR
001107r 2  A5 B5                lda     LOWTR+1
001109r 2  69 00                adc     #$00
00110Br 2  85 B0                sta     HIGHTR+1
00110Dr 2  A5 88                lda     FRETOP
00110Fr 2  A6 89                ldx     FRETOP+1
001111r 2  85 AD                sta     HIGHDS
001113r 2  86 AE                stx     HIGHDS+1
001115r 2  20 rr rr             jsr     BLTU2
001118r 2  A4 AA                ldy     Z52
00111Ar 2  C8                   iny
00111Br 2  A5 AD                lda     HIGHDS
00111Dr 2  91 A3                sta     (FNCNAM),y
00111Fr 2  AA                   tax
001120r 2  E6 AE                inc     HIGHDS+1
001122r 2  A5 AE                lda     HIGHDS+1
001124r 2  C8                   iny
001125r 2  91 A3                sta     (FNCNAM),y
001127r 2  4C rr rr             jmp     FINDHIGHESTSTRING
00112Ar 2               
00112Ar 2               ; ----------------------------------------------------------------------------
00112Ar 2               ; CONCATENATE TWO STRINGS
00112Ar 2               ; ----------------------------------------------------------------------------
00112Ar 2               CAT:
00112Ar 2  A5 BA                lda     FAC_LAST
00112Cr 2  48                   pha
00112Dr 2  A5 B9                lda     FAC_LAST-1
00112Fr 2  48                   pha
001130r 2  20 rr rr             jsr     FRM_ELEMENT
001133r 2  20 rr rr             jsr     CHKSTR
001136r 2  68                   pla
001137r 2  85 C4                sta     STRNG1
001139r 2  68                   pla
00113Ar 2  85 C5                sta     STRNG1+1
00113Cr 2  A0 00                ldy     #$00
00113Er 2  B1 C4                lda     (STRNG1),y
001140r 2  18                   clc
001141r 2  71 B9                adc     (FAC_LAST-1),y
001143r 2  90 05                bcc     L3454
001145r 2  A2 B0                ldx     #ERR_STRLONG
001147r 2  4C rr rr             jmp     ERROR
00114Ar 2               L3454:
00114Ar 2  20 rr rr             jsr     STRINI
00114Dr 2  20 rr rr             jsr     MOVINS
001150r 2  A5 A5                lda     DSCPTR
001152r 2  A4 A6                ldy     DSCPTR+1
001154r 2  20 rr rr             jsr     FRETMP
001157r 2  20 rr rr             jsr     MOVSTR1
00115Ar 2  A5 C4                lda     STRNG1
00115Cr 2  A4 C5                ldy     STRNG1+1
00115Er 2  20 rr rr             jsr     FRETMP
001161r 2  20 rr rr             jsr     PUTNEW
001164r 2  4C rr rr             jmp     FRMEVL2
001167r 2               
001167r 2               ; ----------------------------------------------------------------------------
001167r 2               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
001167r 2               ; AND MOVE DESCRIBED STRING TO (FRESPC)
001167r 2               ; ----------------------------------------------------------------------------
001167r 2               MOVINS:
001167r 2  A0 00                ldy     #$00
001169r 2  B1 C4                lda     (STRNG1),y
00116Br 2  48                   pha
00116Cr 2  C8                   iny
00116Dr 2  B1 C4                lda     (STRNG1),y
00116Fr 2  AA                   tax
001170r 2  C8                   iny
001171r 2  B1 C4                lda     (STRNG1),y
001173r 2  A8                   tay
001174r 2  68                   pla
001175r 2               
001175r 2               ; ----------------------------------------------------------------------------
001175r 2               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
001175r 2               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
001175r 2               ; ----------------------------------------------------------------------------
001175r 2               MOVSTR:
001175r 2  86 77                stx     INDEX
001177r 2  84 78                sty     INDEX+1
001179r 2               MOVSTR1:
001179r 2  A8                   tay
00117Ar 2  F0 0A                beq     L3490
00117Cr 2  48                   pha
00117Dr 2               L3487:
00117Dr 2  88                   dey
00117Er 2  B1 77                lda     (INDEX),y
001180r 2  91 8A                sta     (FRESPC),y
001182r 2  98                   tya
001183r 2  D0 F8                bne     L3487
001185r 2  68                   pla
001186r 2               L3490:
001186r 2  18                   clc
001187r 2  65 8A                adc     FRESPC
001189r 2  85 8A                sta     FRESPC
00118Br 2  90 02                bcc     L3499
00118Dr 2  E6 8B                inc     FRESPC+1
00118Fr 2               L3499:
00118Fr 2  60                   rts
001190r 2               
001190r 2               ; ----------------------------------------------------------------------------
001190r 2               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
001190r 2               ; ----------------------------------------------------------------------------
001190r 2               FRESTR:
001190r 2  20 rr rr             jsr     CHKSTR
001193r 2               
001193r 2               ; ----------------------------------------------------------------------------
001193r 2               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
001193r 2               ; A TEMPORARY STRING, RELEASE IT.
001193r 2               ; ----------------------------------------------------------------------------
001193r 2               FREFAC:
001193r 2  A5 B9                lda     FAC_LAST-1
001195r 2  A4 BA                ldy     FAC_LAST
001197r 2               
001197r 2               ; ----------------------------------------------------------------------------
001197r 2               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
001197r 2               ; A TEMPORARY STRING, RELEASE IT.
001197r 2               ; ----------------------------------------------------------------------------
001197r 2               FRETMP:
001197r 2  85 77                sta     INDEX
001199r 2  84 78                sty     INDEX+1
00119Br 2  20 rr rr             jsr     FRETMS
00119Er 2  08                   php
00119Fr 2  A0 00                ldy     #$00
0011A1r 2  B1 77                lda     (INDEX),y
0011A3r 2  48                   pha
0011A4r 2  C8                   iny
0011A5r 2  B1 77                lda     (INDEX),y
0011A7r 2  AA                   tax
0011A8r 2  C8                   iny
0011A9r 2  B1 77                lda     (INDEX),y
0011ABr 2  A8                   tay
0011ACr 2  68                   pla
0011ADr 2  28                   plp
0011AEr 2  D0 13                bne     L34CD
0011B0r 2  C4 89                cpy     FRETOP+1
0011B2r 2  D0 0F                bne     L34CD
0011B4r 2  E4 88                cpx     FRETOP
0011B6r 2  D0 0B                bne     L34CD
0011B8r 2  48                   pha
0011B9r 2  18                   clc
0011BAr 2  65 88                adc     FRETOP
0011BCr 2  85 88                sta     FRETOP
0011BEr 2  90 02                bcc     L34CC
0011C0r 2  E6 89                inc     FRETOP+1
0011C2r 2               L34CC:
0011C2r 2  68                   pla
0011C3r 2               L34CD:
0011C3r 2  86 77                stx     INDEX
0011C5r 2  84 78                sty     INDEX+1
0011C7r 2  60                   rts
0011C8r 2               
0011C8r 2               ; ----------------------------------------------------------------------------
0011C8r 2               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
0011C8r 2               ; ----------------------------------------------------------------------------
0011C8r 2               FRETMS:
0011C8r 2               .ifdef KBD
0011C8r 2                       cpy     #$00
0011C8r 2               .else
0011C8r 2  C4 6D                cpy     LASTPT+1
0011CAr 2               .endif
0011CAr 2  D0 0C                bne     L34E2
0011CCr 2  C5 6C                cmp     LASTPT
0011CEr 2  D0 08                bne     L34E2
0011D0r 2  85 6B                sta     TEMPPT
0011D2r 2  E9 03                sbc     #$03
0011D4r 2  85 6C                sta     LASTPT
0011D6r 2  A0 00                ldy     #$00
0011D8r 2               L34E2:
0011D8r 2  60                   rts
0011D9r 2               
0011D9r 2               ; ----------------------------------------------------------------------------
0011D9r 2               ; "CHR$" FUNCTION
0011D9r 2               ; ----------------------------------------------------------------------------
0011D9r 2               CHRSTR:
0011D9r 2  20 rr rr             jsr     CONINT
0011DCr 2  8A                   txa
0011DDr 2  48                   pha
0011DEr 2  A9 01                lda     #$01
0011E0r 2  20 rr rr             jsr     STRSPA
0011E3r 2  68                   pla
0011E4r 2  A0 00                ldy     #$00
0011E6r 2  91 B7                sta     (FAC+1),y
0011E8r 2  68                   pla
0011E9r 2  68                   pla
0011EAr 2  4C rr rr             jmp     PUTNEW
0011EDr 2               
0011EDr 2               ; ----------------------------------------------------------------------------
0011EDr 2               ; "LEFT$" FUNCTION
0011EDr 2               ; ----------------------------------------------------------------------------
0011EDr 2               LEFTSTR:
0011EDr 2  20 rr rr             jsr     SUBSTRING_SETUP
0011F0r 2  D1 A5                cmp     (DSCPTR),y
0011F2r 2  98                   tya
0011F3r 2               SUBSTRING1:
0011F3r 2  90 04                bcc     L3503
0011F5r 2  B1 A5                lda     (DSCPTR),y
0011F7r 2  AA                   tax
0011F8r 2  98                   tya
0011F9r 2               L3503:
0011F9r 2  48                   pha
0011FAr 2               SUBSTRING2:
0011FAr 2  8A                   txa
0011FBr 2               SUBSTRING3:
0011FBr 2  48                   pha
0011FCr 2  20 rr rr             jsr     STRSPA
0011FFr 2  A5 A5                lda     DSCPTR
001201r 2  A4 A6                ldy     DSCPTR+1
001203r 2  20 rr rr             jsr     FRETMP
001206r 2  68                   pla
001207r 2  A8                   tay
001208r 2  68                   pla
001209r 2  18                   clc
00120Ar 2  65 77                adc     INDEX
00120Cr 2  85 77                sta     INDEX
00120Er 2  90 02                bcc     L351C
001210r 2  E6 78                inc     INDEX+1
001212r 2               L351C:
001212r 2  98                   tya
001213r 2  20 rr rr             jsr     MOVSTR1
001216r 2  4C rr rr             jmp     PUTNEW
001219r 2               
001219r 2               ; ----------------------------------------------------------------------------
001219r 2               ; "RIGHT$" FUNCTION
001219r 2               ; ----------------------------------------------------------------------------
001219r 2               RIGHTSTR:
001219r 2  20 rr rr             jsr     SUBSTRING_SETUP
00121Cr 2  18                   clc
00121Dr 2  F1 A5                sbc     (DSCPTR),y
00121Fr 2  49 FF                eor     #$FF
001221r 2  4C rr rr             jmp     SUBSTRING1
001224r 2               
001224r 2               ; ----------------------------------------------------------------------------
001224r 2               ; "MID$" FUNCTION
001224r 2               ; ----------------------------------------------------------------------------
001224r 2               MIDSTR:
001224r 2  A9 FF                lda     #$FF
001226r 2  85 BA                sta     FAC_LAST
001228r 2  20 CE 00             jsr     CHRGOT
00122Br 2  C9 29                cmp     #$29
00122Dr 2  F0 06                beq     L353F
00122Fr 2  20 rr rr             jsr     CHKCOM
001232r 2  20 rr rr             jsr     GETBYT
001235r 2               L353F:
001235r 2  20 rr rr             jsr     SUBSTRING_SETUP
001238r 2               .ifdef CONFIG_2
001238r 2  F0 4B                beq     GOIQ
00123Ar 2               .endif
00123Ar 2  CA                   dex
00123Br 2  8A                   txa
00123Cr 2  48                   pha
00123Dr 2  18                   clc
00123Er 2  A2 00                ldx     #$00
001240r 2  F1 A5                sbc     (DSCPTR),y
001242r 2  B0 B6                bcs     SUBSTRING2
001244r 2  49 FF                eor     #$FF
001246r 2  C5 BA                cmp     FAC_LAST
001248r 2  90 B1                bcc     SUBSTRING3
00124Ar 2  A5 BA                lda     FAC_LAST
00124Cr 2  B0 AD                bcs     SUBSTRING3
00124Er 2               
00124Er 2               ; ----------------------------------------------------------------------------
00124Er 2               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
00124Er 2               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
00124Er 2               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
00124Er 2               ; ----------------------------------------------------------------------------
00124Er 2               SUBSTRING_SETUP:
00124Er 2  20 rr rr             jsr     CHKCLS
001251r 2  68                   pla
001252r 2               .ifndef CONFIG_11
001252r 2                       sta     JMPADRS+1
001252r 2                       pla
001252r 2                       sta     JMPADRS+2
001252r 2               .else
001252r 2  A8                   tay
001253r 2  68                   pla
001254r 2  85 AA                sta     Z52
001256r 2               .endif
001256r 2  68                   pla
001257r 2  68                   pla
001258r 2  68                   pla
001259r 2  AA                   tax
00125Ar 2  68                   pla
00125Br 2  85 A5                sta     DSCPTR
00125Dr 2  68                   pla
00125Er 2  85 A6                sta     DSCPTR+1
001260r 2               .ifdef CONFIG_11
001260r 2  A5 AA                lda     Z52
001262r 2  48                   pha
001263r 2  98                   tya
001264r 2  48                   pha
001265r 2               .endif
001265r 2  A0 00                ldy     #$00
001267r 2  8A                   txa
001268r 2               .ifndef CONFIG_2
001268r 2                       beq     GOIQ
001268r 2               .endif
001268r 2               .ifndef CONFIG_11
001268r 2                       inc     JMPADRS+1
001268r 2                       jmp     (JMPADRS+1)
001268r 2               .else
001268r 2  60                   rts
001269r 2               .endif
001269r 2               
001269r 2               ; ----------------------------------------------------------------------------
001269r 2               ; "LEN" FUNCTION
001269r 2               ; ----------------------------------------------------------------------------
001269r 2               LEN:
001269r 2  20 rr rr             jsr     GETSTR
00126Cr 2               SNGFLT1:
00126Cr 2  4C rr rr             jmp     SNGFLT
00126Fr 2               
00126Fr 2               ; ----------------------------------------------------------------------------
00126Fr 2               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
00126Fr 2               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
00126Fr 2               ; ----------------------------------------------------------------------------
00126Fr 2               GETSTR:
00126Fr 2  20 rr rr             jsr     FRESTR
001272r 2  A2 00                ldx     #$00
001274r 2  86 64                stx     VALTYP
001276r 2  A8                   tay
001277r 2  60                   rts
001278r 2               
001278r 2               ; ----------------------------------------------------------------------------
001278r 2               ; "ASC" FUNCTION
001278r 2               ; ----------------------------------------------------------------------------
001278r 2               ASC:
001278r 2  20 rr rr             jsr     GETSTR
00127Br 2  F0 08                beq     GOIQ
00127Dr 2  A0 00                ldy     #$00
00127Fr 2  B1 77                lda     (INDEX),y
001281r 2  A8                   tay
001282r 2               .ifndef CONFIG_11A
001282r 2                       jmp     SNGFLT1
001282r 2               .else
001282r 2  4C rr rr             jmp     SNGFLT
001285r 2               .endif
001285r 2               ; ----------------------------------------------------------------------------
001285r 2               GOIQ:
001285r 2  4C rr rr             jmp     IQERR
001288r 2               
001288r 2               ; ----------------------------------------------------------------------------
001288r 2               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
001288r 2               ; TO SINGLE BYTE IN X-REG
001288r 2               ; ----------------------------------------------------------------------------
001288r 2               GTBYTC:
001288r 2  20 C8 00             jsr     CHRGET
00128Br 2               
00128Br 2               ; ----------------------------------------------------------------------------
00128Br 2               ; EVALUATE EXPRESSION AT TXTPTR, AND
00128Br 2               ; CONVERT IT TO SINGLE BYTE IN X-REG
00128Br 2               ; ----------------------------------------------------------------------------
00128Br 2               GETBYT:
00128Br 2  20 rr rr             jsr     FRMNUM
00128Er 2               
00128Er 2               ; ----------------------------------------------------------------------------
00128Er 2               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
00128Er 2               ; ----------------------------------------------------------------------------
00128Er 2               CONINT:
00128Er 2  20 rr rr             jsr     MKINT
001291r 2  A6 B9                ldx     FAC_LAST-1
001293r 2  D0 F0                bne     GOIQ
001295r 2  A6 BA                ldx     FAC_LAST
001297r 2  4C CE 00             jmp     CHRGOT
00129Ar 2               
00129Ar 2               ; ----------------------------------------------------------------------------
00129Ar 2               ; "VAL" FUNCTION
00129Ar 2               ; ----------------------------------------------------------------------------
00129Ar 2               VAL:
00129Ar 2  20 rr rr             jsr     GETSTR
00129Dr 2  D0 03                bne     L35AC
00129Fr 2  4C rr rr             jmp     ZERO_FAC
0012A2r 2               L35AC:
0012A2r 2  A6 CF                ldx     TXTPTR
0012A4r 2  A4 D0                ldy     TXTPTR+1
0012A6r 2  86 C6                stx     STRNG2
0012A8r 2  84 C7                sty     STRNG2+1
0012AAr 2  A6 77                ldx     INDEX
0012ACr 2  86 CF                stx     TXTPTR
0012AEr 2  18                   clc
0012AFr 2  65 77                adc     INDEX
0012B1r 2  85 79                sta     DEST
0012B3r 2  A6 78                ldx     INDEX+1
0012B5r 2  86 D0                stx     TXTPTR+1
0012B7r 2  90 01                bcc     L35C4
0012B9r 2  E8                   inx
0012BAr 2               L35C4:
0012BAr 2  86 7A                stx     DEST+1
0012BCr 2  A0 00                ldy     #$00
0012BEr 2  B1 79                lda     (DEST),y
0012C0r 2  48                   pha
0012C1r 2  A9 00                lda     #$00
0012C3r 2  91 79                sta     (DEST),y
0012C5r 2  20 CE 00             jsr     CHRGOT
0012C8r 2  20 rr rr             jsr     FIN
0012CBr 2  68                   pla
0012CCr 2  A0 00                ldy     #$00
0012CEr 2  91 79                sta     (DEST),y
0012D0r 2               
0012D0r 2               ; ----------------------------------------------------------------------------
0012D0r 2               ; COPY STRNG2 INTO TXTPTR
0012D0r 2               ; ----------------------------------------------------------------------------
0012D0r 2               POINT:
0012D0r 2  A6 C6                ldx     STRNG2
0012D2r 2  A4 C7                ldy     STRNG2+1
0012D4r 2  86 CF                stx     TXTPTR
0012D6r 2  84 D0                sty     TXTPTR+1
0012D8r 2  60                   rts
0012D9r 2               
0012D9r 2               
0012D9r 1               .include "misc3.s"
0012D9r 2               ; KBD specific patches
0012D9r 2               
0012D9r 2               .segment "CODE"
0012D9r 2               
0012D9r 2               .ifdef KBD
0012D9r 2               VARTAB_MINUS_2_TO_AY:
0012D9r 2                       lda     VARTAB
0012D9r 2                       sec
0012D9r 2                       sbc     #$02
0012D9r 2                       ldy     VARTAB+1
0012D9r 2                       bcs     LF42C
0012D9r 2                       dey
0012D9r 2               LF42C:
0012D9r 2                       rts
0012D9r 2               
0012D9r 2               ; ----------------------------------------------------------------------------
0012D9r 2               GET_UPPER:
0012D9r 2                       lda     INPUTBUFFERX,x
0012D9r 2               LF430:
0012D9r 2                       cmp     #'a'
0012D9r 2                       bcc     LF43A
0012D9r 2                       cmp     #'z'+1
0012D9r 2                       bcs     LF43A
0012D9r 2               LF438:
0012D9r 2                       sbc     #$1F
0012D9r 2               LF43A:
0012D9r 2                       rts
0012D9r 2               
0012D9r 2               ; ----------------------------------------------------------------------------
0012D9r 2               GETLN:
0012D9r 2                       ldx     #$5D
0012D9r 2               LF43D:
0012D9r 2                       txa
0012D9r 2                       and     #$7F
0012D9r 2                       cmp     $0340
0012D9r 2                       beq     LF44D
0012D9r 2                       sta     $0340
0012D9r 2                       lda     #$03
0012D9r 2                       jsr     LDE48
0012D9r 2               LF44D:
0012D9r 2                       jsr     LDE7F
0012D9r 2                       bne     RTS4
0012D9r 2                       cpx     #$80
0012D9r 2                       bcc     LF44D
0012D9r 2               RTS4:
0012D9r 2                       rts
0012D9r 2               
0012D9r 2               ; ----------------------------------------------------------------------------
0012D9r 2               LF457:
0012D9r 2                       lda     TXTTAB
0012D9r 2                       ldx     TXTTAB+1
0012D9r 2               LF45B:
0012D9r 2                       sta     JMPADRS+1
0012D9r 2                       stx     JMPADRS+2
0012D9r 2                       ldy     #$01
0012D9r 2                       lda     (JMPADRS+1),y
0012D9r 2                       beq     LF438
0012D9r 2                       iny
0012D9r 2                       iny
0012D9r 2                       lda     (JMPADRS+1),y
0012D9r 2                       dey
0012D9r 2                       cmp     LINNUM+1
0012D9r 2                       bne     LF472
0012D9r 2                       lda     (JMPADRS+1),y
0012D9r 2                       cmp     LINNUM
0012D9r 2               LF472:
0012D9r 2                       bcs     LF43A
0012D9r 2                       dey
0012D9r 2                       lda     (JMPADRS+1),y
0012D9r 2                       tax
0012D9r 2                       dey
0012D9r 2                       lda     (JMPADRS+1),y
0012D9r 2                       bcc     LF45B
0012D9r 2               LF47D:
0012D9r 2                       jmp     (JMPADRS+1)
0012D9r 2               .endif
0012D9r 2               
0012D9r 1               .include "poke.s"
0012D9r 2               .segment "CODE"
0012D9r 2               
0012D9r 2               .ifndef CONFIG_NO_POKE
0012D9r 2               ; ----------------------------------------------------------------------------
0012D9r 2               ; EVALUATE "EXP1,EXP2"
0012D9r 2               ;
0012D9r 2               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
0012D9r 2               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
0012D9r 2               ; ----------------------------------------------------------------------------
0012D9r 2               GTNUM:
0012D9r 2  20 rr rr             jsr     FRMNUM
0012DCr 2  20 rr rr             jsr     GETADR
0012DFr 2               
0012DFr 2               ; ----------------------------------------------------------------------------
0012DFr 2               ; EVALUATE ",EXPRESSION"
0012DFr 2               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
0012DFr 2               ; ----------------------------------------------------------------------------
0012DFr 2               COMBYTE:
0012DFr 2  20 rr rr             jsr     CHKCOM
0012E2r 2  4C rr rr             jmp     GETBYT
0012E5r 2               
0012E5r 2               ; ----------------------------------------------------------------------------
0012E5r 2               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
0012E5r 2               ; ----------------------------------------------------------------------------
0012E5r 2               GETADR:
0012E5r 2  A5 BB                lda     FACSIGN
0012E7r 2                 .ifdef APPLE
0012E7r 2                       nop ; PATCH
0012E7r 2                       nop
0012E7r 2                 .else
0012E7r 2  30 9C                bmi     GOIQ
0012E9r 2                 .endif
0012E9r 2  A5 B6                lda     FAC
0012EBr 2  C9 91                cmp     #$91
0012EDr 2  B0 96                bcs     GOIQ
0012EFr 2  20 rr rr             jsr     QINT
0012F2r 2  A5 B9                lda     FAC_LAST-1
0012F4r 2  A4 BA                ldy     FAC_LAST
0012F6r 2  84 0E                sty     LINNUM
0012F8r 2  85 0F                sta     LINNUM+1
0012FAr 2  60                   rts
0012FBr 2               
0012FBr 2               ; ----------------------------------------------------------------------------
0012FBr 2               ; "PEEK" FUNCTION
0012FBr 2               ; ----------------------------------------------------------------------------
0012FBr 2               PEEK:
0012FBr 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
0012FBr 2                       lda     LINNUM+1
0012FBr 2                       pha
0012FBr 2                       lda     LINNUM
0012FBr 2                       pha
0012FBr 2               .endif
0012FBr 2  20 rr rr             jsr     GETADR
0012FEr 2  A0 00                ldy     #$00
001300r 2               .ifdef CBM1
001300r 2               ; disallow PEEK between $C000 and $DFFF
001300r 2                       cmp     #$C0
001300r 2                       bcc     LD6F3
001300r 2                       cmp     #$E1
001300r 2                       bcc     LD6F6
001300r 2               LD6F3:
001300r 2               .endif
001300r 2               .ifdef CBM2
001300r 2               		nop ; patch that disables the compares above
001300r 2               		nop
001300r 2               		nop
001300r 2               		nop
001300r 2               		nop
001300r 2               		nop
001300r 2               		nop
001300r 2               		nop
001300r 2               .endif
001300r 2  B1 0E                lda     (LINNUM),y
001302r 2  A8                   tay
001303r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
001303r 2                       pla
001303r 2                       sta     LINNUM
001303r 2                       pla
001303r 2                       sta     LINNUM+1
001303r 2               .endif
001303r 2               LD6F6:
001303r 2  4C rr rr             jmp     SNGFLT
001306r 2               
001306r 2               ; ----------------------------------------------------------------------------
001306r 2               ; "POKE" STATEMENT
001306r 2               ; ----------------------------------------------------------------------------
001306r 2               POKE:
001306r 2  20 rr rr             jsr     GTNUM
001309r 2  8A                   txa
00130Ar 2  A0 00                ldy     #$00
00130Cr 2  91 0E                sta     (LINNUM),y
00130Er 2  60                   rts
00130Fr 2               
00130Fr 2               ; ----------------------------------------------------------------------------
00130Fr 2               ; "WAIT" STATEMENT
00130Fr 2               ; ----------------------------------------------------------------------------
00130Fr 2               WAIT:
00130Fr 2  20 rr rr             jsr     GTNUM
001312r 2  86 9E                stx     FORPNT
001314r 2  A2 00                ldx     #$00
001316r 2  20 CE 00             jsr     CHRGOT
001319r 2               .ifdef CONFIG_EASTER_EGG
001319r 2                       beq     EASTER_EGG
001319r 2               .else
001319r 2  F0 03                beq     L3628
00131Br 2               .endif
00131Br 2  20 rr rr             jsr     COMBYTE
00131Er 2               L3628:
00131Er 2  86 9F                stx     FORPNT+1
001320r 2  A0 00                ldy     #$00
001322r 2               L362C:
001322r 2  B1 0E                lda     (LINNUM),y
001324r 2  45 9F                eor     FORPNT+1
001326r 2  25 9E                and     FORPNT
001328r 2  F0 F8                beq     L362C
00132Ar 2               RTS3:
00132Ar 2  60                   rts
00132Br 2               .endif
00132Br 2               
00132Br 1               .include "float.s"
00132Br 2               .segment "CODE"
00132Br 2               
00132Br 2               TEMP1X = TEMP1+(5-BYTES_FP)
00132Br 2               
00132Br 2               ; ----------------------------------------------------------------------------
00132Br 2               ; ADD 0.5 TO FAC
00132Br 2               ; ----------------------------------------------------------------------------
00132Br 2               FADDH:
00132Br 2  A9 rr                lda     #<CON_HALF
00132Dr 2  A0 rr                ldy     #>CON_HALF
00132Fr 2  4C rr rr             jmp     FADD
001332r 2               
001332r 2               ; ----------------------------------------------------------------------------
001332r 2               ; FAC = (Y,A) - FAC
001332r 2               ; ----------------------------------------------------------------------------
001332r 2               FSUB:
001332r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001335r 2               
001335r 2               ; ----------------------------------------------------------------------------
001335r 2               ; FAC = ARG - FAC
001335r 2               ; ----------------------------------------------------------------------------
001335r 2               FSUBT:
001335r 2  A5 BB                lda     FACSIGN
001337r 2  49 FF                eor     #$FF
001339r 2  85 BB                sta     FACSIGN
00133Br 2  45 C3                eor     ARGSIGN
00133Dr 2  85 C4                sta     SGNCPR
00133Fr 2  A5 B6                lda     FAC
001341r 2  4C rr rr             jmp     FADDT
001344r 2               
001344r 2               ; ----------------------------------------------------------------------------
001344r 2               ; Commodore BASIC V2 Easter Egg
001344r 2               ; ----------------------------------------------------------------------------
001344r 2               .ifdef CONFIG_EASTER_EGG
001344r 2               EASTER_EGG:
001344r 2                       lda     LINNUM
001344r 2                       cmp     #<6502
001344r 2                       bne     L3628
001344r 2                       lda     LINNUM+1
001344r 2                       sbc     #>6502
001344r 2                       bne     L3628
001344r 2                       sta     LINNUM
001344r 2                       tay
001344r 2                       lda     #$80
001344r 2                       sta     LINNUM+1
001344r 2               LD758:
001344r 2                       ldx     #$0A
001344r 2               LD75A:
001344r 2                       lda     MICROSOFT-1,x
001344r 2                       and     #$3F
001344r 2                       sta     (LINNUM),y
001344r 2                       iny
001344r 2                       bne     LD766
001344r 2                       inc     LINNUM+1
001344r 2               LD766:
001344r 2                       dex
001344r 2                       bne     LD75A
001344r 2                       dec     FORPNT
001344r 2                       bne     LD758
001344r 2                       rts
001344r 2               .endif
001344r 2               
001344r 2               ; ----------------------------------------------------------------------------
001344r 2               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
001344r 2               ; ----------------------------------------------------------------------------
001344r 2               FADD1:
001344r 2  20 rr rr             jsr     SHIFT_RIGHT
001347r 2  90 3C                bcc     FADD3
001349r 2               
001349r 2               ; ----------------------------------------------------------------------------
001349r 2               ; FAC = (Y,A) + FAC
001349r 2               ; ----------------------------------------------------------------------------
001349r 2               FADD:
001349r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
00134Cr 2               
00134Cr 2               ; ----------------------------------------------------------------------------
00134Cr 2               ; FAC = ARG + FAC
00134Cr 2               ; ----------------------------------------------------------------------------
00134Cr 2               FADDT:
00134Cr 2  D0 03                bne     L365B
00134Er 2  4C rr rr             jmp     COPY_ARG_TO_FAC
001351r 2               L365B:
001351r 2  A6 C5                ldx     FACEXTENSION
001353r 2  86 AB                stx     ARGEXTENSION
001355r 2  A2 BE                ldx     #ARG
001357r 2  A5 BE                lda     ARG
001359r 2               FADD2:
001359r 2  A8                   tay
00135Ar 2               .ifdef KBD
00135Ar 2                       beq     RTS4
00135Ar 2               .else
00135Ar 2  F0 CE                beq     RTS3
00135Cr 2               .endif
00135Cr 2  38                   sec
00135Dr 2  E5 B6                sbc     FAC
00135Fr 2  F0 24                beq     FADD3
001361r 2  90 12                bcc     L367F
001363r 2  84 B6                sty     FAC
001365r 2  A4 C3                ldy     ARGSIGN
001367r 2  84 BB                sty     FACSIGN
001369r 2  49 FF                eor     #$FF
00136Br 2  69 00                adc     #$00
00136Dr 2  A0 00                ldy     #$00
00136Fr 2  84 AB                sty     ARGEXTENSION
001371r 2  A2 B6                ldx     #FAC
001373r 2  D0 04                bne     L3683
001375r 2               L367F:
001375r 2  A0 00                ldy     #$00
001377r 2  84 C5                sty     FACEXTENSION
001379r 2               L3683:
001379r 2  C9 F9                cmp     #$F9
00137Br 2  30 C7                bmi     FADD1
00137Dr 2  A8                   tay
00137Er 2  A5 C5                lda     FACEXTENSION
001380r 2  56 01                lsr     1,x
001382r 2  20 rr rr             jsr     SHIFT_RIGHT4
001385r 2               FADD3:
001385r 2  24 C4                bit     SGNCPR
001387r 2  10 57                bpl     FADD4
001389r 2  A0 B6                ldy     #FAC
00138Br 2  E0 BE                cpx     #ARG
00138Dr 2  F0 02                beq     L369B
00138Fr 2  A0 BE                ldy     #ARG
001391r 2               L369B:
001391r 2  38                   sec
001392r 2  49 FF                eor     #$FF
001394r 2  65 AB                adc     ARGEXTENSION
001396r 2  85 C5                sta     FACEXTENSION
001398r 2               .ifndef CONFIG_SMALL
001398r 2  B9 04 00             lda     4,y
00139Br 2  F5 04                sbc     4,x
00139Dr 2  85 BA                sta     FAC+4
00139Fr 2               .endif
00139Fr 2  B9 03 00             lda     3,y
0013A2r 2  F5 03                sbc     3,x
0013A4r 2  85 B9                sta     FAC+3
0013A6r 2  B9 02 00             lda     2,y
0013A9r 2  F5 02                sbc     2,x
0013ABr 2  85 B8                sta     FAC+2
0013ADr 2  B9 01 00             lda     1,y
0013B0r 2  F5 01                sbc     1,x
0013B2r 2  85 B7                sta     FAC+1
0013B4r 2               
0013B4r 2               ; ----------------------------------------------------------------------------
0013B4r 2               ; NORMALIZE VALUE IN FAC
0013B4r 2               ; ----------------------------------------------------------------------------
0013B4r 2               NORMALIZE_FAC1:
0013B4r 2  B0 03                bcs     NORMALIZE_FAC2
0013B6r 2  20 rr rr             jsr     COMPLEMENT_FAC
0013B9r 2               NORMALIZE_FAC2:
0013B9r 2  A0 00                ldy     #$00
0013BBr 2  98                   tya
0013BCr 2  18                   clc
0013BDr 2               L36C7:
0013BDr 2  A6 B7                ldx     FAC+1
0013BFr 2  D0 4A                bne     NORMALIZE_FAC4
0013C1r 2  A6 B8                ldx     FAC+2
0013C3r 2  86 B7                stx     FAC+1
0013C5r 2  A6 B9                ldx     FAC+3
0013C7r 2  86 B8                stx     FAC+2
0013C9r 2               .ifdef CONFIG_SMALL
0013C9r 2                       ldx     FACEXTENSION
0013C9r 2                       stx     FAC+3
0013C9r 2               .else
0013C9r 2  A6 BA                ldx     FAC+4
0013CBr 2  86 B9                stx     FAC+3
0013CDr 2  A6 C5                ldx     FACEXTENSION
0013CFr 2  86 BA                stx     FAC+4
0013D1r 2               .endif
0013D1r 2  84 C5                sty     FACEXTENSION
0013D3r 2  69 08                adc     #$08
0013D5r 2               .ifdef CONFIG_2B
0013D5r 2               ; bugfix?
0013D5r 2               ; fix does not exist on AppleSoft 2
0013D5r 2                       cmp     #(MANTISSA_BYTES+1)*8
0013D5r 2               .else
0013D5r 2  C9 20                cmp     #MANTISSA_BYTES*8
0013D7r 2               .endif
0013D7r 2  D0 E4                bne     L36C7
0013D9r 2               
0013D9r 2               ; ----------------------------------------------------------------------------
0013D9r 2               ; SET FAC = 0
0013D9r 2               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
0013D9r 2               ; ----------------------------------------------------------------------------
0013D9r 2               ZERO_FAC:
0013D9r 2  A9 00                lda     #$00
0013DBr 2               STA_IN_FAC_SIGN_AND_EXP:
0013DBr 2  85 B6                sta     FAC
0013DDr 2               STA_IN_FAC_SIGN:
0013DDr 2  85 BB                sta     FACSIGN
0013DFr 2  60                   rts
0013E0r 2               
0013E0r 2               ; ----------------------------------------------------------------------------
0013E0r 2               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
0013E0r 2               ; ----------------------------------------------------------------------------
0013E0r 2               FADD4:
0013E0r 2  65 AB                adc     ARGEXTENSION
0013E2r 2  85 C5                sta     FACEXTENSION
0013E4r 2               .ifndef CONFIG_SMALL
0013E4r 2  A5 BA                lda     FAC+4
0013E6r 2  65 C2                adc     ARG+4
0013E8r 2  85 BA                sta     FAC+4
0013EAr 2               .endif
0013EAr 2  A5 B9                lda     FAC+3
0013ECr 2  65 C1                adc     ARG+3
0013EEr 2  85 B9                sta     FAC+3
0013F0r 2  A5 B8                lda     FAC+2
0013F2r 2  65 C0                adc     ARG+2
0013F4r 2  85 B8                sta     FAC+2
0013F6r 2  A5 B7                lda     FAC+1
0013F8r 2  65 BF                adc     ARG+1
0013FAr 2  85 B7                sta     FAC+1
0013FCr 2  4C rr rr             jmp     NORMALIZE_FAC5
0013FFr 2               
0013FFr 2               ; ----------------------------------------------------------------------------
0013FFr 2               ; FINISH NORMALIZING FAC
0013FFr 2               ; ----------------------------------------------------------------------------
0013FFr 2               NORMALIZE_FAC3:
0013FFr 2  69 01                adc     #$01
001401r 2  06 C5                asl     FACEXTENSION
001403r 2               .ifndef CONFIG_SMALL
001403r 2  26 BA                rol     FAC+4
001405r 2               .endif
001405r 2  26 B9                rol     FAC+3
001407r 2  26 B8                rol     FAC+2
001409r 2  26 B7                rol     FAC+1
00140Br 2               NORMALIZE_FAC4:
00140Br 2  10 F2                bpl     NORMALIZE_FAC3
00140Dr 2  38                   sec
00140Er 2  E5 B6                sbc     FAC
001410r 2  B0 C7                bcs     ZERO_FAC
001412r 2  49 FF                eor     #$FF
001414r 2  69 01                adc     #$01
001416r 2  85 B6                sta     FAC
001418r 2               NORMALIZE_FAC5:
001418r 2  90 0E                bcc     L3764
00141Ar 2               NORMALIZE_FAC6:
00141Ar 2  E6 B6                inc     FAC
00141Cr 2  F0 42                beq     OVERFLOW
00141Er 2               .ifndef CONFIG_ROR_WORKAROUND
00141Er 2  66 B7                ror     FAC+1
001420r 2  66 B8                ror     FAC+2
001422r 2  66 B9                ror     FAC+3
001424r 2                 .ifndef CONFIG_SMALL
001424r 2  66 BA                ror     FAC+4
001426r 2                 .endif
001426r 2  66 C5                ror     FACEXTENSION
001428r 2               .else
001428r 2                       lda     #$00
001428r 2                       bcc     L372E
001428r 2                       lda     #$80
001428r 2               L372E:
001428r 2                       lsr     FAC+1
001428r 2                       ora     FAC+1
001428r 2                       sta     FAC+1
001428r 2                       lda     #$00
001428r 2                       bcc     L373A
001428r 2                       lda     #$80
001428r 2               L373A:
001428r 2                       lsr     FAC+2
001428r 2                       ora     FAC+2
001428r 2                       sta     FAC+2
001428r 2                       lda     #$00
001428r 2                       bcc     L3746
001428r 2                       lda     #$80
001428r 2               L3746:
001428r 2                       lsr     FAC+3
001428r 2                       ora     FAC+3
001428r 2                       sta     FAC+3
001428r 2                       lda     #$00
001428r 2                       bcc     L3752
001428r 2                       lda     #$80
001428r 2               L3752:
001428r 2                       lsr     FAC+4
001428r 2                       ora     FAC+4
001428r 2                       sta     FAC+4
001428r 2                       lda     #$00
001428r 2                       bcc     L375E
001428r 2                       lda     #$80
001428r 2               L375E:
001428r 2                       lsr     FACEXTENSION
001428r 2                       ora     FACEXTENSION
001428r 2                       sta     FACEXTENSION
001428r 2               .endif
001428r 2               L3764:
001428r 2  60                   rts
001429r 2               
001429r 2               ; ----------------------------------------------------------------------------
001429r 2               ; 2'S COMPLEMENT OF FAC
001429r 2               ; ----------------------------------------------------------------------------
001429r 2               COMPLEMENT_FAC:
001429r 2  A5 BB                lda     FACSIGN
00142Br 2  49 FF                eor     #$FF
00142Dr 2  85 BB                sta     FACSIGN
00142Fr 2               
00142Fr 2               ; ----------------------------------------------------------------------------
00142Fr 2               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
00142Fr 2               ; ----------------------------------------------------------------------------
00142Fr 2               COMPLEMENT_FAC_MANTISSA:
00142Fr 2  A5 B7                lda     FAC+1
001431r 2  49 FF                eor     #$FF
001433r 2  85 B7                sta     FAC+1
001435r 2  A5 B8                lda     FAC+2
001437r 2  49 FF                eor     #$FF
001439r 2  85 B8                sta     FAC+2
00143Br 2  A5 B9                lda     FAC+3
00143Dr 2  49 FF                eor     #$FF
00143Fr 2  85 B9                sta     FAC+3
001441r 2               .ifndef CONFIG_SMALL
001441r 2  A5 BA                lda     FAC+4
001443r 2  49 FF                eor     #$FF
001445r 2  85 BA                sta     FAC+4
001447r 2               .endif
001447r 2  A5 C5                lda     FACEXTENSION
001449r 2  49 FF                eor     #$FF
00144Br 2  85 C5                sta     FACEXTENSION
00144Dr 2  E6 C5                inc     FACEXTENSION
00144Fr 2  D0 0E                bne     RTS12
001451r 2               
001451r 2               ; ----------------------------------------------------------------------------
001451r 2               ; INCREMENT FAC MANTISSA
001451r 2               ; ----------------------------------------------------------------------------
001451r 2               INCREMENT_FAC_MANTISSA:
001451r 2               .ifndef CONFIG_SMALL
001451r 2  E6 BA                inc     FAC+4
001453r 2  D0 0A                bne     RTS12
001455r 2               .endif
001455r 2  E6 B9                inc     FAC+3
001457r 2  D0 06                bne     RTS12
001459r 2  E6 B8                inc     FAC+2
00145Br 2  D0 02                bne     RTS12
00145Dr 2  E6 B7                inc     FAC+1
00145Fr 2               RTS12:
00145Fr 2  60                   rts
001460r 2               OVERFLOW:
001460r 2  A2 45                ldx     #ERR_OVERFLOW
001462r 2  4C rr rr             jmp     ERROR
001465r 2               
001465r 2               ; ----------------------------------------------------------------------------
001465r 2               ; SHIFT 1,X THRU 5,X RIGHT
001465r 2               ; (A) = NEGATIVE OF SHIFT COUNT
001465r 2               ; (X) = POINTER TO BYTES TO BE SHIFTED
001465r 2               ;
001465r 2               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
001465r 2               ; ----------------------------------------------------------------------------
001465r 2               SHIFT_RIGHT1:
001465r 2  A2 7A                ldx     #RESULT-1
001467r 2               SHIFT_RIGHT2:
001467r 2               .ifdef CONFIG_SMALL
001467r 2                       ldy     3,x
001467r 2               .else
001467r 2  B4 04                ldy     4,x
001469r 2               .endif
001469r 2  84 C5                sty     FACEXTENSION
00146Br 2               .ifndef CONFIG_SMALL
00146Br 2  B4 03                ldy     3,x
00146Dr 2  94 04                sty     4,x
00146Fr 2               .endif
00146Fr 2  B4 02                ldy     2,x
001471r 2  94 03                sty     3,x
001473r 2  B4 01                ldy     1,x
001475r 2  94 02                sty     2,x
001477r 2  A4 BD                ldy     SHIFTSIGNEXT
001479r 2  94 01                sty     1,x
00147Br 2               
00147Br 2               ; ----------------------------------------------------------------------------
00147Br 2               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
00147Br 2               ; ----------------------------------------------------------------------------
00147Br 2               SHIFT_RIGHT:
00147Br 2  69 08                adc     #$08
00147Dr 2  30 E8                bmi     SHIFT_RIGHT2
00147Fr 2  F0 E6                beq     SHIFT_RIGHT2
001481r 2  E9 08                sbc     #$08
001483r 2  A8                   tay
001484r 2  A5 C5                lda     FACEXTENSION
001486r 2  B0 14                bcs     SHIFT_RIGHT5
001488r 2               .ifndef CONFIG_ROR_WORKAROUND
001488r 2               LB588:
001488r 2  16 01                asl     1,x
00148Ar 2  90 02                bcc     LB58E
00148Cr 2  F6 01                inc     1,x
00148Er 2               LB58E:
00148Er 2  76 01                ror     1,x
001490r 2  76 01                ror     1,x
001492r 2               
001492r 2               ; ----------------------------------------------------------------------------
001492r 2               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
001492r 2               ; ----------------------------------------------------------------------------
001492r 2               SHIFT_RIGHT4:
001492r 2  76 02                ror     2,x
001494r 2  76 03                ror     3,x
001496r 2                 .ifndef CONFIG_SMALL
001496r 2  76 04                ror     4,x
001498r 2                 .endif
001498r 2  6A                   ror     a
001499r 2  C8                   iny
00149Ar 2  D0 EC                bne     LB588
00149Cr 2               .else
00149Cr 2               L37C4:
00149Cr 2                       pha
00149Cr 2                       lda     1,x
00149Cr 2                       and     #$80
00149Cr 2                       lsr     1,x
00149Cr 2                       ora     1,x
00149Cr 2                       sta     1,x
00149Cr 2                       .byte   $24
00149Cr 2               SHIFT_RIGHT4:
00149Cr 2                       pha
00149Cr 2                       lda     #$00
00149Cr 2                       bcc     L37D7
00149Cr 2                       lda     #$80
00149Cr 2               L37D7:
00149Cr 2                       lsr     2,x
00149Cr 2                       ora     2,x
00149Cr 2                       sta     2,x
00149Cr 2                       lda     #$00
00149Cr 2                       bcc     L37E3
00149Cr 2                       lda     #$80
00149Cr 2               L37E3:
00149Cr 2                       lsr     3,x
00149Cr 2                       ora     3,x
00149Cr 2                       sta     3,x
00149Cr 2                       lda     #$00
00149Cr 2                       bcc     L37EF
00149Cr 2                       lda     #$80
00149Cr 2               L37EF:
00149Cr 2                       lsr     4,x
00149Cr 2                       ora     4,x
00149Cr 2                       sta     4,x
00149Cr 2                       pla
00149Cr 2                       php
00149Cr 2                       lsr     a
00149Cr 2                       plp
00149Cr 2                       bcc     L37FD
00149Cr 2                       ora     #$80
00149Cr 2               L37FD:
00149Cr 2                       iny
00149Cr 2                       bne     L37C4
00149Cr 2               .endif
00149Cr 2               SHIFT_RIGHT5:
00149Cr 2  18                   clc
00149Dr 2  60                   rts
00149Er 2               
00149Er 2               ; ----------------------------------------------------------------------------
00149Er 2               .ifdef CONFIG_SMALL
00149Er 2               CON_ONE:
00149Er 2                       .byte   $81,$00,$00,$00
00149Er 2               POLY_LOG:
00149Er 2               		.byte	$02
00149Er 2               		.byte   $80,$19,$56,$62
00149Er 2               		.byte   $80,$76,$22,$F3
00149Er 2               		.byte   $82,$38,$AA,$40
00149Er 2               CON_SQR_HALF:
00149Er 2               		.byte   $80,$35,$04,$F3
00149Er 2               CON_SQR_TWO:
00149Er 2               		.byte   $81,$35,$04,$F3
00149Er 2               CON_NEG_HALF:
00149Er 2               		.byte   $80,$80,$00,$00
00149Er 2               CON_LOG_TWO:
00149Er 2               		.byte   $80,$31,$72,$18
00149Er 2               .else
00149Er 2               CON_ONE:
00149Er 2  81 00 00 00          .byte   $81,$00,$00,$00,$00
0014A2r 2  00           
0014A3r 2               POLY_LOG:
0014A3r 2  03                   .byte   $03
0014A4r 2  7F 5E 56 CB  		.byte   $7F,$5E,$56,$CB,$79
0014A8r 2  79           
0014A9r 2  80 13 9B 0B  		.byte   $80,$13,$9B,$0B,$64
0014ADr 2  64           
0014AEr 2  80 76 38 93  		.byte   $80,$76,$38,$93,$16
0014B2r 2  16           
0014B3r 2  82 38 AA 3B          .byte   $82,$38,$AA,$3B,$20
0014B7r 2  20           
0014B8r 2               CON_SQR_HALF:
0014B8r 2  80 35 04 F3          .byte   $80,$35,$04,$F3,$34
0014BCr 2  34           
0014BDr 2               CON_SQR_TWO:
0014BDr 2  81 35 04 F3          .byte   $81,$35,$04,$F3,$34
0014C1r 2  34           
0014C2r 2               CON_NEG_HALF:
0014C2r 2  80 80 00 00          .byte   $80,$80,$00,$00,$00
0014C6r 2  00           
0014C7r 2               CON_LOG_TWO:
0014C7r 2  80 31 72 17          .byte   $80,$31,$72,$17,$F8
0014CBr 2  F8           
0014CCr 2               .endif
0014CCr 2               
0014CCr 2               ; ----------------------------------------------------------------------------
0014CCr 2               ; "LOG" FUNCTION
0014CCr 2               ; ----------------------------------------------------------------------------
0014CCr 2               LOG:
0014CCr 2  20 rr rr             jsr     SIGN
0014CFr 2  F0 02                beq     GIQ
0014D1r 2  10 03                bpl     LOG2
0014D3r 2               GIQ:
0014D3r 2  4C rr rr             jmp     IQERR
0014D6r 2               LOG2:
0014D6r 2  A5 B6                lda     FAC
0014D8r 2  E9 7F                sbc     #$7F
0014DAr 2  48                   pha
0014DBr 2  A9 80                lda     #$80
0014DDr 2  85 B6                sta     FAC
0014DFr 2  A9 rr                lda     #<CON_SQR_HALF
0014E1r 2  A0 rr                ldy     #>CON_SQR_HALF
0014E3r 2  20 rr rr             jsr     FADD
0014E6r 2  A9 rr                lda     #<CON_SQR_TWO
0014E8r 2  A0 rr                ldy     #>CON_SQR_TWO
0014EAr 2  20 rr rr             jsr     FDIV
0014EDr 2  A9 rr                lda     #<CON_ONE
0014EFr 2  A0 rr                ldy     #>CON_ONE
0014F1r 2  20 rr rr             jsr     FSUB
0014F4r 2  A9 rr                lda     #<POLY_LOG
0014F6r 2  A0 rr                ldy     #>POLY_LOG
0014F8r 2  20 rr rr             jsr     POLYNOMIAL_ODD
0014FBr 2  A9 rr                lda     #<CON_NEG_HALF
0014FDr 2  A0 rr                ldy     #>CON_NEG_HALF
0014FFr 2  20 rr rr             jsr     FADD
001502r 2  68                   pla
001503r 2  20 rr rr             jsr     ADDACC
001506r 2  A9 rr                lda     #<CON_LOG_TWO
001508r 2  A0 rr                ldy     #>CON_LOG_TWO
00150Ar 2               
00150Ar 2               ; ----------------------------------------------------------------------------
00150Ar 2               ; FAC = (Y,A) * FAC
00150Ar 2               ; ----------------------------------------------------------------------------
00150Ar 2               FMULT:
00150Ar 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
00150Dr 2               
00150Dr 2               ; ----------------------------------------------------------------------------
00150Dr 2               ; FAC = ARG * FAC
00150Dr 2               ; ----------------------------------------------------------------------------
00150Dr 2               FMULTT:
00150Dr 2               .ifndef CONFIG_11
00150Dr 2                       beq     L3903
00150Dr 2               .else
00150Dr 2  D0 03 4C rr          jeq     L3903
001511r 2  rr           
001512r 2               .endif
001512r 2  20 rr rr             jsr     ADD_EXPONENTS
001515r 2  A9 00                lda     #$00
001517r 2  85 7B                sta     RESULT
001519r 2  85 7C                sta     RESULT+1
00151Br 2  85 7D                sta     RESULT+2
00151Dr 2               .ifndef CONFIG_SMALL
00151Dr 2  85 7E                sta     RESULT+3
00151Fr 2               .endif
00151Fr 2  A5 C5                lda     FACEXTENSION
001521r 2  20 rr rr             jsr     MULTIPLY1
001524r 2               .ifndef CONFIG_SMALL
001524r 2  A5 BA                lda     FAC+4
001526r 2  20 rr rr             jsr     MULTIPLY1
001529r 2               .endif
001529r 2  A5 B9                lda     FAC+3
00152Br 2  20 rr rr             jsr     MULTIPLY1
00152Er 2  A5 B8                lda     FAC+2
001530r 2  20 rr rr             jsr     MULTIPLY1
001533r 2  A5 B7                lda     FAC+1
001535r 2  20 rr rr             jsr     MULTIPLY2
001538r 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
00153Br 2               
00153Br 2               ; ----------------------------------------------------------------------------
00153Br 2               ; MULTIPLY ARG BY (A) INTO RESULT
00153Br 2               ; ----------------------------------------------------------------------------
00153Br 2               MULTIPLY1:
00153Br 2  D0 03                bne     MULTIPLY2
00153Dr 2  4C rr rr             jmp     SHIFT_RIGHT1
001540r 2               MULTIPLY2:
001540r 2  4A                   lsr     a
001541r 2  09 80                ora     #$80
001543r 2               L38A7:
001543r 2  A8                   tay
001544r 2  90 19                bcc     L38C3
001546r 2  18                   clc
001547r 2               .ifndef CONFIG_SMALL
001547r 2  A5 7E                lda     RESULT+3
001549r 2  65 C2                adc     ARG+4
00154Br 2  85 7E                sta     RESULT+3
00154Dr 2               .endif
00154Dr 2  A5 7D                lda     RESULT+2
00154Fr 2  65 C1                adc     ARG+3
001551r 2  85 7D                sta     RESULT+2
001553r 2  A5 7C                lda     RESULT+1
001555r 2  65 C0                adc     ARG+2
001557r 2  85 7C                sta     RESULT+1
001559r 2  A5 7B                lda     RESULT
00155Br 2  65 BF                adc     ARG+1
00155Dr 2  85 7B                sta     RESULT
00155Fr 2               L38C3:
00155Fr 2               .ifndef CONFIG_ROR_WORKAROUND
00155Fr 2  66 7B                ror     RESULT
001561r 2  66 7C                ror     RESULT+1
001563r 2               .ifdef APPLE_BAD_BYTE
001563r 2               ; this seems to be a bad byte in the dump
001563r 2               		.byte	RESULT+2,RESULT+2 ; XXX BUG!
001563r 2               .else
001563r 2  66 7D                ror     RESULT+2
001565r 2               .endif
001565r 2               .ifndef CONFIG_SMALL
001565r 2  66 7E                ror     RESULT+3
001567r 2               .endif
001567r 2  66 C5                ror     FACEXTENSION
001569r 2               .else
001569r 2                       lda     #$00
001569r 2                       bcc     L38C9
001569r 2                       lda     #$80
001569r 2               L38C9:
001569r 2                       lsr     RESULT
001569r 2                       ora     RESULT
001569r 2                       sta     RESULT
001569r 2                       lda     #$00
001569r 2                       bcc     L38D5
001569r 2                       lda     #$80
001569r 2               L38D5:
001569r 2                       lsr     RESULT+1
001569r 2                       ora     RESULT+1
001569r 2                       sta     RESULT+1
001569r 2                       lda     #$00
001569r 2                       bcc     L38E1
001569r 2                       lda     #$80
001569r 2               L38E1:
001569r 2                       lsr     RESULT+2
001569r 2                       ora     RESULT+2
001569r 2                       sta     RESULT+2
001569r 2                       lda     #$00
001569r 2                       bcc     L38ED
001569r 2                       lda     #$80
001569r 2               L38ED:
001569r 2                       lsr     RESULT+3
001569r 2                       ora     RESULT+3
001569r 2                       sta     RESULT+3
001569r 2                       lda     #$00
001569r 2                       bcc     L38F9
001569r 2                       lda     #$80
001569r 2               L38F9:
001569r 2                       lsr     FACEXTENSION
001569r 2                       ora     FACEXTENSION
001569r 2                       sta     FACEXTENSION
001569r 2               .endif
001569r 2  98                   tya
00156Ar 2  4A                   lsr     a
00156Br 2  D0 D6                bne     L38A7
00156Dr 2               L3903:
00156Dr 2  60                   rts
00156Er 2               
00156Er 2               ; ----------------------------------------------------------------------------
00156Er 2               ; UNPACK NUMBER AT (Y,A) INTO ARG
00156Er 2               ; ----------------------------------------------------------------------------
00156Er 2               LOAD_ARG_FROM_YA:
00156Er 2  85 77                sta     INDEX
001570r 2  84 78                sty     INDEX+1
001572r 2  A0 04                ldy     #BYTES_FP-1
001574r 2               .ifndef CONFIG_SMALL
001574r 2  B1 77                lda     (INDEX),y
001576r 2  85 C2                sta     ARG+4
001578r 2  88                   dey
001579r 2               .endif
001579r 2  B1 77                lda     (INDEX),y
00157Br 2  85 C1                sta     ARG+3
00157Dr 2  88                   dey
00157Er 2  B1 77                lda     (INDEX),y
001580r 2  85 C0                sta     ARG+2
001582r 2  88                   dey
001583r 2  B1 77                lda     (INDEX),y
001585r 2  85 C3                sta     ARGSIGN
001587r 2  45 BB                eor     FACSIGN
001589r 2  85 C4                sta     SGNCPR
00158Br 2  A5 C3                lda     ARGSIGN
00158Dr 2  09 80                ora     #$80
00158Fr 2  85 BF                sta     ARG+1
001591r 2  88                   dey
001592r 2  B1 77                lda     (INDEX),y
001594r 2  85 BE                sta     ARG
001596r 2  A5 B6                lda     FAC
001598r 2  60                   rts
001599r 2               
001599r 2               ; ----------------------------------------------------------------------------
001599r 2               ; ADD EXPONENTS OF ARG AND FAC
001599r 2               ; (CALLED BY FMULT AND FDIV)
001599r 2               ;
001599r 2               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
001599r 2               ; ----------------------------------------------------------------------------
001599r 2               ADD_EXPONENTS:
001599r 2  A5 BE                lda     ARG
00159Br 2               ADD_EXPONENTS1:
00159Br 2  F0 1F                beq     ZERO
00159Dr 2  18                   clc
00159Er 2  65 B6                adc     FAC
0015A0r 2  90 04                bcc     L393C
0015A2r 2  30 1D                bmi     JOV
0015A4r 2  18                   clc
0015A5r 2  2C                   .byte   $2C
0015A6r 2               L393C:
0015A6r 2  10 14                bpl     ZERO
0015A8r 2  69 80                adc     #$80
0015AAr 2  85 B6                sta     FAC
0015ACr 2  D0 03                bne     L3947
0015AEr 2  4C rr rr             jmp     STA_IN_FAC_SIGN
0015B1r 2               L3947:
0015B1r 2  A5 C4                lda     SGNCPR
0015B3r 2  85 BB                sta     FACSIGN
0015B5r 2  60                   rts
0015B6r 2               
0015B6r 2               ; ----------------------------------------------------------------------------
0015B6r 2               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
0015B6r 2               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
0015B6r 2               ; CALLED FROM "EXP" FUNCTION
0015B6r 2               ; ----------------------------------------------------------------------------
0015B6r 2               OUTOFRNG:
0015B6r 2  A5 BB                lda     FACSIGN
0015B8r 2  49 FF                eor     #$FF
0015BAr 2  30 05                bmi     JOV
0015BCr 2               
0015BCr 2               ; ----------------------------------------------------------------------------
0015BCr 2               ; POP RETURN ADDRESS AND SET FAC=0
0015BCr 2               ; ----------------------------------------------------------------------------
0015BCr 2               ZERO:
0015BCr 2  68                   pla
0015BDr 2  68                   pla
0015BEr 2  4C rr rr             jmp     ZERO_FAC
0015C1r 2               JOV:
0015C1r 2  4C rr rr             jmp     OVERFLOW
0015C4r 2               
0015C4r 2               ; ----------------------------------------------------------------------------
0015C4r 2               ; MULTIPLY FAC BY 10
0015C4r 2               ; ----------------------------------------------------------------------------
0015C4r 2               MUL10:
0015C4r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
0015C7r 2  AA                   tax
0015C8r 2  F0 10                beq     L3970
0015CAr 2  18                   clc
0015CBr 2  69 02                adc     #$02
0015CDr 2  B0 F2                bcs     JOV
0015CFr 2               LD9BF:
0015CFr 2  A2 00                ldx     #$00
0015D1r 2  86 C4                stx     SGNCPR
0015D3r 2  20 rr rr             jsr     FADD2
0015D6r 2  E6 B6                inc     FAC
0015D8r 2  F0 E7                beq     JOV
0015DAr 2               L3970:
0015DAr 2  60                   rts
0015DBr 2               
0015DBr 2               ; ----------------------------------------------------------------------------
0015DBr 2               CONTEN:
0015DBr 2               .ifdef CONFIG_SMALL
0015DBr 2                       .byte   $84,$20,$00,$00
0015DBr 2               .else
0015DBr 2  84 20 00 00          .byte   $84,$20,$00,$00,$00
0015DFr 2  00           
0015E0r 2               .endif
0015E0r 2               
0015E0r 2               ; ----------------------------------------------------------------------------
0015E0r 2               ; DIVIDE FAC BY 10
0015E0r 2               ; ----------------------------------------------------------------------------
0015E0r 2               DIV10:
0015E0r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
0015E3r 2  A9 rr                lda     #<CONTEN
0015E5r 2  A0 rr                ldy     #>CONTEN
0015E7r 2  A2 00                ldx     #$00
0015E9r 2               
0015E9r 2               ; ----------------------------------------------------------------------------
0015E9r 2               ; FAC = ARG / (Y,A)
0015E9r 2               ; ----------------------------------------------------------------------------
0015E9r 2               DIV:
0015E9r 2  86 C4                stx     SGNCPR
0015EBr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0015EEr 2  4C rr rr             jmp     FDIVT
0015F1r 2               
0015F1r 2               ; ----------------------------------------------------------------------------
0015F1r 2               ; FAC = (Y,A) / FAC
0015F1r 2               ; ----------------------------------------------------------------------------
0015F1r 2               FDIV:
0015F1r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0015F4r 2               
0015F4r 2               ; ----------------------------------------------------------------------------
0015F4r 2               ; FAC = ARG / FAC
0015F4r 2               ; ----------------------------------------------------------------------------
0015F4r 2               FDIVT:
0015F4r 2  F0 76                beq     L3A02
0015F6r 2  20 rr rr             jsr     ROUND_FAC
0015F9r 2  A9 00                lda     #$00
0015FBr 2  38                   sec
0015FCr 2  E5 B6                sbc     FAC
0015FEr 2  85 B6                sta     FAC
001600r 2  20 rr rr             jsr     ADD_EXPONENTS
001603r 2  E6 B6                inc     FAC
001605r 2  F0 BA                beq     JOV
001607r 2  A2 FC                ldx     #-MANTISSA_BYTES
001609r 2  A9 01                lda     #$01
00160Br 2               L39A1:
00160Br 2  A4 BF                ldy     ARG+1
00160Dr 2  C4 B7                cpy     FAC+1
00160Fr 2  D0 10                bne     L39B7
001611r 2  A4 C0                ldy     ARG+2
001613r 2  C4 B8                cpy     FAC+2
001615r 2  D0 0A                bne     L39B7
001617r 2  A4 C1                ldy     ARG+3
001619r 2  C4 B9                cpy     FAC+3
00161Br 2               .ifndef CONFIG_SMALL
00161Br 2  D0 04                bne     L39B7
00161Dr 2  A4 C2                ldy     ARG+4
00161Fr 2  C4 BA                cpy     FAC+4
001621r 2               .endif
001621r 2               L39B7:
001621r 2  08                   php
001622r 2  2A                   rol     a
001623r 2  90 09                bcc     L39C4
001625r 2  E8                   inx
001626r 2  95 7E                sta     RESULT_LAST-1,x
001628r 2  F0 32                beq     L39F2
00162Ar 2  10 34                bpl     L39F6
00162Cr 2  A9 01                lda     #$01
00162Er 2               L39C4:
00162Er 2  28                   plp
00162Fr 2  B0 0E                bcs     L39D5
001631r 2               L39C7:
001631r 2  06 C2                asl     ARG_LAST
001633r 2               .ifndef CONFIG_SMALL
001633r 2  26 C1                rol     ARG+3
001635r 2               .endif
001635r 2  26 C0                rol     ARG+2
001637r 2  26 BF                rol     ARG+1
001639r 2  B0 E6                bcs     L39B7
00163Br 2  30 CE                bmi     L39A1
00163Dr 2  10 E2                bpl     L39B7
00163Fr 2               L39D5:
00163Fr 2  A8                   tay
001640r 2               .ifndef CONFIG_SMALL
001640r 2  A5 C2                lda     ARG+4
001642r 2  E5 BA                sbc     FAC+4
001644r 2  85 C2                sta     ARG+4
001646r 2               .endif
001646r 2  A5 C1                lda     ARG+3
001648r 2  E5 B9                sbc     FAC+3
00164Ar 2  85 C1                sta     ARG+3
00164Cr 2  A5 C0                lda     ARG+2
00164Er 2  E5 B8                sbc     FAC+2
001650r 2  85 C0                sta     ARG+2
001652r 2  A5 BF                lda     ARG+1
001654r 2  E5 B7                sbc     FAC+1
001656r 2  85 BF                sta     ARG+1
001658r 2  98                   tya
001659r 2  4C rr rr             jmp     L39C7
00165Cr 2               L39F2:
00165Cr 2  A9 40                lda     #$40
00165Er 2  D0 CE                bne     L39C4
001660r 2               L39F6:
001660r 2  0A                   asl     a
001661r 2  0A                   asl     a
001662r 2  0A                   asl     a
001663r 2  0A                   asl     a
001664r 2  0A                   asl     a
001665r 2  0A                   asl     a
001666r 2  85 C5                sta     FACEXTENSION
001668r 2  28                   plp
001669r 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
00166Cr 2               L3A02:
00166Cr 2  A2 85                ldx     #ERR_ZERODIV
00166Er 2  4C rr rr             jmp     ERROR
001671r 2               
001671r 2               ; ----------------------------------------------------------------------------
001671r 2               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
001671r 2               ; ----------------------------------------------------------------------------
001671r 2               COPY_RESULT_INTO_FAC:
001671r 2  A5 7B                lda     RESULT
001673r 2  85 B7                sta     FAC+1
001675r 2  A5 7C                lda     RESULT+1
001677r 2  85 B8                sta     FAC+2
001679r 2  A5 7D                lda     RESULT+2
00167Br 2  85 B9                sta     FAC+3
00167Dr 2               .ifndef CONFIG_SMALL
00167Dr 2  A5 7E                lda     RESULT+3
00167Fr 2  85 BA                sta     FAC+4
001681r 2               .endif
001681r 2  4C rr rr             jmp     NORMALIZE_FAC2
001684r 2               
001684r 2               ; ----------------------------------------------------------------------------
001684r 2               ; UNPACK (Y,A) INTO FAC
001684r 2               ; ----------------------------------------------------------------------------
001684r 2               LOAD_FAC_FROM_YA:
001684r 2  85 77                sta     INDEX
001686r 2  84 78                sty     INDEX+1
001688r 2  A0 04                ldy     #MANTISSA_BYTES
00168Ar 2               .ifndef CONFIG_SMALL
00168Ar 2  B1 77                lda     (INDEX),y
00168Cr 2  85 BA                sta     FAC+4
00168Er 2  88                   dey
00168Fr 2               .endif
00168Fr 2  B1 77                lda     (INDEX),y
001691r 2  85 B9                sta     FAC+3
001693r 2  88                   dey
001694r 2  B1 77                lda     (INDEX),y
001696r 2  85 B8                sta     FAC+2
001698r 2  88                   dey
001699r 2  B1 77                lda     (INDEX),y
00169Br 2  85 BB                sta     FACSIGN
00169Dr 2  09 80                ora     #$80
00169Fr 2  85 B7                sta     FAC+1
0016A1r 2  88                   dey
0016A2r 2  B1 77                lda     (INDEX),y
0016A4r 2  85 B6                sta     FAC
0016A6r 2  84 C5                sty     FACEXTENSION
0016A8r 2  60                   rts
0016A9r 2               
0016A9r 2               ; ----------------------------------------------------------------------------
0016A9r 2               ; ROUND FAC, STORE IN TEMP2
0016A9r 2               ; ----------------------------------------------------------------------------
0016A9r 2               STORE_FAC_IN_TEMP2_ROUNDED:
0016A9r 2  A2 B1                ldx     #TEMP2
0016ABr 2  2C                   .byte   $2C
0016ACr 2               
0016ACr 2               ; ----------------------------------------------------------------------------
0016ACr 2               ; ROUND FAC, STORE IN TEMP1
0016ACr 2               ; ----------------------------------------------------------------------------
0016ACr 2               STORE_FAC_IN_TEMP1_ROUNDED:
0016ACr 2  A2 AC                ldx     #TEMP1X
0016AEr 2  A0 00                ldy     #$00
0016B0r 2  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
0016B2r 2               
0016B2r 2               ; ----------------------------------------------------------------------------
0016B2r 2               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
0016B2r 2               ; ----------------------------------------------------------------------------
0016B2r 2               SETFOR:
0016B2r 2  A6 9E                ldx     FORPNT
0016B4r 2  A4 9F                ldy     FORPNT+1
0016B6r 2               
0016B6r 2               ; ----------------------------------------------------------------------------
0016B6r 2               ; ROUND FAC, AND STORE AT (Y,X)
0016B6r 2               ; ----------------------------------------------------------------------------
0016B6r 2               STORE_FAC_AT_YX_ROUNDED:
0016B6r 2  20 rr rr             jsr     ROUND_FAC
0016B9r 2  86 77                stx     INDEX
0016BBr 2  84 78                sty     INDEX+1
0016BDr 2  A0 04                ldy     #MANTISSA_BYTES
0016BFr 2               .ifndef CONFIG_SMALL
0016BFr 2  A5 BA                lda     FAC+4
0016C1r 2  91 77                sta     (INDEX),y
0016C3r 2  88                   dey
0016C4r 2               .endif
0016C4r 2  A5 B9                lda     FAC+3
0016C6r 2  91 77                sta     (INDEX),y
0016C8r 2  88                   dey
0016C9r 2  A5 B8                lda     FAC+2
0016CBr 2  91 77                sta     (INDEX),y
0016CDr 2  88                   dey
0016CEr 2  A5 BB                lda     FACSIGN
0016D0r 2  09 7F                ora     #$7F
0016D2r 2  25 B7                and     FAC+1
0016D4r 2  91 77                sta     (INDEX),y
0016D6r 2  88                   dey
0016D7r 2  A5 B6                lda     FAC
0016D9r 2  91 77                sta     (INDEX),y
0016DBr 2  84 C5                sty     FACEXTENSION
0016DDr 2  60                   rts
0016DEr 2               
0016DEr 2               ; ----------------------------------------------------------------------------
0016DEr 2               ; COPY ARG INTO FAC
0016DEr 2               ; ----------------------------------------------------------------------------
0016DEr 2               COPY_ARG_TO_FAC:
0016DEr 2  A5 C3                lda     ARGSIGN
0016E0r 2               MFA:
0016E0r 2  85 BB                sta     FACSIGN
0016E2r 2  A2 05                ldx     #BYTES_FP
0016E4r 2               L3A7A:
0016E4r 2  B5 BD                lda     SHIFTSIGNEXT,x
0016E6r 2  95 B5                sta     EXPSGN,x
0016E8r 2  CA                   dex
0016E9r 2  D0 F9                bne     L3A7A
0016EBr 2  86 C5                stx     FACEXTENSION
0016EDr 2  60                   rts
0016EEr 2               
0016EEr 2               ; ----------------------------------------------------------------------------
0016EEr 2               ; ROUND FAC AND COPY TO ARG
0016EEr 2               ; ----------------------------------------------------------------------------
0016EEr 2               COPY_FAC_TO_ARG_ROUNDED:
0016EEr 2  20 rr rr             jsr     ROUND_FAC
0016F1r 2               MAF:
0016F1r 2  A2 06                ldx     #BYTES_FP+1
0016F3r 2               L3A89:
0016F3r 2  B5 B5                lda     EXPSGN,x
0016F5r 2  95 BD                sta     SHIFTSIGNEXT,x
0016F7r 2  CA                   dex
0016F8r 2  D0 F9                bne     L3A89
0016FAr 2  86 C5                stx     FACEXTENSION
0016FCr 2               RTS14:
0016FCr 2  60                   rts
0016FDr 2               
0016FDr 2               ; ----------------------------------------------------------------------------
0016FDr 2               ; ROUND FAC USING EXTENSION BYTE
0016FDr 2               ; ----------------------------------------------------------------------------
0016FDr 2               ROUND_FAC:
0016FDr 2  A5 B6                lda     FAC
0016FFr 2  F0 FB                beq     RTS14
001701r 2  06 C5                asl     FACEXTENSION
001703r 2  90 F7                bcc     RTS14
001705r 2               
001705r 2               ; ----------------------------------------------------------------------------
001705r 2               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
001705r 2               ; ----------------------------------------------------------------------------
001705r 2               INCREMENT_MANTISSA:
001705r 2  20 rr rr             jsr     INCREMENT_FAC_MANTISSA
001708r 2  D0 F2                bne     RTS14
00170Ar 2  4C rr rr             jmp     NORMALIZE_FAC6
00170Dr 2               
00170Dr 2               ; ----------------------------------------------------------------------------
00170Dr 2               ; TEST FAC FOR ZERO AND SIGN
00170Dr 2               ;
00170Dr 2               ; FAC > 0, RETURN +1
00170Dr 2               ; FAC = 0, RETURN  0
00170Dr 2               ; FAC < 0, RETURN -1
00170Dr 2               ; ----------------------------------------------------------------------------
00170Dr 2               SIGN:
00170Dr 2  A5 B6                lda     FAC
00170Fr 2  F0 09                beq     RTS15
001711r 2               L3AA7:
001711r 2  A5 BB                lda     FACSIGN
001713r 2               SIGN2:
001713r 2  2A                   rol     a
001714r 2  A9 FF                lda     #$FF
001716r 2  B0 02                bcs     RTS15
001718r 2  A9 01                lda     #$01
00171Ar 2               RTS15:
00171Ar 2  60                   rts
00171Br 2               
00171Br 2               ; ----------------------------------------------------------------------------
00171Br 2               ; "SGN" FUNCTION
00171Br 2               ; ----------------------------------------------------------------------------
00171Br 2               SGN:
00171Br 2  20 rr rr             jsr     SIGN
00171Er 2               
00171Er 2               ; ----------------------------------------------------------------------------
00171Er 2               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
00171Er 2               ; ----------------------------------------------------------------------------
00171Er 2               FLOAT:
00171Er 2  85 B7                sta     FAC+1
001720r 2  A9 00                lda     #$00
001722r 2  85 B8                sta     FAC+2
001724r 2  A2 88                ldx     #$88
001726r 2               
001726r 2               ; ----------------------------------------------------------------------------
001726r 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
001726r 2               ; (X) = EXPONENT
001726r 2               ; ----------------------------------------------------------------------------
001726r 2               FLOAT1:
001726r 2  A5 B7                lda     FAC+1
001728r 2  49 FF                eor     #$FF
00172Ar 2  2A                   rol     a
00172Br 2               
00172Br 2               ; ----------------------------------------------------------------------------
00172Br 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00172Br 2               ; (X) = EXPONENT
00172Br 2               ; C=0 TO MAKE VALUE NEGATIVE
00172Br 2               ; C=1 TO MAKE VALUE POSITIVE
00172Br 2               ; ----------------------------------------------------------------------------
00172Br 2               FLOAT2:
00172Br 2  A9 00                lda     #$00
00172Dr 2               .ifndef CONFIG_SMALL
00172Dr 2  85 BA                sta     FAC+4
00172Fr 2               .endif
00172Fr 2  85 B9                sta     FAC+3
001731r 2               LDB21:
001731r 2  86 B6                stx     FAC
001733r 2  85 C5                sta     FACEXTENSION
001735r 2  85 BB                sta     FACSIGN
001737r 2  4C rr rr             jmp     NORMALIZE_FAC1
00173Ar 2               
00173Ar 2               ; ----------------------------------------------------------------------------
00173Ar 2               ; "ABS" FUNCTION
00173Ar 2               ; ----------------------------------------------------------------------------
00173Ar 2               ABS:
00173Ar 2  46 BB                lsr     FACSIGN
00173Cr 2  60                   rts
00173Dr 2               
00173Dr 2               ; ----------------------------------------------------------------------------
00173Dr 2               ; COMPARE FAC WITH PACKED # AT (Y,A)
00173Dr 2               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
00173Dr 2               ; ----------------------------------------------------------------------------
00173Dr 2               FCOMP:
00173Dr 2  85 79                sta     DEST
00173Fr 2               
00173Fr 2               ; ----------------------------------------------------------------------------
00173Fr 2               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
00173Fr 2               ; "DEST" ALREADY SET UP
00173Fr 2               ; ----------------------------------------------------------------------------
00173Fr 2               FCOMP2:
00173Fr 2  84 7A                sty     DEST+1
001741r 2  A0 00                ldy     #$00
001743r 2  B1 79                lda     (DEST),y
001745r 2  C8                   iny
001746r 2  AA                   tax
001747r 2  F0 C4                beq     SIGN
001749r 2  B1 79                lda     (DEST),y
00174Br 2  45 BB                eor     FACSIGN
00174Dr 2  30 C2                bmi     L3AA7
00174Fr 2  E4 B6                cpx     FAC
001751r 2  D0 21                bne     L3B0A
001753r 2  B1 79                lda     (DEST),y
001755r 2  09 80                ora     #$80
001757r 2  C5 B7                cmp     FAC+1
001759r 2  D0 19                bne     L3B0A
00175Br 2  C8                   iny
00175Cr 2  B1 79                lda     (DEST),y
00175Er 2  C5 B8                cmp     FAC+2
001760r 2  D0 12                bne     L3B0A
001762r 2  C8                   iny
001763r 2               .ifndef CONFIG_SMALL
001763r 2  B1 79                lda     (DEST),y
001765r 2  C5 B9                cmp     FAC+3
001767r 2  D0 0B                bne     L3B0A
001769r 2  C8                   iny
00176Ar 2               .endif
00176Ar 2  A9 7F                lda     #$7F
00176Cr 2  C5 C5                cmp     FACEXTENSION
00176Er 2  B1 79                lda     (DEST),y
001770r 2  E5 BA                sbc     FAC_LAST
001772r 2  F0 28                beq     L3B32
001774r 2               L3B0A:
001774r 2  A5 BB                lda     FACSIGN
001776r 2  90 02                bcc     L3B10
001778r 2  49 FF                eor     #$FF
00177Ar 2               L3B10:
00177Ar 2  4C rr rr             jmp     SIGN2
00177Dr 2               
00177Dr 2               ; ----------------------------------------------------------------------------
00177Dr 2               ; QUICK INTEGER FUNCTION
00177Dr 2               ;
00177Dr 2               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
00177Dr 2               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
00177Dr 2               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
00177Dr 2               ;
00177Dr 2               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
00177Dr 2               ; ----------------------------------------------------------------------------
00177Dr 2               QINT:
00177Dr 2  A5 B6                lda     FAC
00177Fr 2  F0 4A                beq     QINT3
001781r 2  38                   sec
001782r 2  E9 A0                sbc     #120+8*BYTES_FP
001784r 2  24 BB                bit     FACSIGN
001786r 2  10 09                bpl     L3B27
001788r 2  AA                   tax
001789r 2  A9 FF                lda     #$FF
00178Br 2  85 BD                sta     SHIFTSIGNEXT
00178Dr 2  20 rr rr             jsr     COMPLEMENT_FAC_MANTISSA
001790r 2  8A                   txa
001791r 2               L3B27:
001791r 2  A2 B6                ldx     #FAC
001793r 2  C9 F9                cmp     #$F9
001795r 2  10 06                bpl     QINT2
001797r 2  20 rr rr             jsr     SHIFT_RIGHT
00179Ar 2  84 BD                sty     SHIFTSIGNEXT
00179Cr 2               L3B32:
00179Cr 2  60                   rts
00179Dr 2               QINT2:
00179Dr 2  A8                   tay
00179Er 2  A5 BB                lda     FACSIGN
0017A0r 2  29 80                and     #$80
0017A2r 2  46 B7                lsr     FAC+1
0017A4r 2  05 B7                ora     FAC+1
0017A6r 2  85 B7                sta     FAC+1
0017A8r 2  20 rr rr             jsr     SHIFT_RIGHT4
0017ABr 2  84 BD                sty     SHIFTSIGNEXT
0017ADr 2  60                   rts
0017AEr 2               
0017AEr 2               ; ----------------------------------------------------------------------------
0017AEr 2               ; "INT" FUNCTION
0017AEr 2               ;
0017AEr 2               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
0017AEr 2               ; AND THEN REFLOATS THE INTEGER.
0017AEr 2               ; ----------------------------------------------------------------------------
0017AEr 2               INT:
0017AEr 2  A5 B6                lda     FAC
0017B0r 2  C9 A0                cmp     #120+8*BYTES_FP
0017B2r 2  B0 20                bcs     RTS17
0017B4r 2  20 rr rr             jsr     QINT
0017B7r 2  84 C5                sty     FACEXTENSION
0017B9r 2  A5 BB                lda     FACSIGN
0017BBr 2  84 BB                sty     FACSIGN
0017BDr 2  49 80                eor     #$80
0017BFr 2  2A                   rol     a
0017C0r 2  A9 A0                lda     #120+8*BYTES_FP
0017C2r 2  85 B6                sta     FAC
0017C4r 2  A5 BA                lda     FAC_LAST
0017C6r 2  85 60                sta     CHARAC
0017C8r 2  4C rr rr             jmp     NORMALIZE_FAC1
0017CBr 2               QINT3:
0017CBr 2  85 B7                sta     FAC+1
0017CDr 2  85 B8                sta     FAC+2
0017CFr 2  85 B9                sta     FAC+3
0017D1r 2               .ifndef CONFIG_SMALL
0017D1r 2  85 BA                sta     FAC+4
0017D3r 2               .endif
0017D3r 2  A8                   tay
0017D4r 2               RTS17:
0017D4r 2  60                   rts
0017D5r 2               
0017D5r 2               ; ----------------------------------------------------------------------------
0017D5r 2               ; CONVERT STRING TO FP VALUE IN FAC
0017D5r 2               ;
0017D5r 2               ; STRING POINTED TO BY TXTPTR
0017D5r 2               ; FIRST CHAR ALREADY SCANNED BY CHRGET
0017D5r 2               ; (A) = FIRST CHAR, C=0 IF DIGIT.
0017D5r 2               ; ----------------------------------------------------------------------------
0017D5r 2               FIN:
0017D5r 2  A0 00                ldy     #$00
0017D7r 2  A2 0A                ldx     #SERLEN-TMPEXP
0017D9r 2               L3B6F:
0017D9r 2  94 B2                sty     TMPEXP,x
0017DBr 2  CA                   dex
0017DCr 2  10 FB                bpl     L3B6F
0017DEr 2  90 0F                bcc     FIN2
0017E0r 2               .ifdef SYM1
0017E0r 2                       cmp     #$26
0017E0r 2                       bne     LDABB
0017E0r 2                       jmp     LCDFE
0017E0r 2               LDABB:
0017E0r 2               .endif
0017E0r 2  C9 2D                cmp     #$2D
0017E2r 2  D0 04                bne     L3B7E
0017E4r 2  86 BC                stx     SERLEN
0017E6r 2  F0 04                beq     FIN1
0017E8r 2               L3B7E:
0017E8r 2  C9 2B                cmp     #$2B
0017EAr 2  D0 05                bne     FIN3
0017ECr 2               FIN1:
0017ECr 2  20 C8 00             jsr     CHRGET
0017EFr 2               FIN2:
0017EFr 2  90 5B                bcc     FIN9
0017F1r 2               FIN3:
0017F1r 2  C9 2E                cmp     #$2E
0017F3r 2  F0 2E                beq     FIN10
0017F5r 2  C9 45                cmp     #$45
0017F7r 2  D0 30                bne     FIN7
0017F9r 2  20 C8 00             jsr     CHRGET
0017FCr 2  90 17                bcc     FIN5
0017FEr 2  C9 A4                cmp     #TOKEN_MINUS
001800r 2  F0 0E                beq     L3BA6
001802r 2  C9 2D                cmp     #$2D
001804r 2  F0 0A                beq     L3BA6
001806r 2  C9 A3                cmp     #TOKEN_PLUS
001808r 2  F0 08                beq     FIN4
00180Ar 2  C9 2B                cmp     #$2B
00180Cr 2  F0 04                beq     FIN4
00180Er 2  D0 07                bne     FIN6
001810r 2               L3BA6:
001810r 2               .ifndef CONFIG_ROR_WORKAROUND
001810r 2  66 B5                ror     EXPSGN
001812r 2               .else
001812r 2                       lda     #$00
001812r 2                       bcc     L3BAC
001812r 2                       lda     #$80
001812r 2               L3BAC:
001812r 2                       lsr     EXPSGN
001812r 2                       ora     EXPSGN
001812r 2                       sta     EXPSGN
001812r 2               .endif
001812r 2               FIN4:
001812r 2  20 C8 00             jsr     CHRGET
001815r 2               FIN5:
001815r 2  90 5C                bcc     GETEXP
001817r 2               FIN6:
001817r 2  24 B5                bit     EXPSGN
001819r 2  10 0E                bpl     FIN7
00181Br 2  A9 00                lda     #$00
00181Dr 2  38                   sec
00181Er 2  E5 B3                sbc     EXPON
001820r 2  4C rr rr             jmp     FIN8
001823r 2               
001823r 2               ; ----------------------------------------------------------------------------
001823r 2               ; FOUND A DECIMAL POINT
001823r 2               ; ----------------------------------------------------------------------------
001823r 2               FIN10:
001823r 2               .ifndef CONFIG_ROR_WORKAROUND
001823r 2  66 B4                ror     LOWTR
001825r 2               .else
001825r 2                       lda     #$00
001825r 2                       bcc     L3BC9
001825r 2                       lda     #$80
001825r 2               L3BC9:
001825r 2                       lsr     LOWTR
001825r 2                       ora     LOWTR
001825r 2                       sta     LOWTR
001825r 2               .endif
001825r 2  24 B4                bit     LOWTR
001827r 2  50 C3                bvc     FIN1
001829r 2               
001829r 2               ; ----------------------------------------------------------------------------
001829r 2               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
001829r 2               ; ----------------------------------------------------------------------------
001829r 2               FIN7:
001829r 2  A5 B3                lda     EXPON
00182Br 2               FIN8:
00182Br 2  38                   sec
00182Cr 2  E5 B2                sbc     INDX
00182Er 2  85 B3                sta     EXPON
001830r 2  F0 12                beq     L3BEE
001832r 2  10 09                bpl     L3BE7
001834r 2               L3BDE:
001834r 2  20 rr rr             jsr     DIV10
001837r 2  E6 B3                inc     EXPON
001839r 2  D0 F9                bne     L3BDE
00183Br 2  F0 07                beq     L3BEE
00183Dr 2               L3BE7:
00183Dr 2  20 rr rr             jsr     MUL10
001840r 2  C6 B3                dec     EXPON
001842r 2  D0 F9                bne     L3BE7
001844r 2               L3BEE:
001844r 2  A5 BC                lda     SERLEN
001846r 2  30 01                bmi     L3BF3
001848r 2  60                   rts
001849r 2               L3BF3:
001849r 2  4C rr rr             jmp     NEGOP
00184Cr 2               
00184Cr 2               ; ----------------------------------------------------------------------------
00184Cr 2               ; ACCUMULATE A DIGIT INTO FAC
00184Cr 2               ; ----------------------------------------------------------------------------
00184Cr 2               FIN9:
00184Cr 2  48                   pha
00184Dr 2  24 B4                bit     LOWTR
00184Fr 2  10 02                bpl     L3BFD
001851r 2  E6 B2                inc     INDX
001853r 2               L3BFD:
001853r 2  20 rr rr             jsr     MUL10
001856r 2  68                   pla
001857r 2  38                   sec
001858r 2  E9 30                sbc     #$30
00185Ar 2  20 rr rr             jsr     ADDACC
00185Dr 2  4C rr rr             jmp     FIN1
001860r 2               
001860r 2               ; ----------------------------------------------------------------------------
001860r 2               ; ADD (A) TO FAC
001860r 2               ; ----------------------------------------------------------------------------
001860r 2               ADDACC:
001860r 2  48                   pha
001861r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001864r 2  68                   pla
001865r 2  20 rr rr             jsr     FLOAT
001868r 2  A5 C3                lda     ARGSIGN
00186Ar 2  45 BB                eor     FACSIGN
00186Cr 2  85 C4                sta     SGNCPR
00186Er 2  A6 B6                ldx     FAC
001870r 2  4C rr rr             jmp     FADDT
001873r 2               
001873r 2               ; ----------------------------------------------------------------------------
001873r 2               ; ACCUMULATE DIGIT OF EXPONENT
001873r 2               ; ----------------------------------------------------------------------------
001873r 2               GETEXP:
001873r 2  A5 B3                lda     EXPON
001875r 2  C9 0A                cmp     #MAX_EXPON
001877r 2  90 09                bcc     L3C2C
001879r 2               .ifdef CONFIG_10A
001879r 2  A9 64                lda     #$64
00187Br 2               .endif
00187Br 2  24 B5                bit     EXPSGN
00187Dr 2               .ifdef CONFIG_10A
00187Dr 2  30 11                bmi     L3C3A
00187Fr 2               .else
00187Fr 2                       bmi     LDC70
00187Fr 2               .endif
00187Fr 2  4C rr rr             jmp     OVERFLOW
001882r 2               LDC70:
001882r 2               .ifndef CONFIG_10A
001882r 2                       lda     #$0B
001882r 2               .endif
001882r 2               L3C2C:
001882r 2  0A                   asl     a
001883r 2  0A                   asl     a
001884r 2  18                   clc
001885r 2  65 B3                adc     EXPON
001887r 2  0A                   asl     a
001888r 2  18                   clc
001889r 2  A0 00                ldy     #$00
00188Br 2  71 CF                adc     (TXTPTR),y
00188Dr 2  38                   sec
00188Er 2  E9 30                sbc     #$30
001890r 2               L3C3A:
001890r 2  85 B3                sta     EXPON
001892r 2  4C rr rr             jmp     FIN4
001895r 2               
001895r 2               ; ----------------------------------------------------------------------------
001895r 2               .ifdef CONFIG_SMALL
001895r 2               ; these values are /1000 of what the labels say
001895r 2               CON_99999999_9:
001895r 2                       .byte   $91,$43,$4F,$F8
001895r 2               CON_999999999:
001895r 2               		.byte   $94,$74,$23,$F7
001895r 2               CON_BILLION:
001895r 2                       .byte   $94,$74,$24,$00
001895r 2               .else
001895r 2               CON_99999999_9:
001895r 2  9B 3E BC 1F          .byte   $9B,$3E,$BC,$1F,$FD
001899r 2  FD           
00189Ar 2               CON_999999999:
00189Ar 2               .ifndef CONFIG_10A
00189Ar 2                       .byte   $9E,$6E,$6B,$27,$FE
00189Ar 2               .else
00189Ar 2  9E 6E 6B 27          .byte   $9E,$6E,$6B,$27,$FD
00189Er 2  FD           
00189Fr 2               .endif
00189Fr 2               CON_BILLION:
00189Fr 2  9E 6E 6B 28          .byte   $9E,$6E,$6B,$28,$00
0018A3r 2  00           
0018A4r 2               .endif
0018A4r 2               
0018A4r 2               ; ----------------------------------------------------------------------------
0018A4r 2               ; PRINT "IN <LINE #>"
0018A4r 2               ; ----------------------------------------------------------------------------
0018A4r 2               INPRT:
0018A4r 2               .ifdef KBD
0018A4r 2                       jsr     LFE0B
0018A4r 2                       .byte	" in"
0018A4r 2                       .byte	0
0018A4r 2               .else
0018A4r 2  A9 rr                lda     #<QT_IN
0018A6r 2  A0 rr                ldy     #>QT_IN
0018A8r 2  20 rr rr             jsr     GOSTROUT2
0018ABr 2               .endif
0018ABr 2  A5 8F                lda     CURLIN+1
0018ADr 2  A6 8E                ldx     CURLIN
0018AFr 2               
0018AFr 2               ; ----------------------------------------------------------------------------
0018AFr 2               ; PRINT A,X AS DECIMAL INTEGER
0018AFr 2               ; ----------------------------------------------------------------------------
0018AFr 2               LINPRT:
0018AFr 2  85 B7                sta     FAC+1
0018B1r 2  86 B8                stx     FAC+2
0018B3r 2  A2 90                ldx     #$90
0018B5r 2  38                   sec
0018B6r 2  20 rr rr             jsr     FLOAT2
0018B9r 2  20 rr rr             jsr     FOUT
0018BCr 2               GOSTROUT2:
0018BCr 2  4C rr rr             jmp     STROUT
0018BFr 2               
0018BFr 2               ; ----------------------------------------------------------------------------
0018BFr 2               ; CONVERT (FAC) TO STRING STARTING AT STACK
0018BFr 2               ; RETURN WITH (Y,A) POINTING AT STRING
0018BFr 2               ; ----------------------------------------------------------------------------
0018BFr 2               FOUT:
0018BFr 2  A0 01                ldy     #$01
0018C1r 2               
0018C1r 2               ; ----------------------------------------------------------------------------
0018C1r 2               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
0018C1r 2               ; SO THAT RESULT STRING STARTS AT STACK-1
0018C1r 2               ; (THIS IS USED AS A FLAG)
0018C1r 2               ; ----------------------------------------------------------------------------
0018C1r 2               FOUT1:
0018C1r 2  A9 20                lda     #$20
0018C3r 2  24 BB                bit     FACSIGN
0018C5r 2  10 02                bpl     L3C73
0018C7r 2  A9 2D                lda     #$2D
0018C9r 2               L3C73:
0018C9r 2  99 FF 00             sta     STACK2-1,y
0018CCr 2  85 BB                sta     FACSIGN
0018CEr 2  84 C6                sty     STRNG2
0018D0r 2  C8                   iny
0018D1r 2  A9 30                lda     #$30
0018D3r 2  A6 B6                ldx     FAC
0018D5r 2  D0 03                bne     L3C84
0018D7r 2  4C rr rr             jmp     FOUT4
0018DAr 2               L3C84:
0018DAr 2  A9 00                lda     #$00
0018DCr 2  E0 80                cpx     #$80
0018DEr 2  F0 02                beq     L3C8C
0018E0r 2  B0 09                bcs     L3C95
0018E2r 2               L3C8C:
0018E2r 2  A9 rr                lda     #<CON_BILLION
0018E4r 2  A0 rr                ldy     #>CON_BILLION
0018E6r 2  20 rr rr             jsr     FMULT
0018E9r 2               .ifdef CONFIG_SMALL
0018E9r 2                       lda     #-6 ; exponent adjustment
0018E9r 2               .else
0018E9r 2  A9 F7                lda     #-9
0018EBr 2               .endif
0018EBr 2               L3C95:
0018EBr 2  85 B2                sta     INDX
0018EDr 2               ; ----------------------------------------------------------------------------
0018EDr 2               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
0018EDr 2               ; ----------------------------------------------------------------------------
0018EDr 2               L3C97:
0018EDr 2  A9 rr                lda     #<CON_999999999
0018EFr 2  A0 rr                ldy     #>CON_999999999
0018F1r 2  20 rr rr             jsr     FCOMP
0018F4r 2  F0 1E                beq     L3CBE
0018F6r 2  10 12                bpl     L3CB4
0018F8r 2               L3CA2:
0018F8r 2  A9 rr                lda     #<CON_99999999_9
0018FAr 2  A0 rr                ldy     #>CON_99999999_9
0018FCr 2  20 rr rr             jsr     FCOMP
0018FFr 2  F0 02                beq     L3CAD
001901r 2  10 0E                bpl     L3CBB
001903r 2               L3CAD:
001903r 2  20 rr rr             jsr     MUL10
001906r 2  C6 B2                dec     INDX
001908r 2  D0 EE                bne     L3CA2
00190Ar 2               L3CB4:
00190Ar 2  20 rr rr             jsr     DIV10
00190Dr 2  E6 B2                inc     INDX
00190Fr 2  D0 DC                bne     L3C97
001911r 2               L3CBB:
001911r 2  20 rr rr             jsr     FADDH
001914r 2               L3CBE:
001914r 2  20 rr rr             jsr     QINT
001917r 2               ; ----------------------------------------------------------------------------
001917r 2               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
001917r 2               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
001917r 2               ;
001917r 2               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
001917r 2               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
001917r 2               ; ----------------------------------------------------------------------------
001917r 2  A2 01                ldx     #$01
001919r 2  A5 B2                lda     INDX
00191Br 2  18                   clc
00191Cr 2  69 0A                adc     #3*BYTES_FP-5
00191Er 2  30 09                bmi     L3CD3
001920r 2  C9 0B                cmp     #3*BYTES_FP-4
001922r 2  B0 06                bcs     L3CD4
001924r 2  69 FF                adc     #$FF
001926r 2  AA                   tax
001927r 2  A9 02                lda     #$02
001929r 2               L3CD3:
001929r 2  38                   sec
00192Ar 2               L3CD4:
00192Ar 2  E9 02                sbc     #$02
00192Cr 2  85 B3                sta     EXPON
00192Er 2  86 B2                stx     INDX
001930r 2  8A                   txa
001931r 2  F0 02                beq     L3CDF
001933r 2  10 13                bpl     L3CF2
001935r 2               L3CDF:
001935r 2  A4 C6                ldy     STRNG2
001937r 2  A9 2E                lda     #$2E
001939r 2  C8                   iny
00193Ar 2  99 FF 00             sta     STACK2-1,y
00193Dr 2  8A                   txa
00193Er 2  F0 06                beq     L3CF0
001940r 2  A9 30                lda     #$30
001942r 2  C8                   iny
001943r 2  99 FF 00             sta     STACK2-1,y
001946r 2               L3CF0:
001946r 2  84 C6                sty     STRNG2
001948r 2               ; ----------------------------------------------------------------------------
001948r 2               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
001948r 2               ; ----------------------------------------------------------------------------
001948r 2               L3CF2:
001948r 2  A0 00                ldy     #$00
00194Ar 2               LDD3A:
00194Ar 2  A2 80                ldx     #$80
00194Cr 2               L3CF6:
00194Cr 2  A5 BA                lda     FAC_LAST
00194Er 2  18                   clc
00194Fr 2               .ifndef CONFIG_SMALL
00194Fr 2  79 rr rr             adc     DECTBL+3,y
001952r 2  85 BA                sta     FAC+4
001954r 2  A5 B9                lda     FAC+3
001956r 2               .endif
001956r 2  79 rr rr             adc     DECTBL+2,y
001959r 2  85 B9                sta     FAC+3
00195Br 2  A5 B8                lda     FAC+2
00195Dr 2  79 rr rr             adc     DECTBL+1,y
001960r 2  85 B8                sta     FAC+2
001962r 2  A5 B7                lda     FAC+1
001964r 2  79 rr rr             adc     DECTBL,y
001967r 2  85 B7                sta     FAC+1
001969r 2  E8                   inx
00196Ar 2  B0 04                bcs     L3D1A
00196Cr 2  10 DE                bpl     L3CF6
00196Er 2  30 02                bmi     L3D1C
001970r 2               L3D1A:
001970r 2  30 DA                bmi     L3CF6
001972r 2               L3D1C:
001972r 2  8A                   txa
001973r 2  90 04                bcc     L3D23
001975r 2  49 FF                eor     #$FF
001977r 2  69 0A                adc     #$0A
001979r 2               L3D23:
001979r 2  69 2F                adc     #$2F
00197Br 2  C8                   iny
00197Cr 2  C8                   iny
00197Dr 2  C8                   iny
00197Er 2               .ifndef CONFIG_SMALL
00197Er 2  C8                   iny
00197Fr 2               .endif
00197Fr 2  84 9C                sty     VARPNT
001981r 2  A4 C6                ldy     STRNG2
001983r 2  C8                   iny
001984r 2  AA                   tax
001985r 2  29 7F                and     #$7F
001987r 2  99 FF 00             sta     STACK2-1,y
00198Ar 2  C6 B2                dec     INDX
00198Cr 2  D0 06                bne     L3D3E
00198Er 2  A9 2E                lda     #$2E
001990r 2  C8                   iny
001991r 2  99 FF 00             sta     STACK2-1,y
001994r 2               L3D3E:
001994r 2  84 C6                sty     STRNG2
001996r 2  A4 9C                ldy     VARPNT
001998r 2  8A                   txa
001999r 2  49 FF                eor     #$FF
00199Br 2  29 80                and     #$80
00199Dr 2  AA                   tax
00199Er 2  C0 24                cpy     #DECTBL_END-DECTBL
0019A0r 2               .ifdef CONFIG_CBM_ALL
0019A0r 2                       beq     LDD96
0019A0r 2                       cpy     #$3C ; XXX
0019A0r 2               .endif
0019A0r 2  D0 AA                bne     L3CF6
0019A2r 2               ; ----------------------------------------------------------------------------
0019A2r 2               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
0019A2r 2               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
0019A2r 2               ; DECIMAL POINT.
0019A2r 2               ; ----------------------------------------------------------------------------
0019A2r 2               LDD96:
0019A2r 2  A4 C6                ldy     STRNG2
0019A4r 2               L3D4E:
0019A4r 2  B9 FF 00             lda     STACK2-1,y
0019A7r 2  88                   dey
0019A8r 2  C9 30                cmp     #$30
0019AAr 2  F0 F8                beq     L3D4E
0019ACr 2  C9 2E                cmp     #$2E
0019AEr 2  F0 01                beq     L3D5B
0019B0r 2  C8                   iny
0019B1r 2               L3D5B:
0019B1r 2  A9 2B                lda     #$2B
0019B3r 2  A6 B3                ldx     EXPON
0019B5r 2  F0 2E                beq     L3D8F
0019B7r 2  10 08                bpl     L3D6B
0019B9r 2  A9 00                lda     #$00
0019BBr 2  38                   sec
0019BCr 2  E5 B3                sbc     EXPON
0019BEr 2  AA                   tax
0019BFr 2  A9 2D                lda     #$2D
0019C1r 2               L3D6B:
0019C1r 2  99 01 01             sta     STACK2+1,y
0019C4r 2  A9 45                lda     #$45
0019C6r 2  99 00 01             sta     STACK2,y
0019C9r 2  8A                   txa
0019CAr 2  A2 2F                ldx     #$2F
0019CCr 2  38                   sec
0019CDr 2               L3D77:
0019CDr 2  E8                   inx
0019CEr 2  E9 0A                sbc     #$0A
0019D0r 2  B0 FB                bcs     L3D77
0019D2r 2  69 3A                adc     #$3A
0019D4r 2  99 03 01             sta     STACK2+3,y
0019D7r 2  8A                   txa
0019D8r 2  99 02 01             sta     STACK2+2,y
0019DBr 2  A9 00                lda     #$00
0019DDr 2  99 04 01             sta     STACK2+4,y
0019E0r 2  F0 08                beq     L3D94
0019E2r 2               FOUT4:
0019E2r 2  99 FF 00             sta     STACK2-1,y
0019E5r 2               L3D8F:
0019E5r 2  A9 00                lda     #$00
0019E7r 2  99 00 01             sta     STACK2,y
0019EAr 2               L3D94:
0019EAr 2  A9 00                lda     #<STACK2
0019ECr 2  A0 01                ldy     #>STACK2
0019EEr 2  60                   rts
0019EFr 2               
0019EFr 2               ; ----------------------------------------------------------------------------
0019EFr 2               CON_HALF:
0019EFr 2               .ifdef CONFIG_SMALL
0019EFr 2                       .byte   $80,$00,$00,$00
0019EFr 2               .else
0019EFr 2  80 00 00 00          .byte   $80,$00,$00,$00,$00
0019F3r 2  00           
0019F4r 2               .endif
0019F4r 2               
0019F4r 2               ; ----------------------------------------------------------------------------
0019F4r 2               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
0019F4r 2               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
0019F4r 2               ; ----------------------------------------------------------------------------
0019F4r 2               DECTBL:
0019F4r 2               .ifdef CONFIG_SMALL
0019F4r 2                       .byte   $FE,$79,$60 ; -100000
0019F4r 2               		.byte	$00,$27,$10 ; 10000
0019F4r 2               		.byte	$FF,$FC,$18 ; -1000
0019F4r 2               		.byte	$00,$00,$64 ; 100
0019F4r 2               		.byte	$FF,$FF,$F6 ; -10
0019F4r 2               		.byte	$00,$00,$01 ; 1
0019F4r 2               .else
0019F4r 2  FA 0A 1F 00  		.byte	$FA,$0A,$1F,$00	; -100000000
0019F8r 2  00 98 96 80  		.byte	$00,$98,$96,$80	; 10000000
0019FCr 2  FF F0 BD C0  		.byte	$FF,$F0,$BD,$C0	; -1000000
001A00r 2  00 01 86 A0  		.byte	$00,$01,$86,$A0	; 100000
001A04r 2  FF FF D8 F0  		.byte	$FF,$FF,$D8,$F0	; -10000
001A08r 2  00 00 03 E8  		.byte   $00,$00,$03,$E8	; 1000
001A0Cr 2  FF FF FF 9C  		.byte	$FF,$FF,$FF,$9C	; -100
001A10r 2  00 00 00 0A  		.byte   $00,$00,$00,$0A	; 10
001A14r 2  FF FF FF FF  		.byte	$FF,$FF,$FF,$FF	; -1
001A18r 2               .endif
001A18r 2               DECTBL_END:
001A18r 2               .ifdef CONFIG_CBM_ALL
001A18r 2               		.byte	$FF,$DF,$0A,$80 ; TI$
001A18r 2               		.byte	$00,$03,$4B,$C0
001A18r 2               		.byte	$FF,$FF,$73,$60
001A18r 2               		.byte	$00,$00,$0E,$10
001A18r 2               		.byte	$FF,$FF,$FD,$A8
001A18r 2               		.byte	$00,$00,$00,$3C
001A18r 2               .endif
001A18r 2               .ifdef CONFIG_2
001A18r 2               C_ZERO = CON_HALF + 2
001A18r 2               .endif
001A18r 2               
001A18r 2               ; ----------------------------------------------------------------------------
001A18r 2               ; "SQR" FUNCTION
001A18r 2               ; ----------------------------------------------------------------------------
001A18r 2               SQR:
001A18r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001A1Br 2  A9 rr                lda     #<CON_HALF
001A1Dr 2  A0 rr                ldy     #>CON_HALF
001A1Fr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001A22r 2               
001A22r 2               ; ----------------------------------------------------------------------------
001A22r 2               ; EXPONENTIATION OPERATION
001A22r 2               ;
001A22r 2               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
001A22r 2               ; ----------------------------------------------------------------------------
001A22r 2               FPWRT:
001A22r 2  F0 70                beq     EXP
001A24r 2  A5 BE                lda     ARG
001A26r 2  D0 03                bne     L3DD5
001A28r 2  4C rr rr             jmp     STA_IN_FAC_SIGN_AND_EXP
001A2Br 2               L3DD5:
001A2Br 2  A2 A3                ldx     #TEMP3
001A2Dr 2  A0 00                ldy     #$00
001A2Fr 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
001A32r 2  A5 C3                lda     ARGSIGN
001A34r 2  10 0F                bpl     L3DEF
001A36r 2  20 rr rr             jsr     INT
001A39r 2  A9 A3                lda     #TEMP3
001A3Br 2  A0 00                ldy     #$00
001A3Dr 2  20 rr rr             jsr     FCOMP
001A40r 2  D0 03                bne     L3DEF
001A42r 2  98                   tya
001A43r 2  A4 60                ldy     CHARAC
001A45r 2               L3DEF:
001A45r 2  20 rr rr             jsr     MFA
001A48r 2  98                   tya
001A49r 2  48                   pha
001A4Ar 2  20 rr rr             jsr     LOG
001A4Dr 2  A9 A3                lda     #TEMP3
001A4Fr 2  A0 00                ldy     #$00
001A51r 2  20 rr rr             jsr     FMULT
001A54r 2  20 rr rr             jsr     EXP
001A57r 2  68                   pla
001A58r 2  4A                   lsr     a
001A59r 2  90 0A                bcc     L3E0F
001A5Br 2               
001A5Br 2               ; ----------------------------------------------------------------------------
001A5Br 2               ; NEGATE VALUE IN FAC
001A5Br 2               ; ----------------------------------------------------------------------------
001A5Br 2               NEGOP:
001A5Br 2  A5 B6                lda     FAC
001A5Dr 2  F0 06                beq     L3E0F
001A5Fr 2  A5 BB                lda     FACSIGN
001A61r 2  49 FF                eor     #$FF
001A63r 2  85 BB                sta     FACSIGN
001A65r 2               L3E0F:
001A65r 2  60                   rts
001A66r 2               
001A66r 2               ; ----------------------------------------------------------------------------
001A66r 2               .ifdef CONFIG_SMALL
001A66r 2               CON_LOG_E:
001A66r 2                       .byte   $81,$38,$AA,$3B
001A66r 2               POLY_EXP:
001A66r 2               		.byte	$06
001A66r 2               		.byte	$74,$63,$90,$8C
001A66r 2               		.byte	$77,$23,$0C,$AB
001A66r 2               		.byte	$7A,$1E,$94,$00
001A66r 2               		.byte	$7C,$63,$42,$80
001A66r 2               		.byte	$7E,$75,$FE,$D0
001A66r 2               		.byte	$80,$31,$72,$15
001A66r 2               		.byte	$81,$00,$00,$00
001A66r 2               .else
001A66r 2               CON_LOG_E:
001A66r 2  81 38 AA 3B          .byte   $81,$38,$AA,$3B,$29
001A6Ar 2  29           
001A6Br 2               POLY_EXP:
001A6Br 2  07                   .byte   $07
001A6Cr 2  71 34 58 3E  		.byte	$71,$34,$58,$3E,$56
001A70r 2  56           
001A71r 2  74 16 7E B3  		.byte	$74,$16,$7E,$B3,$1B
001A75r 2  1B           
001A76r 2  77 2F EE E3  		.byte	$77,$2F,$EE,$E3,$85
001A7Ar 2  85           
001A7Br 2  7A 1D 84 1C          .byte   $7A,$1D,$84,$1C,$2A
001A7Fr 2  2A           
001A80r 2  7C 63 59 58  		.byte	$7C,$63,$59,$58,$0A
001A84r 2  0A           
001A85r 2  7E 75 FD E7  		.byte	$7E,$75,$FD,$E7,$C6
001A89r 2  C6           
001A8Ar 2  80 31 72 18  		.byte	$80,$31,$72,$18,$10
001A8Er 2  10           
001A8Fr 2  81 00 00 00  		.byte	$81,$00,$00,$00,$00
001A93r 2  00           
001A94r 2               .endif
001A94r 2               
001A94r 2               ; ----------------------------------------------------------------------------
001A94r 2               ; "EXP" FUNCTION
001A94r 2               ;
001A94r 2               ; FAC = E ^ FAC
001A94r 2               ; ----------------------------------------------------------------------------
001A94r 2               EXP:
001A94r 2  A9 rr                lda     #<CON_LOG_E
001A96r 2  A0 rr                ldy     #>CON_LOG_E
001A98r 2  20 rr rr             jsr     FMULT
001A9Br 2  A5 C5                lda     FACEXTENSION
001A9Dr 2  69 50                adc     #$50
001A9Fr 2  90 03                bcc     L3E4E
001AA1r 2  20 rr rr             jsr     INCREMENT_MANTISSA
001AA4r 2               L3E4E:
001AA4r 2  85 AB                sta     ARGEXTENSION
001AA6r 2  20 rr rr             jsr     MAF
001AA9r 2  A5 B6                lda     FAC
001AABr 2  C9 88                cmp     #$88
001AADr 2  90 03                bcc     L3E5C
001AAFr 2               L3E59:
001AAFr 2  20 rr rr             jsr     OUTOFRNG
001AB2r 2               L3E5C:
001AB2r 2  20 rr rr             jsr     INT
001AB5r 2  A5 60                lda     CHARAC
001AB7r 2  18                   clc
001AB8r 2  69 81                adc     #$81
001ABAr 2  F0 F3                beq     L3E59
001ABCr 2  38                   sec
001ABDr 2  E9 01                sbc     #$01
001ABFr 2  48                   pha
001AC0r 2  A2 05                ldx     #BYTES_FP
001AC2r 2               L3E6C:
001AC2r 2  B5 BE                lda     ARG,x
001AC4r 2  B4 B6                ldy     FAC,x
001AC6r 2  95 B6                sta     FAC,x
001AC8r 2  94 BE                sty     ARG,x
001ACAr 2  CA                   dex
001ACBr 2  10 F5                bpl     L3E6C
001ACDr 2  A5 AB                lda     ARGEXTENSION
001ACFr 2  85 C5                sta     FACEXTENSION
001AD1r 2  20 rr rr             jsr     FSUBT
001AD4r 2  20 rr rr             jsr     NEGOP
001AD7r 2  A9 rr                lda     #<POLY_EXP
001AD9r 2  A0 rr                ldy     #>POLY_EXP
001ADBr 2  20 rr rr             jsr     POLYNOMIAL
001ADEr 2  A9 00                lda     #$00
001AE0r 2  85 C4                sta     SGNCPR
001AE2r 2  68                   pla
001AE3r 2  20 rr rr             jsr     ADD_EXPONENTS1
001AE6r 2  60                   rts
001AE7r 2               
001AE7r 2               ; ----------------------------------------------------------------------------
001AE7r 2               ; ODD POLYNOMIAL SUBROUTINE
001AE7r 2               ;
001AE7r 2               ; F(X) = X * P(X^2)
001AE7r 2               ;
001AE7r 2               ; WHERE:  X IS VALUE IN FAC
001AE7r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001AE7r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001AE7r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001AE7r 2               ;
001AE7r 2               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
001AE7r 2               ; ----------------------------------------------------------------------------
001AE7r 2               POLYNOMIAL_ODD:
001AE7r 2  85 C6                sta     STRNG2
001AE9r 2  84 C7                sty     STRNG2+1
001AEBr 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001AEEr 2  A9 AC                lda     #TEMP1X
001AF0r 2  20 rr rr             jsr     FMULT
001AF3r 2  20 rr rr             jsr     SERMAIN
001AF6r 2  A9 AC                lda     #TEMP1X
001AF8r 2  A0 00                ldy     #$00
001AFAr 2  4C rr rr             jmp     FMULT
001AFDr 2               
001AFDr 2               ; ----------------------------------------------------------------------------
001AFDr 2               ; NORMAL POLYNOMIAL SUBROUTINE
001AFDr 2               ;
001AFDr 2               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
001AFDr 2               ;
001AFDr 2               ; WHERE:  X IS VALUE IN FAC
001AFDr 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001AFDr 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001AFDr 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001AFDr 2               ; ----------------------------------------------------------------------------
001AFDr 2               POLYNOMIAL:
001AFDr 2  85 C6                sta     STRNG2
001AFFr 2  84 C7                sty     STRNG2+1
001B01r 2               SERMAIN:
001B01r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP2_ROUNDED
001B04r 2  B1 C6                lda     (STRNG2),y
001B06r 2  85 BC                sta     SERLEN
001B08r 2  A4 C6                ldy     STRNG2
001B0Ar 2  C8                   iny
001B0Br 2  98                   tya
001B0Cr 2  D0 02                bne     L3EBA
001B0Er 2  E6 C7                inc     STRNG2+1
001B10r 2               L3EBA:
001B10r 2  85 C6                sta     STRNG2
001B12r 2  A4 C7                ldy     STRNG2+1
001B14r 2               L3EBE:
001B14r 2  20 rr rr             jsr     FMULT
001B17r 2  A5 C6                lda     STRNG2
001B19r 2  A4 C7                ldy     STRNG2+1
001B1Br 2  18                   clc
001B1Cr 2  69 05                adc     #BYTES_FP
001B1Er 2  90 01                bcc     L3ECB
001B20r 2  C8                   iny
001B21r 2               L3ECB:
001B21r 2  85 C6                sta     STRNG2
001B23r 2  84 C7                sty     STRNG2+1
001B25r 2  20 rr rr             jsr     FADD
001B28r 2  A9 B1                lda     #TEMP2
001B2Ar 2  A0 00                ldy     #$00
001B2Cr 2  C6 BC                dec     SERLEN
001B2Er 2  D0 E4                bne     L3EBE
001B30r 2               RTS19:
001B30r 2  60                   rts
001B31r 2               
001B31r 1               .include "chrget.s"
001B31r 2               .segment "CHRGET"
000000r 2               RAMSTART1:
000000r 2               GENERIC_CHRGET:
000000r 2  E6 CF                inc     TXTPTR
000002r 2  D0 02                bne     GENERIC_CHRGOT
000004r 2  E6 D0                inc     TXTPTR+1
000006r 2               GENERIC_CHRGOT:
000006r 2               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
000006r 2  AD 60 EA             lda     $EA60
000009r 2               .ifdef KBD
000009r 2                       jsr     LF430
000009r 2               .endif
000009r 2  C9 3A                cmp     #$3A
00000Br 2  B0 0A                bcs     L4058
00000Dr 2               GENERIC_CHRGOT2:
00000Dr 2  C9 20                cmp     #$20
00000Fr 2  F0 EF                beq     GENERIC_CHRGET
000011r 2  38                   sec
000012r 2  E9 30                sbc     #$30
000014r 2  38                   sec
000015r 2  E9 D0                sbc     #$D0
000017r 2               L4058:
000017r 2  60                   rts
000018r 2               
000018r 1               .include "rnd.s"
000018r 2               .segment "CODE"
001B31r 2               
001B31r 2               ; ----------------------------------------------------------------------------
001B31r 2               ; "RND" FUNCTION
001B31r 2               ; ----------------------------------------------------------------------------
001B31r 2               
001B31r 2               .ifdef KBD
001B31r 2               RND:
001B31r 2                       ldx     #$10
001B31r 2                       jsr     SIGN
001B31r 2                       beq     LFC26
001B31r 2                       bmi     LFC10
001B31r 2                       lda     RNDSEED
001B31r 2                       ldy     RNDSEED+1
001B31r 2               LFBFA:
001B31r 2                       sta     FAC+2
001B31r 2                       sty     FAC+1
001B31r 2               LFBFE:
001B31r 2                       asl     a
001B31r 2                       asl     a
001B31r 2                       eor     FAC+2
001B31r 2                       asl     a
001B31r 2                       eor     FAC+1
001B31r 2                       asl     a
001B31r 2                       asl     a
001B31r 2                       asl     a
001B31r 2                       asl     a
001B31r 2                       eor     FAC+1
001B31r 2                       asl     a
001B31r 2                       rol     FAC+2
001B31r 2                       rol     FAC+1
001B31r 2               LFC10:
001B31r 2                       lda     FAC+2
001B31r 2                       dex
001B31r 2                       bne     LFBFE
001B31r 2                       sta     RNDSEED
001B31r 2                       sta     FAC+3
001B31r 2                       lda     FAC+1
001B31r 2                       sta     RNDSEED+1
001B31r 2                       lda     #$80
001B31r 2                       sta     FAC
001B31r 2                       stx     FACSIGN
001B31r 2                       jmp     NORMALIZE_FAC2
001B31r 2               LFC26:
001B31r 2                       ldy     $03CA
001B31r 2                       lda     $03C7
001B31r 2                       ora     #$01
001B31r 2               GOMOVMF:
001B31r 2                       bne     LFBFA
001B31r 2                       .byte   $F0
001B31r 2               .else
001B31r 2               ; <<< THESE ARE MISSING ONE BYTE FOR FP VALUES >>>
001B31r 2               ; (non CONFIG_SMALL)
001B31r 2               CONRND1:
001B31r 2  98 35 44 7A          .byte   $98,$35,$44,$7A
001B35r 2               CONRND2:
001B35r 2  68 28 B1 46          .byte   $68,$28,$B1,$46
001B39r 2               RND:
001B39r 2  20 rr rr             jsr     SIGN
001B3Cr 2               .ifdef CONFIG_CBM_ALL
001B3Cr 2                       bmi     L3F01
001B3Cr 2                       bne     LDF63
001B3Cr 2                       lda     ENTROPY
001B3Cr 2                       sta     FAC+1
001B3Cr 2                       lda     ENTROPY+4
001B3Cr 2                       sta     FAC+2
001B3Cr 2                       lda     ENTROPY+1
001B3Cr 2                       sta     FAC+3
001B3Cr 2                       lda     ENTROPY+5
001B3Cr 2                       sta     FAC+4
001B3Cr 2                       jmp     LDF88
001B3Cr 2               LDF63:
001B3Cr 2               .else
001B3Cr 2  AA                   tax
001B3Dr 2  30 18                bmi     L3F01
001B3Fr 2               .endif
001B3Fr 2  A9 E0                lda     #<RNDSEED
001B41r 2  A0 00                ldy     #>RNDSEED
001B43r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001B46r 2               .ifndef CONFIG_CBM_ALL
001B46r 2  8A                   txa
001B47r 2  F0 E7                beq     RTS19
001B49r 2               .endif
001B49r 2  A9 rr                lda     #<CONRND1
001B4Br 2  A0 rr                ldy     #>CONRND1
001B4Dr 2  20 rr rr             jsr     FMULT
001B50r 2  A9 rr                lda     #<CONRND2
001B52r 2  A0 rr                ldy     #>CONRND2
001B54r 2  20 rr rr             jsr     FADD
001B57r 2               L3F01:
001B57r 2  A6 BA                ldx     FAC_LAST
001B59r 2  A5 B7                lda     FAC+1
001B5Br 2  85 BA                sta     FAC_LAST
001B5Dr 2  86 B7                stx     FAC+1
001B5Fr 2               .ifdef CONFIG_CBM_ALL
001B5Fr 2                       ldx     FAC+2
001B5Fr 2                       lda     FAC+3
001B5Fr 2                       sta     FAC+2
001B5Fr 2                       stx     FAC+3
001B5Fr 2               LDF88:
001B5Fr 2               .endif
001B5Fr 2  A9 00                lda     #$00
001B61r 2  85 BB                sta     FACSIGN
001B63r 2  A5 B6                lda     FAC
001B65r 2  85 C5                sta     FACEXTENSION
001B67r 2  A9 80                lda     #$80
001B69r 2  85 B6                sta     FAC
001B6Br 2  20 rr rr             jsr     NORMALIZE_FAC2
001B6Er 2  A2 E0                ldx     #<RNDSEED
001B70r 2  A0 00                ldy     #>RNDSEED
001B72r 2               GOMOVMF:
001B72r 2  4C rr rr             jmp     STORE_FAC_AT_YX_ROUNDED
001B75r 2               .endif
001B75r 2               
001B75r 2               .segment "CHRGET"
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               ; INITIAL VALUE FOR RANDOM NUMBER, ALSO COPIED
000018r 2               ; IN ALONG WITH CHRGET, BUT ERRONEOUSLY:
000018r 2               ; <<< THE LAST BYTE IS NOT COPIED >>>
000018r 2               ; (on all non-CONFIG_SMALL)
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               GENERIC_RNDSEED:
000018r 2               .ifndef KBD
000018r 2               ; random number seed
000018r 2                 .ifdef CONFIG_SMALL
000018r 2                       .byte   $80,$4F,$C7,$52
000018r 2                 .else
000018r 2                   .ifdef CONFIG_11
000018r 2  80 4F C7 52          .byte   $80,$4F,$C7,$52,$58
00001Cr 2  58           
00001Dr 2                   .else
00001Dr 2                       .byte   $80,$4F,$C7,$52,$59
00001Dr 2                   .endif
00001Dr 2                 .endif
00001Dr 2               .endif
00001Dr 2               GENERIC_CHRGET_END:
00001Dr 2               
00001Dr 1               .include "trig.s"
00001Dr 2               .segment "CODE"
001B75r 2               
001B75r 2               .ifndef SYM1
001B75r 2               SIN_COS_TAN_ATN:
001B75r 2               ; ----------------------------------------------------------------------------
001B75r 2               ; "COS" FUNCTION
001B75r 2               ; ----------------------------------------------------------------------------
001B75r 2               COS:
001B75r 2  A9 rr                lda     #<CON_PI_HALF
001B77r 2  A0 rr                ldy     #>CON_PI_HALF
001B79r 2  20 rr rr             jsr     FADD
001B7Cr 2               
001B7Cr 2               ; ----------------------------------------------------------------------------
001B7Cr 2               ; "SIN" FUNCTION
001B7Cr 2               ; ----------------------------------------------------------------------------
001B7Cr 2               SIN:
001B7Cr 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001B7Fr 2  A9 rr                lda     #<CON_PI_DOUB
001B81r 2  A0 rr                ldy     #>CON_PI_DOUB
001B83r 2  A6 C3                ldx     ARGSIGN
001B85r 2  20 rr rr             jsr     DIV
001B88r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001B8Br 2  20 rr rr             jsr     INT
001B8Er 2  A9 00                lda     #$00
001B90r 2  85 C4                sta     STRNG1
001B92r 2  20 rr rr             jsr     FSUBT
001B95r 2               ; ----------------------------------------------------------------------------
001B95r 2               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
001B95r 2               ;
001B95r 2               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
001B95r 2               ;
001B95r 2               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
001B95r 2               ; ----------------------------------------------------------------------------
001B95r 2  A9 rr                lda     #<QUARTER
001B97r 2  A0 rr                ldy     #>QUARTER
001B99r 2  20 rr rr             jsr     FSUB
001B9Cr 2  A5 BB                lda     FACSIGN
001B9Er 2  48                   pha
001B9Fr 2  10 0D                bpl     SIN1
001BA1r 2  20 rr rr             jsr     FADDH
001BA4r 2  A5 BB                lda     FACSIGN
001BA6r 2  30 09                bmi     L3F5B
001BA8r 2  A5 69                lda     CPRMASK
001BAAr 2  49 FF                eor     #$FF
001BACr 2  85 69                sta     CPRMASK
001BAEr 2               ; ----------------------------------------------------------------------------
001BAEr 2               ; IF FALL THRU, RANGE IS 0...1/2
001BAEr 2               ; IF BRANCH HERE, RANGE IS 0...1/4
001BAEr 2               ; ----------------------------------------------------------------------------
001BAEr 2               SIN1:
001BAEr 2  20 rr rr             jsr     NEGOP
001BB1r 2               ; ----------------------------------------------------------------------------
001BB1r 2               ; IF FALL THRU, RANGE IS -1/2...0
001BB1r 2               ; IF BRANCH HERE, RANGE IS -1/4...0
001BB1r 2               ; ----------------------------------------------------------------------------
001BB1r 2               L3F5B:
001BB1r 2  A9 rr                lda     #<QUARTER
001BB3r 2  A0 rr                ldy     #>QUARTER
001BB5r 2  20 rr rr             jsr     FADD
001BB8r 2  68                   pla
001BB9r 2  10 03                bpl     L3F68
001BBBr 2  20 rr rr             jsr     NEGOP
001BBEr 2               L3F68:
001BBEr 2  A9 rr                lda     #<POLY_SIN
001BC0r 2  A0 rr                ldy     #>POLY_SIN
001BC2r 2  4C rr rr             jmp     POLYNOMIAL_ODD
001BC5r 2               
001BC5r 2               ; ----------------------------------------------------------------------------
001BC5r 2               ; "TAN" FUNCTION
001BC5r 2               ;
001BC5r 2               ; COMPUTE TAN(X) = SIN(X) / COS(X)
001BC5r 2               ; ----------------------------------------------------------------------------
001BC5r 2               TAN:
001BC5r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001BC8r 2  A9 00                lda     #$00
001BCAr 2  85 69                sta     CPRMASK
001BCCr 2  20 rr rr             jsr     SIN
001BCFr 2  A2 A3                ldx     #TEMP3
001BD1r 2  A0 00                ldy     #$00
001BD3r 2  20 rr rr             jsr     GOMOVMF
001BD6r 2  A9 AC                lda     #TEMP1+(5-BYTES_FP)
001BD8r 2  A0 00                ldy     #$00
001BDAr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001BDDr 2  A9 00                lda     #$00
001BDFr 2  85 BB                sta     FACSIGN
001BE1r 2  A5 69                lda     CPRMASK
001BE3r 2  20 rr rr             jsr     TAN1
001BE6r 2  A9 A3                lda     #TEMP3
001BE8r 2  A0 00                ldy     #$00
001BEAr 2  4C rr rr             jmp     FDIV
001BEDr 2               TAN1:
001BEDr 2  48                   pha
001BEEr 2  4C rr rr             jmp     SIN1
001BF1r 2               
001BF1r 2               ; ----------------------------------------------------------------------------
001BF1r 2               .ifdef CONFIG_SMALL
001BF1r 2               CON_PI_HALF:
001BF1r 2                       .byte   $81,$49,$0F,$DB
001BF1r 2               CON_PI_DOUB:
001BF1r 2                       .byte   $83,$49,$0F,$DB
001BF1r 2               QUARTER:
001BF1r 2                       .byte   $7F,$00,$00,$00
001BF1r 2               POLY_SIN:
001BF1r 2                       .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
001BF1r 2                       .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
001BF1r 2                       .byte   $E1,$83,$49,$0F,$DB
001BF1r 2               .else
001BF1r 2               CON_PI_HALF:
001BF1r 2  81 49 0F DA          .byte   $81,$49,$0F,$DA,$A2
001BF5r 2  A2           
001BF6r 2               CON_PI_DOUB:
001BF6r 2  83 49 0F DA          .byte   $83,$49,$0F,$DA,$A2
001BFAr 2  A2           
001BFBr 2               QUARTER:
001BFBr 2  7F 00 00 00          .byte   $7F,$00,$00,$00,$00
001BFFr 2  00           
001C00r 2               POLY_SIN:
001C00r 2  05 84 E6 1A          .byte   $05,$84,$E6,$1A,$2D,$1B,$86,$28
001C04r 2  2D 1B 86 28  
001C08r 2  07 FB F8 87          .byte   $07,$FB,$F8,$87,$99,$68,$89,$01
001C0Cr 2  99 68 89 01  
001C10r 2  87 23 35 DF          .byte   $87,$23,$35,$DF,$E1,$86,$A5,$5D
001C14r 2  E1 86 A5 5D  
001C18r 2  E7 28 83 49          .byte   $E7,$28,$83,$49,$0F,$DA,$A2
001C1Cr 2  0F DA A2     
001C1Fr 2                 .ifndef CONFIG_11
001C1Fr 2               ; no easter egg text before BASIC 1.1
001C1Fr 2                 .elseif !.def(CONFIG_2A)
001C1Fr 2               ; ASCII encoded easter egg
001C1Fr 2               MICROSOFT:
001C1Fr 2                       .byte   $A6,$D3,$C1,$C8,$D4,$C8,$D5,$C4
001C1Fr 2                       .byte   $CE,$CA
001C1Fr 2                 .else
001C1Fr 2               ; PET encoded easter egg text since CBM2
001C1Fr 2               MICROSOFT:
001C1Fr 2  A1 54 46 8F          .byte   $A1,$54,$46,$8F,$13,$8F,$52,$43
001C23r 2  13 8F 52 43  
001C27r 2  89 CD                .byte   $89,$CD
001C29r 2                 .endif
001C29r 2               .endif
001C29r 2               
001C29r 2               .ifndef AIM65
001C29r 2               ; ----------------------------------------------------------------------------
001C29r 2               ; "ATN" FUNCTION
001C29r 2               ; ----------------------------------------------------------------------------
001C29r 2               ATN:
001C29r 2  A5 BB                lda     FACSIGN
001C2Br 2  48                   pha
001C2Cr 2  10 03                bpl     L3FDB
001C2Er 2  20 rr rr             jsr     NEGOP
001C31r 2               L3FDB:
001C31r 2  A5 B6                lda     FAC
001C33r 2  48                   pha
001C34r 2  C9 81                cmp     #$81
001C36r 2  90 07                bcc     L3FE9
001C38r 2  A9 rr                lda     #<CON_ONE
001C3Ar 2  A0 rr                ldy     #>CON_ONE
001C3Cr 2  20 rr rr             jsr     FDIV
001C3Fr 2               ; ----------------------------------------------------------------------------
001C3Fr 2               ; 0 <= X <= 1
001C3Fr 2               ; 0 <= ATN(X) <= PI/8
001C3Fr 2               ; ----------------------------------------------------------------------------
001C3Fr 2               L3FE9:
001C3Fr 2  A9 rr                lda     #<POLY_ATN
001C41r 2  A0 rr                ldy     #>POLY_ATN
001C43r 2  20 rr rr             jsr     POLYNOMIAL_ODD
001C46r 2  68                   pla
001C47r 2  C9 81                cmp     #$81
001C49r 2  90 07                bcc     L3FFC
001C4Br 2  A9 rr                lda     #<CON_PI_HALF
001C4Dr 2  A0 rr                ldy     #>CON_PI_HALF
001C4Fr 2  20 rr rr             jsr     FSUB
001C52r 2               L3FFC:
001C52r 2  68                   pla
001C53r 2  10 03                bpl     L4002
001C55r 2  4C rr rr             jmp     NEGOP
001C58r 2               L4002:
001C58r 2  60                   rts
001C59r 2               
001C59r 2               ; ----------------------------------------------------------------------------
001C59r 2               POLY_ATN:
001C59r 2               .ifdef CONFIG_SMALL
001C59r 2                       .byte   $08
001C59r 2               		.byte	$78,$3A,$C5,$37
001C59r 2               		.byte	$7B,$83,$A2,$5C
001C59r 2               		.byte	$7C,$2E,$DD,$4D
001C59r 2               		.byte	$7D,$99,$B0,$1E
001C59r 2               		.byte	$7D,$59,$ED,$24
001C59r 2               		.byte	$7E,$91,$72,$00
001C59r 2               		.byte	$7E,$4C,$B9,$73
001C59r 2               		.byte	$7F,$AA,$AA,$53
001C59r 2               		.byte	$81,$00,$00,$00
001C59r 2               .else
001C59r 2  0B                   .byte   $0B
001C5Ar 2  76 B3 83 BD  		.byte	$76,$B3,$83,$BD,$D3
001C5Er 2  D3           
001C5Fr 2  79 1E F4 A6  		.byte	$79,$1E,$F4,$A6,$F5
001C63r 2  F5           
001C64r 2  7B 83 FC B0  		.byte	$7B,$83,$FC,$B0,$10
001C68r 2  10           
001C69r 2  7C 0C 1F 67          .byte   $7C,$0C,$1F,$67,$CA
001C6Dr 2  CA           
001C6Er 2  7C DE 53 CB  		.byte	$7C,$DE,$53,$CB,$C1
001C72r 2  C1           
001C73r 2  7D 14 64 70  		.byte	$7D,$14,$64,$70,$4C
001C77r 2  4C           
001C78r 2  7D B7 EA 51  		.byte	$7D,$B7,$EA,$51,$7A
001C7Cr 2  7A           
001C7Dr 2  7D 63 30 88  		.byte	$7D,$63,$30,$88,$7E
001C81r 2  7E           
001C82r 2  7E 92 44 99  		.byte	$7E,$92,$44,$99,$3A
001C86r 2  3A           
001C87r 2  7E 4C CC 91  		.byte	$7E,$4C,$CC,$91,$C7
001C8Br 2  C7           
001C8Cr 2  7F AA AA AA  		.byte	$7F,$AA,$AA,$AA,$13
001C90r 2  13           
001C91r 2  81 00 00 00          .byte   $81,$00,$00,$00,$00
001C95r 2  00           
001C96r 2               .endif
001C96r 2               
001C96r 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
001C96r 2               		.byte	$00 ; XXX
001C96r 2               .endif
001C96r 2               .endif
001C96r 2               .endif
001C96r 2               
001C96r 1               .include "init.s"
001C96r 2               .segment "INIT"
000000r 2               
000000r 2               .ifdef KBD
000000r 2               FNDLIN2:
000000r 2                       php
000000r 2                       jmp     FNDLIN
000000r 2               .endif
000000r 2               
000000r 2               ; ----------------------------------------------------------------------------
000000r 2               PR_WRITTEN_BY:
000000r 2               .ifndef KBD
000000r 2                 .ifndef CONFIG_CBM_ALL
000000r 2                   .ifndef AIM65
000000r 2                     .ifndef SYM1
000000r 2  A9 rr                lda     #<QT_WRITTEN_BY
000002r 2  A0 rr                ldy     #>QT_WRITTEN_BY
000004r 2  20 rr rr             jsr     STROUT
000007r 2                     .endif
000007r 2                   .endif
000007r 2                 .endif
000007r 2               .endif
000007r 2               COLD_START:
000007r 2               .ifdef SYM1
000007r 2                       jsr     ACCESS
000007r 2               .endif
000007r 2               .ifdef KBD
000007r 2                       lda     #<LFD81
000007r 2                       sta     $03A0
000007r 2                       lda     #>LFD81
000007r 2                       sta     $03A1
000007r 2                       lda     #$20
000007r 2                       sta     $0480
000007r 2                       lda     $0352
000007r 2                       sta     $04
000007r 2                       lda     $0353
000007r 2                       sta     $05
000007r 2               .else
000007r 2                 .ifndef CBM2
000007r 2  A2 FF                ldx     #$FF
000009r 2  86 8F                stx     CURLIN+1
00000Br 2                 .endif
00000Br 2                 .ifdef CONFIG_NO_INPUTBUFFER_ZP
00000Br 2                       ldx     #$FB
00000Br 2                 .elseif .def(AIM65)
00000Br 2                       ldx     #$FE
00000Br 2                 .endif
00000Br 2  9A                   txs
00000Cr 2                 .ifndef CONFIG_CBM_ALL
00000Cr 2  A9 rr                lda     #<COLD_START
00000Er 2  A0 rr                ldy     #>COLD_START
000010r 2  85 01                sta     GORESTART+1
000012r 2  84 02                sty     GORESTART+2
000014r 2                   .ifndef AIM65
000014r 2  85 04                sta     GOSTROUT+1
000016r 2  84 05                sty     GOSTROUT+2
000018r 2  A9 rr                lda     #<AYINT
00001Ar 2  A0 rr                ldy     #>AYINT
00001Cr 2  85 06                sta     GOAYINT
00001Er 2  84 07                sty     GOAYINT+1
000020r 2  A9 rr                lda     #<GIVAYF
000022r 2  A0 rr                ldy     #>GIVAYF
000024r 2  85 08                sta     GOGIVEAYF
000026r 2  84 09                sty     GOGIVEAYF+1
000028r 2                   .endif
000028r 2                 .endif
000028r 2  A9 4C                lda     #$4C
00002Ar 2                 .ifdef CONFIG_CBM_ALL
00002Ar 2                       sta     JMPADRS
00002Ar 2                 .endif
00002Ar 2  85 00                sta     GORESTART
00002Cr 2                 .ifdef AIM65
00002Cr 2                       sta     JMPADRS
00002Cr 2                       sta     ATN
00002Cr 2                       sta     GOSTROUT
00002Cr 2                 .else
00002Cr 2                 .ifndef CONFIG_CBM_ALL
00002Cr 2  85 03                sta     GOSTROUT
00002Er 2  85 A9                sta     JMPADRS
000030r 2                 .endif
000030r 2                 .ifdef SYM1
000030r 2                       sta     USR1
000030r 2                       sta     USR3
000030r 2                       sta     USR2
000030r 2                 .endif
000030r 2                 .if (!.def(CONFIG_RAM)) && (!.def(CONFIG_CBM_ALL))
000030r 2  85 00                sta     USR
000032r 2                 .endif
000032r 2                 .endif
000032r 2               
000032r 2                 .ifndef CONFIG_RAM
000032r 2                   .ifdef APPLE
000032r 2                         lda     #<USR_FUNC
000032r 2                         ldy     #>USR_FUNC
000032r 2                   .else
000032r 2  A9 rr                  lda     #<IQERR
000034r 2  A0 rr                  ldy     #>IQERR
000036r 2                   .endif
000036r 2                   .ifdef AIM65
000036r 2                         sta     ATN+1
000036r 2                         sty     ATN+2
000036r 2                         sta     GOSTROUT+1
000036r 2                         sty     GOSTROUT+2
000036r 2                   .else
000036r 2  85 01                  sta     USR+1
000038r 2  84 02                  sty     USR+2
00003Ar 2                     .ifdef SYM1
00003Ar 2                         sta     USR1+1
00003Ar 2                         sty     USR1+2
00003Ar 2                         lda     #<DUMPT
00003Ar 2                         ldy     #>DUMPT
00003Ar 2                         sta     USR2+1
00003Ar 2                         sty     USR2+2
00003Ar 2                         lda     #<L8C78
00003Ar 2                         ldy     #>L8C78
00003Ar 2                         sta     USR3+1
00003Ar 2                         sty     USR3+2
00003Ar 2                     .endif
00003Ar 2                   .endif
00003Ar 2                 .endif
00003Ar 2                 .ifndef CBM1
00003Ar 2  A9 28                lda     #WIDTH
00003Cr 2  85 0C                sta     Z17
00003Er 2  A9 1E                lda     #WIDTH2
000040r 2  85 0D                sta     Z18
000042r 2                 .endif
000042r 2               .endif
000042r 2               
000042r 2               ; All non-CONFIG_SMALL versions of BASIC have
000042r 2               ; the same bug here: While the number of bytes
000042r 2               ; to be copied is correct for CONFIG_SMALL,
000042r 2               ; it is one byte short on non-CONFIG_SMALL:
000042r 2               ; It seems the "ldx" value below has been
000042r 2               ; hardcoded. So on these configurations,
000042r 2               ; the last byte of GENERIC_RNDSEED, which
000042r 2               ; is 5 bytes instead of 4, does not get copied -
000042r 2               ; which is nothing major, because it is just
000042r 2               ; the least significant 8 bits of the mantissa
000042r 2               ; of the random number seed.
000042r 2               ; KBD added three bytes to CHRGET and removed
000042r 2               ; the random number seed, but only adjusted
000042r 2               ; the number of bytes by adding 3 - this
000042r 2               ; copies four bytes too many, which is no
000042r 2               ; problem.
000042r 2               .ifdef CONFIG_SMALL
000042r 2                 .ifdef KBD
000042r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET+4
000042r 2                 .else
000042r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
000042r 2                 .endif
000042r 2               .else
000042r 2  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET-1 ; XXX
000044r 2               .endif
000044r 2               L4098:
000044r 2  BD rr rr             lda     GENERIC_CHRGET-1,x
000047r 2  95 C7                sta     CHRGET-1,x
000049r 2  CA                   dex
00004Ar 2  D0 F8                bne     L4098
00004Cr 2               .ifdef CONFIG_2
00004Cr 2  A9 03                lda     #$03
00004Er 2  85 A8                sta     DSCLEN
000050r 2               .endif
000050r 2               .ifndef KBD
000050r 2  8A                   txa
000051r 2  85 BD                sta     SHIFTSIGNEXT
000053r 2                 .ifdef CONFIG_CBM_ALL
000053r 2                       sta     CURDVC
000053r 2                 .endif
000053r 2  85 6D                sta     LASTPT+1
000055r 2                 .ifndef AIM65
000055r 2                 .if .defined(CONFIG_NULL) || .defined(CONFIG_PRINTNULLS)
000055r 2                       sta     Z15
000055r 2                 .endif
000055r 2                 .endif
000055r 2                 .ifndef CONFIG_11
000055r 2                       sta     POSX
000055r 2                 .endif
000055r 2  48                   pha
000056r 2  85 6A                sta     Z14
000058r 2                 .ifndef CBM2
000058r 2                  .ifndef AIM65
000058r 2                  .ifndef SYM1
000058r 2                   .ifndef MICROTAN
000058r 2  A9 03                lda     #$03
00005Ar 2  85 A8                sta     DSCLEN
00005Cr 2                   .endif
00005Cr 2                  .endif
00005Cr 2                  .endif
00005Cr 2                   .ifndef CONFIG_11
00005Cr 2                       lda     #$2C
00005Cr 2                       sta     LINNUM+1
00005Cr 2                   .endif
00005Cr 2  20 rr rr             jsr     CRDO
00005Fr 2                 .endif
00005Fr 2                 .ifdef CBM2
00005Fr 2                       inx
00005Fr 2                       stx     INPUTBUFFER-3
00005Fr 2                       stx     INPUTBUFFER-4
00005Fr 2                 .endif
00005Fr 2                 .ifdef APPLE
00005Fr 2                       lda     #$01
00005Fr 2                       sta     INPUTBUFFER-3
00005Fr 2                       sta     INPUTBUFFER-4
00005Fr 2                 .endif
00005Fr 2  A2 6E                ldx     #TEMPST
000061r 2  86 6B                stx     TEMPPT
000063r 2               .ifndef CONFIG_CBM_ALL
000063r 2  A9 rr                lda     #<QT_MEMORY_SIZE
000065r 2  A0 rr                ldy     #>QT_MEMORY_SIZE
000067r 2  20 rr rr             jsr     STROUT
00006Ar 2                 .ifdef APPLE
00006Ar 2                       jsr     INLINX
00006Ar 2                 .else
00006Ar 2  20 rr rr             jsr     NXIN
00006Dr 2                 .endif
00006Dr 2  86 CF                stx     TXTPTR
00006Fr 2  84 D0                sty     TXTPTR+1
000071r 2  20 C8 00             jsr     CHRGET
000074r 2                 .ifndef AIM65
000074r 2                   .ifndef SYM1
000074r 2  C9 41                cmp     #$41
000076r 2  F0 88                beq     PR_WRITTEN_BY
000078r 2                   .endif
000078r 2                 .endif
000078r 2  A8                   tay
000079r 2  D0 25                bne     L40EE
00007Br 2               .endif
00007Br 2               .ifndef CBM2
00007Br 2  A9 00                lda     #<RAMSTART2
00007Dr 2               .endif
00007Dr 2  A0 04                ldy     #>RAMSTART2
00007Fr 2               .ifdef CONFIG_2
00007Fr 2  85 80                sta     TXTTAB
000081r 2  84 81                sty     TXTTAB+1
000083r 2               .endif
000083r 2  85 0E                sta     LINNUM
000085r 2  84 0F                sty     LINNUM+1
000087r 2               .ifdef CBM2
000087r 2               		tay
000087r 2               .else
000087r 2  A0 00                ldy     #$00
000089r 2               .endif
000089r 2               L40D7:
000089r 2  E6 0E                inc     LINNUM
00008Br 2  D0 02                bne     L40DD
00008Dr 2  E6 0F                inc     LINNUM+1
00008Fr 2               .ifdef CBM1
00008Fr 2               ; CBM: hard RAM top limit is $8000
00008Fr 2                       lda     LINNUM+1
00008Fr 2                       cmp     #$80
00008Fr 2                       beq     L40FA
00008Fr 2               .endif
00008Fr 2               .ifdef CBM2
00008Fr 2               ; optimized version of the CBM1 code
00008Fr 2                       bmi     L40FA
00008Fr 2               .endif
00008Fr 2               .if .def(AIM65)
00008Fr 2               ; AIM65: hard RAM top limit is $A000
00008Fr 2                       lda     LINNUM+1
00008Fr 2                       cmp     #$A0
00008Fr 2                       beq     L40FA
00008Fr 2               .endif
00008Fr 2               L40DD:
00008Fr 2               .ifdef CONFIG_2
00008Fr 2  A9 55                lda     #$55 ; 01010101 / 10101010
000091r 2               .else
000091r 2                       lda     #$92 ; 10010010 / 00100100
000091r 2               .endif
000091r 2  91 0E                sta     (LINNUM),y
000093r 2  D1 0E                cmp     (LINNUM),y
000095r 2  D0 15                bne     L40FA
000097r 2  0A                   asl     a
000098r 2  91 0E                sta     (LINNUM),y
00009Ar 2  D1 0E                cmp     (LINNUM),y
00009Cr 2               .ifdef CONFIG_CBM_ALL
00009Cr 2                       beq     L40D7
00009Cr 2               .else
00009Cr 2                 .ifndef CONFIG_11
00009Cr 2                       beq     L40D7; old: faster
00009Cr 2                       bne     L40FA
00009Cr 2                 .else
00009Cr 2  D0 0E                bne     L40FA; new: slower
00009Er 2  F0 E9                beq     L40D7
0000A0r 2                 .endif
0000A0r 2               L40EE:
0000A0r 2  20 CE 00             jsr     CHRGOT
0000A3r 2  20 rr rr             jsr     LINGET
0000A6r 2  A8                   tay
0000A7r 2  F0 03                beq     L40FA
0000A9r 2  4C rr rr             jmp     SYNERR
0000ACr 2               .endif
0000ACr 2               L40FA:
0000ACr 2  A5 0E                lda     LINNUM
0000AEr 2  A4 0F                ldy     LINNUM+1
0000B0r 2  85 8C                sta     MEMSIZ
0000B2r 2  84 8D                sty     MEMSIZ+1
0000B4r 2               .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
0000B4r 2  85 88                sta     FRETOP
0000B6r 2  84 89                sty     FRETOP+1
0000B8r 2               .endif
0000B8r 2               L4106:
0000B8r 2               .ifndef CONFIG_CBM_ALL
0000B8r 2                 .ifdef APPLE
0000B8r 2                       lda     #$FF
0000B8r 2                       jmp     L2829
0000B8r 2                       .word	STROUT ; PATCH!
0000B8r 2                       jsr     NXIN
0000B8r 2                 .else
0000B8r 2  A9 rr                lda     #<QT_TERMINAL_WIDTH
0000BAr 2  A0 rr                ldy     #>QT_TERMINAL_WIDTH
0000BCr 2  20 rr rr             jsr     STROUT
0000BFr 2  20 rr rr             jsr     NXIN
0000C2r 2                 .endif
0000C2r 2  86 CF                stx     TXTPTR
0000C4r 2  84 D0                sty     TXTPTR+1
0000C6r 2  20 C8 00             jsr     CHRGET
0000C9r 2  A8                   tay
0000CAr 2  F0 1C                beq     L4136
0000CCr 2  20 rr rr             jsr     LINGET
0000CFr 2  A5 0F                lda     LINNUM+1
0000D1r 2  D0 E5                bne     L4106
0000D3r 2  A5 0E                lda     LINNUM
0000D5r 2  C9 10                cmp     #$10
0000D7r 2  90 DF                bcc     L4106
0000D9r 2               L2829:
0000D9r 2  85 0C                sta     Z17
0000DBr 2               L4129:
0000DBr 2                 .ifdef AIM65
0000DBr 2                       sbc     #$0A
0000DBr 2                 .else
0000DBr 2  E9 0E                sbc     #$0E
0000DDr 2                 .endif
0000DDr 2  B0 FC                bcs     L4129
0000DFr 2  49 FF                eor     #$FF
0000E1r 2                 .ifdef AIM65
0000E1r 2                       sbc     #$08
0000E1r 2                 .else
0000E1r 2  E9 0C                sbc     #$0C
0000E3r 2                 .endif
0000E3r 2  18                   clc
0000E4r 2  65 0C                adc     Z17
0000E6r 2  85 0D                sta     Z18
0000E8r 2               .endif
0000E8r 2               L4136:
0000E8r 2               .ifdef CONFIG_RAM
0000E8r 2                       lda     #<QT_WANT
0000E8r 2                       ldy     #>QT_WANT
0000E8r 2                       jsr     STROUT
0000E8r 2                       jsr     NXIN
0000E8r 2                       stx     TXTPTR
0000E8r 2                       sty     TXTPTR+1
0000E8r 2                       jsr     CHRGET
0000E8r 2                       ldx     #<RAMSTART1
0000E8r 2                       ldy     #>RAMSTART1
0000E8r 2                       cmp     #'Y'
0000E8r 2                       beq     L4183
0000E8r 2                       cmp     #'A'
0000E8r 2                       beq     L4157
0000E8r 2                       cmp     #'N'
0000E8r 2                       bne     L4136
0000E8r 2               L4157:
0000E8r 2                       ldx     #<IQERR
0000E8r 2                       ldy     #>IQERR
0000E8r 2                       stx     UNFNC_ATN
0000E8r 2                       sty     UNFNC_ATN+1
0000E8r 2                       ldx     #<ATN	; overwrite starting
0000E8r 2                       ldy     #>ATN	; with ATN
0000E8r 2                       cmp     #'A'
0000E8r 2                       beq     L4183
0000E8r 2                       ldx     #<IQERR
0000E8r 2                       ldy     #>IQERR
0000E8r 2                       stx     UNFNC_COS
0000E8r 2                       sty     UNFNC_COS+1
0000E8r 2                       stx     UNFNC_TAN
0000E8r 2                       sty     UNFNC_TAN+1
0000E8r 2                       stx     UNFNC_SIN
0000E8r 2                       sty     UNFNC_SIN+1
0000E8r 2                       ldx     #<SIN_COS_TAN_ATN	; overwrite
0000E8r 2                       ldy     #>SIN_COS_TAN_ATN	; all of trig.s
0000E8r 2               L4183:
0000E8r 2               .else
0000E8r 2  A2 00                ldx     #<RAMSTART2
0000EAr 2  A0 04                ldy     #>RAMSTART2
0000ECr 2               .endif
0000ECr 2  86 80                stx     TXTTAB
0000EEr 2  84 81                sty     TXTTAB+1
0000F0r 2  A0 00                ldy     #$00
0000F2r 2  98                   tya
0000F3r 2  91 80                sta     (TXTTAB),y
0000F5r 2  E6 80                inc     TXTTAB
0000F7r 2               .ifndef CBM2
0000F7r 2  D0 02                bne     L4192
0000F9r 2  E6 81                inc     TXTTAB+1
0000FBr 2               L4192:
0000FBr 2               .endif
0000FBr 2               .if CONFIG_SCRTCH_ORDER = 1
0000FBr 2                       jsr     SCRTCH
0000FBr 2               .endif
0000FBr 2  A5 80                lda     TXTTAB
0000FDr 2  A4 81                ldy     TXTTAB+1
0000FFr 2  20 rr rr             jsr     REASON
000102r 2               .ifdef CBM2
000102r 2                       lda     #<QT_BASIC
000102r 2                       ldy     #>QT_BASIC
000102r 2                       jsr     STROUT
000102r 2               .else
000102r 2  20 rr rr             jsr     CRDO
000105r 2               .endif
000105r 2  A5 8C                lda     MEMSIZ
000107r 2  38                   sec
000108r 2  E5 80                sbc     TXTTAB
00010Ar 2  AA                   tax
00010Br 2  A5 8D                lda     MEMSIZ+1
00010Dr 2  E5 81                sbc     TXTTAB+1
00010Fr 2  20 rr rr             jsr     LINPRT
000112r 2  A9 rr                lda     #<QT_BYTES_FREE
000114r 2  A0 rr                ldy     #>QT_BYTES_FREE
000116r 2  20 rr rr             jsr     STROUT
000119r 2               .if CONFIG_SCRTCH_ORDER = 2
000119r 2  20 rr rr             jsr     SCRTCH
00011Cr 2               .endif
00011Cr 2               .ifdef CONFIG_CBM_ALL
00011Cr 2                       jmp     RESTART
00011Cr 2               .elseif .def(AIM65)
00011Cr 2                       lda     #<CRDO
00011Cr 2                       ldy     #>CRDO
00011Cr 2                       sta     GORESTART+1
00011Cr 2                       sty     GORESTART+2
00011Cr 2                       jmp     RESTART
00011Cr 2               .else
00011Cr 2  A9 rr                lda     #<STROUT
00011Er 2  A0 rr                ldy     #>STROUT
000120r 2  85 04                sta     GOSTROUT+1
000122r 2  84 05                sty     GOSTROUT+2
000124r 2                 .if CONFIG_SCRTCH_ORDER = 3
000124r 2                        jsr     SCRTCH
000124r 2                 .endif
000124r 2  A9 rr                lda     #<RESTART
000126r 2  A0 rr                ldy     #>RESTART
000128r 2  85 01                sta     GORESTART+1
00012Ar 2  84 02                sty     GORESTART+2
00012Cr 2  6C 01 00             jmp     (GORESTART+1)
00012Fr 2               .endif
00012Fr 2               
00012Fr 2                 .if .def(CONFIG_RAM) || .def(OSI)
00012Fr 2               ; OSI is compiled for ROM, but includes
00012Fr 2               ; this unused string
00012Fr 2               QT_WANT:
00012Fr 2                       .byte   "WANT SIN-COS-TAN-ATN"
00012Fr 2                       .byte   0
00012Fr 2                 .endif
00012Fr 2               QT_WRITTEN_BY:
00012Fr 2                 .ifndef CONFIG_CBM_ALL
00012Fr 2                 .if !(.def(AIM65) || .def(SYM1))
00012Fr 2                   .ifdef APPLE
00012Fr 2               		asc80 "COPYRIGHT 1977 BY MICROSOFT CO"
00012Fr 2               		.byte	CR,0
00012Fr 2                   .else
00012Fr 2  0D 0A 0C             .byte   CR,LF,$0C ; FORM FEED
000132r 2                     .ifndef CONFIG_11
000132r 2                       .byte   "WRITTEN BY RICHARD W. WEILAND."
000132r 2                     .else
000132r 2  57 52 49 54          .byte   "WRITTEN BY WEILAND & GATES"
000136r 2  54 45 4E 20  
00013Ar 2  42 59 20 57  
00014Cr 2                     .endif
00014Cr 2  0D 0A 00             .byte   CR,LF,0
00014Fr 2                   .endif
00014Fr 2                  .endif
00014Fr 2               QT_MEMORY_SIZE:
00014Fr 2  4D 45 4D 4F          .byte   "MEMORY SIZE"
000153r 2  52 59 20 53  
000157r 2  49 5A 45     
00015Ar 2  00                   .byte   0
00015Br 2               QT_TERMINAL_WIDTH:
00015Br 2                   .if !(.def(AIM65) || .def(SYM1))
00015Br 2  54 45 52 4D          .byte   "TERMINAL "
00015Fr 2  49 4E 41 4C  
000163r 2  20           
000164r 2                   .endif
000164r 2  57 49 44 54          .byte   "WIDTH"
000168r 2  48           
000169r 2  00                   .byte   0
00016Ar 2                 .endif
00016Ar 2               QT_BYTES_FREE:
00016Ar 2  20 42 59 54          .byte   " BYTES FREE"
00016Er 2  45 53 20 46  
000172r 2  52 45 45     
000175r 2                 .ifdef CBM1
000175r 2                 .elseif .def(CBM2)
000175r 2                       .byte   CR,0
000175r 2                 .elseif .def(APPLE)
000175r 2                       .byte   0
000175r 2                 .else
000175r 2  0D 0A 0D 0A          .byte   CR,LF,CR,LF
000179r 2                 .endif
000179r 2               QT_BASIC:
000179r 2                 .ifdef OSI
000179r 2                       .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
000179r 2                 .endif
000179r 2                 .ifdef KIM
000179r 2                       .byte   "MOS TECH 6502 BASIC V1.1"
000179r 2                 .endif
000179r 2                 .ifdef MICROTAN
000179r 2                       .byte   "MICROTAN BASIC"
000179r 2                 .endif
000179r 2                 .ifdef AIM65
000179r 2                       .byte   "  AIM 65 BASIC V1.1"
000179r 2                 .endif
000179r 2                 .ifdef SYM1
000179r 2                       .byte   "BASIC V1.1"
000179r 2                 .endif
000179r 2                 .ifdef CBM1
000179r 2                       .byte   $13 ; HOME
000179r 2                       .byte   "*** COMMODORE BASIC ***"
000179r 2                       .byte   $11,$11,$11,0 ; DOWN/DOWN/DOWN
000179r 2                 .endif
000179r 2                 .ifdef CBM2
000179r 2                       .byte   "### COMMODORE BASIC ###"
000179r 2                       .byte   CR,CR,0
000179r 2                 .endif
000179r 2                 .ifdef APPLE
000179r 2                       .byte   LF,CR,LF
000179r 2               		.byte	"APPLE BASIC V1.1"
000179r 2                 .endif
000179r 2                 .ifndef CONFIG_CBM_ALL
000179r 2  0D 0A                .byte   CR,LF
00017Br 2                   .ifdef MICROTAN
00017Br 2                       .byte   "(C) 1980 MICROSOFT"
00017Br 2                   .elseif .def(AIM65)
00017Br 2                       .byte   0
00017Br 2                       .byte   "(C) 1978 MICROSOFT"
00017Br 2                   .elseif .def(SYM1)
00017Br 2                       .byte   "COPYRIGHT 1978 SYNERTEK SYSTEMS CORP."
00017Br 2                   .else
00017Br 2  43 4F 50 59          .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
00017Fr 2  52 49 47 48  
000183r 2  54 20 31 39  
00019Ar 2                   .endif
00019Ar 2  0D 0A                .byte   CR,LF
00019Cr 2                     .ifndef AIM65
00019Cr 2  00                   .byte   0
00019Dr 2                     .endif
00019Dr 2                 .endif
00019Dr 2               .endif
00019Dr 2               
00019Dr 1               .include "extra.s"
00019Dr 2               .segment "EXTRA"
000000r 2               
000000r 2               .ifdef KIM
000000r 2               .include "kim_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_CBM1_PATCHES
000000r 2               .include "cbm1_patches.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef KBD
000000r 2               .include "kbd_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef APPLE
000000r 2               .include "apple_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef MICROTAN
000000r 2               .include "microtan_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef AIM65
000000r 2               .include "aim65_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef SYM1
000000r 2                       .byte   0,0,0
000000r 2               .endif
000000r 2               
000000r 2               .ifdef hmc56
000000r 2               .include "bios.s"
000000r 3               .setcpu "6502"
000000r 3               .debuginfo
000000r 3               .segment "BIOS"
000000r 3               
000000r 3               LOAD:
000000r 3  60           	rts
000001r 3               SAVE:
000001r 3  60           	rts
000002r 3               
000002r 3               .include "uart.s"
000002r 4               ;Uart registers
000002r 4               UART = $C000    ;;Uart address
000002r 4               RBR  = $C000    ;;receiver buffer register (read only)
000002r 4               THR  = $C000    ;;transmitter holding register (write only)
000002r 4               IER  = $C001    ;;interrupt enable register
000002r 4               IIR  = $C002    ;;interrupt identification register
000002r 4               FCR  = $C002    ;;FIFO control register
000002r 4               LCR  = $C003    ;;line control register
000002r 4               MCR  = $C004    ;;modem control register
000002r 4               ULSR = $C005    ;;line status register
000002r 4               MSR  = $C006    ;;modem status register
000002r 4               DLL  = $C000    ;;divisor latch LSB (if DLAB=1)
000002r 4               DLM  = $C001    ;;divisor latch MSB (if DLAB=1)
000002r 4               
000002r 4               ;FCR (FIFO Control) constants
000002r 4               NO_FIFO = %00000000
000002r 4               FIFO_ENABLE = %00000111
000002r 4               
000002r 4               ;LCR (Line Control) constants
000002r 4               LCR_8N1 = %00000011
000002r 4               DLAB = %10000000
000002r 4               
000002r 4               ;LSR (Line Status) constants
000002r 4               DATA_READY = %00000001
000002r 4               OVERRUN_ERR = %00000010
000002r 4               PARITY_ERR = %00000100
000002r 4               FRAMING_ERR = %00001000
000002r 4               BREAK_INT = %00010000
000002r 4               THR_EMPTY = %00100000
000002r 4               TX_EMPTY = %01000000
000002r 4               RX_FIFO_ERR = %10000000
000002r 4               
000002r 4               ;IER (Interrupt Enable) constants
000002r 4               POLLED_MODE = %00000000
000002r 4               DATA_INT = %00000001
000002r 4               THR_EMPTY_INT = %00000010
000002r 4               ERROR_INT = %00000100
000002r 4               MODEM_STATUS_INT = %00001000
000002r 4               
000002r 4               ;IIR (Interrupt Identification) constants
000002r 4               IIR_DATA_AVAILABLE = %00000100
000002r 4               IIR_ERROR = %00000110
000002r 4               IIR_CHR_TIMEOUT = %00001100
000002r 4               IIR_THR_EMPTY = %00000010
000002r 4               IIR_MODEM_STATUS = %00000000
000002r 4               
000002r 4               ;DLL/DLM (Divisor Latch) constants
000002r 4               DIV_4800_LO = 13
000002r 4               DIV_4800_HI = 0
000002r 4               
000002r 4               DIV_9600_LO = 12
000002r 4               DIV_9600_HI = 0
000002r 4               
000002r 4               DIV_38400_LO = 3
000002r 4               DIV_38400_HI = 0
000002r 4               
000002r 4               ;zp.uart_flag bits
000002r 4               ERROR_FLAG = %10000000
000002r 4               OVERRUN_FLAG = %10000000
000002r 4               PARITY_ERR_FLAG = %10000000
000002r 4               FRAMING_ERR_FLAG = %10000000
000002r 4               BREAK_INT_FLAG = %10000000
000002r 4               
000002r 4               ;Other constants
000002r 4               UART_BUFFER_SIZE = 16
000002r 4               
000002r 4               ; Constants
000002r 4               .if .not .def(CR)
000002r 4               	CR  = $0D ; Carriage Return
000002r 4               .endif
000002r 4               .if .not .def(CR)
000002r 4               	LF  = $0A ; Line feed
000002r 4               .endif
000002r 4               .if .not .def(Q)
000002r 4               	Q 		= $75
000002r 4               .endif
000002r 4               .if .not .def(T1)
000002r 4               	T1		= $76
000002r 4               .endif
000002r 4               
000002r 4               SP  = $20 ; Space
000002r 4               ESC = $1B ; Escape
000002r 4               
000002r 4               UART_INIT:
000002r 4  20 rr rr     	jsr init_9600
000005r 4  60           	rts
000006r 4               
000006r 4               PrintString:
000006r 4  86 76        		STX T1
000008r 4  84 77        		STY T1+1
00000Ar 4  A0 00        		LDY #0
00000Cr 4  B1 76        @loop:	LDA (T1),Y
00000Er 4  F0 06        		BEQ done
000010r 4  20 rr rr     		JSR CHROUT
000013r 4  C8           		INY
000014r 4  D0 F6        		BNE @loop       ; if doesn't branch, string is too long
000016r 4  60           done:	RTS
000017r 4               
000017r 4               ClearScreen:
000017r 4  A9 0C        	lda #12
000019r 4  85 75        	sta Q
00001Br 4               @loop:
00001Br 4  A2 rr         	LDX #<LineClear
00001Dr 4  A0 rr        	LDY #>LineClear
00001Fr 4  20 rr rr     	jsr PrintString
000022r 4  C6 75        	dec Q
000024r 4  D0 F5        	bne @loop
000026r 4  60           	rts
000027r 4               
000027r 4               LineClear:
000027r 4  20 20 20 20  	.byte "                                                                                ",CR,LF,0
00002Br 4  20 20 20 20  
00002Fr 4  20 20 20 20  
00007Ar 4               
00007Ar 4               ;/* ---------------------------------------------------------------------------------------
00007Ar 4               ;Read a byte from the UART into A. Blocks until a byte is available.
00007Ar 4               ;If there was an error, set the C flag.
00007Ar 4               ;C flag clear means a byte was successfully read into A.
00007Ar 4               ;*/
00007Ar 4               CHRIN:
00007Ar 4               read_byte:
00007Ar 4  AD 05 C0     	lda ULSR 													; check the line status register
00007Dr 4  29 1E        	and #(OVERRUN_ERR | PARITY_ERR | FRAMING_ERR | BREAK_INT)	; check for errors
00007Fr 4  F0 05        	beq no_err 													; if no error bits, are set, no error
000081r 4  AD 00 C0     	lda RBR 													; otherwise, there was an error. Clear the error byte
000084r 4  38           	sec 														; set the carry flag to indicate error
000085r 4  60           	rts
000086r 4               
000086r 4               no_err:
000086r 4  AD 05 C0     	lda ULSR 													; reload the line status register
000089r 4               
000089r 4  29 01        	and #DATA_READY
00008Br 4  F0 ED        	beq read_byte 												; if data ready is not set, loop
00008Dr 4               
00008Dr 4  AD 00 C0     	lda RBR 													;// otherwise, we have data! Load it.
000090r 4  18           	clc 														;// clear the carry flag to indicate no error
000091r 4               
000091r 4  60           	rts 														;// return
000092r 4               
000092r 4               
000092r 4               ;---------------------------------------------------------------------------------------
000092r 4               ;Write a byte in A to the UART.
000092r 4               ;Blocks until the UART is ready to send (transmitter holding register is empty)
000092r 4               ;
000092r 4               CHROUT:
000092r 4               write_byte:
000092r 4  48           	pha
000093r 4               wait_for_thr_empty:
000093r 4  AD 05 C0     	lda ULSR
000096r 4  29 20        	and #THR_EMPTY
000098r 4  F0 F9        	beq wait_for_thr_empty 									; loop while the THR is not empty
00009Ar 4  68           	pla
00009Br 4  8D 00 C0     	sta THR 												; send the byte
00009Er 4  20 rr rr     	jsr	delay
0000A1r 4  60           	rts
0000A2r 4               
0000A2r 4               ;---------------------------------------------------------------------------------------
0000A2r 4               ;Initialize the UART
0000A2r 4               ;Uses 8n1 mode with no FIFO and 4800 baud @ 1MHz clock
0000A2r 4               ;
0000A2r 4               init_9600:
0000A2r 4  48               pha
0000A3r 4  A9 80            lda #DLAB
0000A5r 4  8D 03 C0         sta LCR                 ;set the divisor latch access bit (DLAB)
0000A8r 4  A9 0C            lda #DIV_9600_LO
0000AAr 4  8D 00 C0         sta DLL                 ;store divisor low byte (4800 baud @ 1 MHz clock)
0000ADr 4  A9 00            lda #DIV_9600_HI
0000AFr 4  8D 01 C0         sta DLM                 ;store divisor hi byte
0000B2r 4                                           ;set 8 data bits, 1 stop bit, no parity, disable DLAB
0000B2r 4  A9 07            lda #FIFO_ENABLE
0000B4r 4  8D 02 C0         sta FCR                 ;enable the UART FIFO
0000B7r 4  A9 00            lda #POLLED_MODE
0000B9r 4  8D 01 C0         sta IER                 ;disable all interrupts
0000BCr 4  A9 03            lda #LCR_8N1
0000BEr 4  8D 03 C0         sta LCR
0000C1r 4  68               pla
0000C2r 4  60               rts
0000C3r 4               
0000C3r 4               
0000C3r 4               
0000C3r 3               .include "delay.s"
0000C3r 4               ;-----------------------------------------------------------------------------------------
0000C3r 4               ; Delay
0000C3r 4               ;cpu clock..: 1.843.200 hz
0000C3r 4               ;period.....: 0,542 ns
0000C3r 4               ;deley total: 1,0 ms
0000C3r 4               delay:
0000C3r 4  A2 CD        	ldx  #$CD   ; (2 cycles)
0000C5r 4               delay1:
0000C5r 4  EA           	nop			; (2 cycles) 1us
0000C6r 4  CA           	dex         ; (2 cycles) 1us
0000C7r 4  D0 FC        	bne  delay1 ; (3 cycles in loop, 2 cycles at end) 1,5us in loop, 1us at end
0000C9r 4  60           	rts
0000CAr 4               
0000CAr 3               .include "wozmon.s"
0000CAr 4               ;  The WOZ Monitor for the Apple 1
0000CAr 4               ;  Written by Steve Wozniak in 1976
0000CAr 4               .setcpu "6502"
0000CAr 4               .segment "WOZMON"
000000r 4               
000000r 4               .setcpu "65C02"
000000r 4               .segment "WOZMON"
000000r 4               
000000r 4               XAML		= $24                   ; Last "opened" location Low
000000r 4               XAMH		= $25                   ; Last "opened" location High
000000r 4               STL		= $26                   ; Store address Low
000000r 4               STH		= $27                   ; Store address High
000000r 4               L		= $28                   ; Hex value parsing Low
000000r 4               H		= $29                   ; Hex value parsing High
000000r 4               YSAV		= $2A                   ; Used to see if hex value is given
000000r 4               MODE		= $2B                   ; $00=XAM, $7F=STOR, $AE=BLOCK XAM
000000r 4               
000000r 4               IN		= $0200			; Input buffer
000000r 4               
000000r 4               RESET:
000000r 4  D8                           CLD                     ; Clear decimal arithmetic mode.
000001r 4  58                           CLI
000002r 4               
000002r 4                               ;LDA     #$1F            ; 8-N-1, 19200 bps
000002r 4                               ;STA     ACIA_CTRL
000002r 4                               ;LDY     #$8B            ; No parity, no echo, no interrupts.
000002r 4                               ;STY     ACIA_CMD
000002r 4               
000002r 4  20 rr rr                     JSR     UART_INIT
000005r 4               
000005r 4               NOTCR:
000005r 4  C9 08                        CMP     #$08            ; Backspace key?
000007r 4  F0 18                        BEQ     BACKSPACE       ; Yes.
000009r 4  C9 1B                        CMP     #$1B            ; ESC?
00000Br 4  F0 03                        BEQ     ESCAPE          ; Yes.
00000Dr 4  C8                           INY                     ; Advance text index.
00000Er 4  10 14                        BPL     NEXTCHAR        ; Auto ESC if line longer than 127.
000010r 4               
000010r 4               ESCAPE:
000010r 4  A9 5C                        LDA     #$5C            ; "\".
000012r 4  20 rr rr                     JSR     ECHO            ; Output it.
000015r 4               
000015r 4               GETLINE:
000015r 4  A9 0D                        LDA     #$0D            ; Send CR
000017r 4  20 rr rr                     JSR     ECHO
00001Ar 4  A9 0A                        LDA     #$0A            ; Send LF
00001Cr 4  20 rr rr                     JSR     ECHO
00001Fr 4               
00001Fr 4  A0 01                        LDY     #$01            ; Initialize text index.
000021r 4  88           BACKSPACE:      DEY                     ; Back up text index.
000022r 4  30 F1                        BMI     GETLINE         ; Beyond start of line, reinitialize.
000024r 4               
000024r 4               NEXTCHAR:
000024r 4  20 rr rr                     JSR     CHRIN
000027r 4                               ;LDA     ACIA_STATUS     ; Check status.
000027r 4                               ;AND     #$08            ; Key ready?
000027r 4                               ;BEQ     NEXTCHAR        ; Loop until ready.
000027r 4                               ;LDA     ACIA_DATA       ; Load character. B7 will be '0'.
000027r 4               
000027r 4  99 00 02                     STA     IN,Y            ; Add to text buffer.
00002Ar 4  20 rr rr                     JSR     ECHO            ; Display character.
00002Dr 4  C9 0D                        CMP     #$0D            ; CR?
00002Fr 4  D0 D4                        BNE     NOTCR           ; No.
000031r 4               
000031r 4  A0 FF                        LDY     #$FF            ; Reset text index.
000033r 4  A9 00                        LDA     #$00            ; For XAM mode.
000035r 4  AA                           TAX                     ; X=0.
000036r 4               SETBLOCK:
000036r 4  0A                           ASL
000037r 4               SETSTOR:
000037r 4  0A                           ASL                     ; Leaves $7B if setting STOR mode.
000038r 4               SETMODE:
000038r 4  85 2B                        STA     MODE            ; $00 = XAM, $74 = STOR, $B8 = BLOK XAM.
00003Ar 4               BLSKIP:
00003Ar 4  C8                           INY                     ; Advance text index.
00003Br 4               NEXTITEM:
00003Br 4  B9 00 02                     LDA     IN,Y            ; Get character.
00003Er 4  C9 0D                        CMP     #$0D            ; CR?
000040r 4  F0 D3                        BEQ     GETLINE         ; Yes, done this line.
000042r 4  C9 2E                        CMP     #$2E            ; "."?
000044r 4  90 F4                        BCC     BLSKIP          ; Skip delimiter.
000046r 4  F0 EE                        BEQ     SETBLOCK        ; Set BLOCK XAM mode.
000048r 4  C9 3A                        CMP     #$3A            ; ":"?
00004Ar 4  F0 EB                        BEQ     SETSTOR         ; Yes, set STOR mode.
00004Cr 4  C9 52                        CMP     #$52            ; "R"?
00004Er 4  F0 3B                        BEQ     RUNPROG         ; Yes, run user program.
000050r 4  86 28                        STX     L               ; $00 -> L.
000052r 4  86 29                        STX     H               ;    and H.
000054r 4  84 2A                        STY     YSAV            ; Save Y for comparison
000056r 4               
000056r 4               NEXTHEX:
000056r 4  B9 00 02                     LDA     IN,Y            ; Get character for hex test.
000059r 4  49 30                        EOR     #$30            ; Map digits to $0-9.
00005Br 4  C9 0A                        CMP     #$0A            ; Digit?
00005Dr 4  90 06                        BCC     DIG             ; Yes.
00005Fr 4  69 88                        ADC     #$88            ; Map letter "A"-"F" to $FA-FF.
000061r 4  C9 FA                        CMP     #$FA            ; Hex letter?
000063r 4  90 11                        BCC     NOTHEX          ; No, character not hex.
000065r 4               DIG:
000065r 4  0A                           ASL
000066r 4  0A                           ASL                     ; Hex digit to MSD of A.
000067r 4  0A                           ASL
000068r 4  0A                           ASL
000069r 4               
000069r 4  A2 04                        LDX     #$04            ; Shift count.
00006Br 4               HEXSHIFT:
00006Br 4  0A                           ASL                     ; Hex digit left, MSB to carry.
00006Cr 4  26 28                        ROL     L               ; Rotate into LSD.
00006Er 4  26 29                        ROL     H               ; Rotate into MSD's.
000070r 4  CA                           DEX                     ; Done 4 shifts?
000071r 4  D0 F8                        BNE     HEXSHIFT        ; No, loop.
000073r 4  C8                           INY                     ; Advance text index.
000074r 4  D0 E0                        BNE     NEXTHEX         ; Always taken. Check next character for hex.
000076r 4               
000076r 4               NOTHEX:
000076r 4  C4 2A                        CPY     YSAV            ; Check if L, H empty (no hex digits).
000078r 4  F0 96                        BEQ     ESCAPE          ; Yes, generate ESC sequence.
00007Ar 4               
00007Ar 4  24 2B                        BIT     MODE            ; Test MODE byte.
00007Cr 4  50 10                        BVC     NOTSTOR         ; B6=0 is STOR, 1 is XAM and BLOCK XAM.
00007Er 4               
00007Er 4  A5 28                        LDA     L               ; LSD's of hex data.
000080r 4  81 26                        STA     (STL,X)         ; Store current 'store index'.
000082r 4  E6 26                        INC     STL             ; Increment store index.
000084r 4  D0 B5                        BNE     NEXTITEM        ; Get next item (no carry).
000086r 4  E6 27                        INC     STH             ; Add carry to 'store index' high order.
000088r 4  4C rr rr     TONEXTITEM:     JMP     NEXTITEM        ; Get next command item.
00008Br 4               
00008Br 4               RUNPROG:
00008Br 4  6C 24 00                     JMP     (XAML)          ; Run at current XAM index.
00008Er 4               
00008Er 4               NOTSTOR:
00008Er 4  30 30                        BMI     XAMNEXT         ; B7 = 0 for XAM, 1 for BLOCK XAM.
000090r 4               
000090r 4  A2 02                        LDX     #$02            ; Byte count.
000092r 4  B5 27        SETADR:         LDA     L-1,X           ; Copy hex data to
000094r 4  95 25                        STA     STL-1,X         ;  'store index'.
000096r 4  95 23                        STA     XAML-1,X        ; And to 'XAM index'.
000098r 4  CA                           DEX                     ; Next of 2 bytes.
000099r 4  D0 F7                        BNE     SETADR          ; Loop unless X = 0.
00009Br 4               
00009Br 4               NXTPRNT:
00009Br 4  D0 19                        BNE     PRDATA          ; NE means no address to print.
00009Dr 4  A9 0D                        LDA     #$0D            ; CR.
00009Fr 4  20 rr rr                     JSR     ECHO            ; Output it.
0000A2r 4  A9 0A                        LDA     #$0A            ; LF.
0000A4r 4  20 rr rr                     JSR     ECHO            ; Output it.
0000A7r 4  A5 25                        LDA     XAMH            ; 'Examine index' high-order byte.
0000A9r 4  20 rr rr                     JSR     PRBYTE          ; Output it in hex format.
0000ACr 4  A5 24                        LDA     XAML            ; Low-order 'examine index' byte.
0000AEr 4  20 rr rr                     JSR     PRBYTE          ; Output it in hex format.
0000B1r 4  A9 3A                        LDA     #$3A            ; ":".
0000B3r 4  20 rr rr                     JSR     ECHO            ; Output it.
0000B6r 4               
0000B6r 4               PRDATA:
0000B6r 4  A9 20                        LDA     #$20            ; Blank.
0000B8r 4  20 rr rr                     JSR     ECHO            ; Output it.
0000BBr 4  A1 24                        LDA     (XAML,X)        ; Get data byte at 'examine index'.
0000BDr 4  20 rr rr                     JSR     PRBYTE          ; Output it in hex format.
0000C0r 4  86 2B        XAMNEXT:        STX     MODE            ; 0 -> MODE (XAM mode).
0000C2r 4  A5 24                        LDA     XAML
0000C4r 4  C5 28                        CMP     L               ; Compare 'examine index' to hex data.
0000C6r 4  A5 25                        LDA     XAMH
0000C8r 4  E5 29                        SBC     H
0000CAr 4  B0 BC                        BCS     TONEXTITEM      ; Not less, so no more data to output.
0000CCr 4               
0000CCr 4  E6 24                        INC     XAML
0000CEr 4  D0 02                        BNE     MOD8CHK         ; Increment 'examine index'.
0000D0r 4  E6 25                        INC     XAMH
0000D2r 4               
0000D2r 4               MOD8CHK:
0000D2r 4  A5 24                        LDA     XAML            ; Check low-order 'examine index' byte
0000D4r 4  29 07                        AND     #$07            ; For MOD 8 = 0
0000D6r 4  10 C3                        BPL     NXTPRNT         ; Always taken.
0000D8r 4               
0000D8r 4               PRBYTE:
0000D8r 4  48                           PHA                     ; Save A for LSD.
0000D9r 4  4A                           LSR
0000DAr 4  4A                           LSR
0000DBr 4  4A                           LSR                     ; MSD to LSD position.
0000DCr 4  4A                           LSR
0000DDr 4  20 rr rr                     JSR     PRHEX           ; Output hex digit.
0000E0r 4  68                           PLA                     ; Restore A.
0000E1r 4               
0000E1r 4               PRHEX:
0000E1r 4  29 0F                        AND     #$0F            ; Mask LSD for hex print.
0000E3r 4  09 30                        ORA     #$30            ; Add "0".
0000E5r 4  C9 3A                        CMP     #$3A            ; Digit?
0000E7r 4  90 02                        BCC     ECHO            ; Yes, output it.
0000E9r 4  69 06                        ADC     #$06            ; Add offset for letter.
0000EBr 4               
0000EBr 4               ECHO:
0000EBr 4  20 rr rr                     JSR     CHROUT
0000EEr 4               ;                STA     ACIA_DATA       ; Output character.
0000EEr 4               ;                PHA                     ; Save A.
0000EEr 4               ;                LDA     #$FF            ; Initialize delay loop.
0000EEr 4               ;TXDELAY:        DEC                     ; Decrement A.
0000EEr 4               ;                BNE     TXDELAY         ; Until A gets to 0.
0000EEr 4               ;                PLA                     ; Restore A.
0000EEr 4  60                           RTS                     ; Return.
0000EFr 4               
0000EFr 4               
0000EFr 4               .segment "RESETVECTOR"
000000r 4               ; Interrupt Vectors
000000r 4               
000000r 4  00 0F                        .WORD $0F00     ; NMI
000002r 4  rr rr                        .WORD RESET     ; RESET
000004r 4  00 00                        .WORD $0000     ; BRK/IRQ
000006r 4               
000006r 3               
000006r 2               .endif
000006r 2               
000006r 1               
