#importonce

.cpu _65c02
.encoding "ascii"


/* --------------------------------------------------------------------------------------- 
Move one byte from address source to address target
*/
.pseudocommand @mov source:target {
    lda source
    sta target
}


/* --------------------------------------------------------------------------------------- 
Get the high byte for a two byte argument
*/
.function _2byteNextArgument(arg) {
    .if (arg.getType() == AT_IMMEDIATE) 
        .return CmdArgument(arg.getType(), >arg.getValue())
    .if (arg.getType() == AT_ABSOLUTE || arg.getType() == AT_ABSOLUTEX || arg.getType() == AT_ABSOLUTEY) 
        .return CmdArgument(arg.getType(), arg.getValue() + 1)
    
    .error "_2byteNextArgument doesn't support indirect addressing!!!"
}

/* --------------------------------------------------------------------------------------- 
Increment a two-byte number stored at arg (little endian)
*/
.pseudocommand @inc2 arg {
    inc arg
    bne done
    inc _2byteNextArgument(arg)
done:
}

/* --------------------------------------------------------------------------------------- 
Decrement a two-byte number stored at arg (little endian)
*/
.pseudocommand @dec2 arg {
    lda arg
    bne no_carry
    dec _2byteNextArgument(arg)
no_carry:
    dec arg
}



/* --------------------------------------------------------------------------------------- 
Ensure arg is no greater than val
*/
.pseudocommand @clamp_max2 arg:maxval {
    .var val = maxval.getValue()
    lda _2byteNextArgument(arg)
    cmp #(>val)                                         // check the high byte
    bcc done                                            // if high byte of arg is smaller, done
    bne clamp                                           // otherwise, if high byte of arg is bigger, clamp
    lda #(<val)                                         // else, high bytes are equal
    cmp arg                                             // check low byte
    bcs done                                            // if low byte of arg is >= val, done 
clamp:
    lda #(<val)
    sta arg
    lda #(>val)
    sta _2byteNextArgument(arg)
done:
}


/* --------------------------------------------------------------------------------------- 
Ensure arg is no less than val
*/
.pseudocommand @clamp_min2 arg:minval {
    .var val = minval.getValue()
    lda #(>val)
    cmp _2byteNextArgument(arg)                         // check the high byte
    bcc done                                            // if high byte of val is smaller, done
    bne clamp                                           // otherwise, if high byte of val is bigger, clamp
    lda arg                                             // else, high bytes are equal
    cmp #(<val)                                         // check low byte
    bcs done                                            // if low byte of arg >= val , done 
clamp:
    lda #(<val)
    sta arg
    lda #(>val)
    sta _2byteNextArgument(arg)
done:
}


/* --------------------------------------------------------------------------------------- 
Move the two bytes at source and source+1 to target
*/
.pseudocommand @mov2 source:target {
    lda source
    sta target
    lda _2byteNextArgument(source)
    sta _2byteNextArgument(target)
}

/* --------------------------------------------------------------------------------------- 
Add two byte number stored at arg1 to two byte number stored at arg2
Store the result in target, if specified
If no target is given, store the result in arg1 
*/
.pseudocommand @add2 arg1 : arg2 : target {
    .if (target.getType()==AT_NONE) 
    	.eval target = arg1
    clc
    lda arg1
    adc arg2
    sta target
    lda _2byteNextArgument(arg1)
    adc _2byteNextArgument(arg2)
    sta _2byteNextArgument(target)
}

.macro @set_bits(addr, mask) {
    lda #mask
    ora addr
    sta addr
}

.macro @clear_bits(addr, mask) {
    lda #(~mask)
    and addr
    sta addr
}



/* --------------------------------------------------------------------------------------- 
Move a block of <=256 bytes starting at source to target with a constant size
*/
.macro @move_block(source, target, size) {
    .if (size > $100) {
        .error "use move_block_var_size"
    } else {
        pha
        phx
        ldx #size

    loop:
        lda source,x
        sta target,x
        dex
        bne loop

        plx
        pla    
    }
          
}


/* --------------------------------------------------------------------------------------- 
Move a block starting at source to target, with num bytes in size_addr,size_addr+1
*/
.macro @move_block_size_addr(source, target, size_addr) {
    pha
    phx
    phy

    mov2 #0 : zp.counter
    mov2 #source : zp.read_ptr
    mov2 #target : zp.write_ptr

loop:
    mov (zp.read_ptr) : (zp.write_ptr)
    inc2 zp.read_ptr
    inc2 zp.write_ptr
    inc2 zp.counter

    lda zp.counter
    cmp size_addr 
    bcc loop

    lda zp.counter+1 
    cmp size_addr+1
    bcc loop


    ply
    plx
    pla        
}

.pseudocommand @bpt {
    .byte $bb
}

