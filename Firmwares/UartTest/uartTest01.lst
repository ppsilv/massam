ca65 V2.18 - Ubuntu 2.19-1
Main file   : uartTest01.s
Current file: uartTest01.s

000000r 1               .setcpu "6502"
000000r 1               .segment "UART"
000000r 1               
000000r 1               ;Exemplo https://github.com/ppsilv/6502/blob/master/asm/6551acia/jmon.s
000000r 1               
000000r 1               ;Uart registers
000000r 1               RBR  = $C000    ;;receiver buffer register (read only)
000000r 1               THR  = $C000    ;;transmitter holding register (write only)
000000r 1               IER  = $C001    ;;interrupt enable register
000000r 1               IIR  = $C002    ;;interrupt identification register
000000r 1               FCR  = $C002    ;;FIFO control register
000000r 1               LCR  = $C003    ;;line control register
000000r 1               MCR  = $C004    ;;modem control register
000000r 1               ULSR = $C005    ;;line status register
000000r 1               MSR  = $C006    ;;modem status register
000000r 1               DLL  = $C000    ;;divisor latch LSB (if DLAB=1)
000000r 1               DLM  = $C001    ;;divisor latch MSB (if DLAB=1)
000000r 1               
000000r 1               ;FCR (FIFO Control) constants
000000r 1               NO_FIFO = %00000000
000000r 1               FIFO_ENABLE = %00000111
000000r 1               
000000r 1               ;LCR (Line Control) constants
000000r 1               LCR_8N1 = %00000011
000000r 1               DLAB = %10000000
000000r 1               
000000r 1               ;LSR (Line Status) constants
000000r 1               DATA_READY = %00000001
000000r 1               OVERRUN_ERR = %00000010
000000r 1               PARITY_ERR = %00000100
000000r 1               FRAMING_ERR = %00001000
000000r 1               BREAK_INT = %00010000
000000r 1               THR_EMPTY = %00100000
000000r 1               TX_EMPTY = %01000000
000000r 1               RX_FIFO_ERR = %10000000
000000r 1               
000000r 1               ;IER (Interrupt Enable) constants
000000r 1               POLLED_MODE = %00000000
000000r 1               DATA_INT = %00000001
000000r 1               THR_EMPTY_INT = %00000010
000000r 1               ERROR_INT = %00000100
000000r 1               MODEM_STATUS_INT = %00001000
000000r 1               
000000r 1               ;IIR (Interrupt Identification) constants
000000r 1               IIR_DATA_AVAILABLE = %00000100
000000r 1               IIR_ERROR = %00000110
000000r 1               IIR_CHR_TIMEOUT = %00001100
000000r 1               IIR_THR_EMPTY = %00000010
000000r 1               IIR_MODEM_STATUS = %00000000
000000r 1               
000000r 1               ;DLL/DLM (Divisor Latch) constants
000000r 1               DIV_4800_LO = 13
000000r 1               DIV_4800_HI = 0
000000r 1               
000000r 1               DIV_9600_LO = 12
000000r 1               DIV_9600_HI = 0
000000r 1               
000000r 1               DIV_38400_LO = 3
000000r 1               DIV_38400_HI = 0
000000r 1               
000000r 1               
000000r 1               ;zp.uart_flag bits
000000r 1               ERROR_FLAG = %10000000
000000r 1               OVERRUN_FLAG = %10000000
000000r 1               PARITY_ERR_FLAG = %10000000
000000r 1               FRAMING_ERR_FLAG = %10000000
000000r 1               BREAK_INT_FLAG = %10000000
000000r 1               
000000r 1               
000000r 1               ;Other constants
000000r 1               UART_BUFFER_SIZE = 16
000000r 1               
000000r 1               ; Constants
000000r 1               CR  = $0D ; Carriage Return
000000r 1               LF  = $0A ; Line feed
000000r 1               SP  = $20 ; Space
000000r 1               ESC = $1B ; Escape
000000r 1               
000000r 1               ; Page Zero locations
000000r 1               ;Block 0
000000r 1               ;------------------------------------
000000r 1               ;Zero page general-purpose addresses
000000r 1               ;("extra registers" to augment A, X, Y)
000000r 1               
000000r 1               B = $00
000000r 1               C = $01
000000r 1               D = $02
000000r 1               E = $03
000000r 1               F = $04
000000r 1               G = $05
000000r 1               H = $06
000000r 1               I = $07
000000r 1               J = $08
000000r 1               K = $09
000000r 1               L = $0a
000000r 1               M = $0b
000000r 1               N = $0c
000000r 1               O = $0d
000000r 1               P = $0e
000000r 1               Q = $0f
000000r 1               T1   = $35      ; temp variable 1
000000r 1               T2   = $36      ; temp variable 2
000000r 1               SL   = $37      ; start address low byte
000000r 1               SH   = $38      ; start address high byte
000000r 1               EL   = $39      ; end address low byte
000000r 1               EH   = $3A      ; end address high byte
000000r 1               DA   = $3F      ; fill data byte
000000r 1               DL   = $40      ; destination address low byte
000000r 1               DH   = $41      ; destination address high byte
000000r 1               BIN  = $42      ; holds binary value low byte
000000r 1               BINH = $43      ; holds binary value high byte
000000r 1               BCD  = $44      ; holds BCD decimal number
000000r 1               BCD2 = $45      ; holds BCD decimal number
000000r 1               BCD3 = $46      ; holds BCD decimal number
000000r 1               LZ   = $47      ; boolean for leading zero suppression
000000r 1               LAST = $48      ; boolean for leading zero suppression / indicates last byte
000000r 1               
000000r 1               	.macro  sendUart     dado     ; Send a data byte via serial output
000000r 1               		lda     Arg
000000r 1               	.endmacro
000000r 1               
000000r 1               RESET:
000000r 1  78               sei						; No interrupt
000001r 1  D8               cld						; Set decimal
000002r 1  A2 FF            ldx #$ff				; Set stack pointer
000004r 1  9A               txs						;
000005r 1  20 rr rr         jsr init_9600			; Configure uart to 9600 baudrate
000008r 1  20 rr rr         jsr	delay				;No need but why not?
00000Br 1  20 rr rr     	jsr ClearScreen
00000Er 1  A9 18        	lda	#24
000010r 1  85 0E        	sta P
000012r 1               Loop:
000012r 1               ; Display Welcome message
000012r 1  A2 rr        	LDX #<WelcomeMessage
000014r 1  A0 rr        	LDY #>WelcomeMessage
000016r 1  20 rr rr     	JSR PrintString
000019r 1               
000019r 1  20 rr rr     	jsr delay
00001Cr 1               
00001Cr 1  C6 0E        	dec	P
00001Er 1  D0 F2        	bne Loop
000020r 1  20 rr rr     	jsr ClearScreen
000023r 1  A9 18        	lda	#24
000025r 1  85 0E        	sta P
000027r 1  4C rr rr     	jmp Loop		;;Infinit loop
00002Ar 1               
00002Ar 1               PrintString:
00002Ar 1  86 35        		STX T1
00002Cr 1  84 36        		STY T1+1
00002Er 1  A0 00        		LDY #0
000030r 1  B1 35        @loop:	LDA (T1),Y
000032r 1  F0 06        		BEQ done
000034r 1  20 rr rr     		JSR PrintChar
000037r 1  C8           		INY
000038r 1  D0 F6        		BNE @loop       ; if doesn't branch, string is too long
00003Ar 1  60           done:	RTS
00003Br 1               
00003Br 1               ClearScreen:
00003Br 1  A9 18        	lda #24
00003Dr 1  85 0F        	sta Q
00003Fr 1               @loop:
00003Fr 1  A2 rr         	LDX #<LineClear
000041r 1  A0 rr        	LDY #>LineClear
000043r 1  20 rr rr     	jsr PrintString
000046r 1  C6 0F        	dec Q
000048r 1  D0 F5        	bne @loop
00004Ar 1  60           	rts
00004Br 1               
00004Br 1               WelcomeMessage:
00004Br 1  0D 53 50 41  	.byte CR,"SPARTAN - 6502 is alive...",CR,LF,0
00004Fr 1  52 54 41 4E  
000053r 1  20 2D 20 36  
000069r 1               LineClear:
000069r 1  20 20 20 20  	.byte "                                                                                ",CR,LF,0
00006Dr 1  20 20 20 20  
000071r 1  20 20 20 20  
0000BCr 1               
0000BCr 1               ;/* ---------------------------------------------------------------------------------------
0000BCr 1               ;Read a byte from the UART into A. Blocks until a byte is available.
0000BCr 1               ;If there was an error, set the C flag.
0000BCr 1               ;C flag clear means a byte was successfully read into A.
0000BCr 1               ;*/
0000BCr 1               read_byte:
0000BCr 1               
0000BCr 1  AD 05 C0     	lda ULSR 														; check the line status register
0000BFr 1  29 1E        	and #(OVERRUN_ERR | PARITY_ERR | FRAMING_ERR | BREAK_INT) 	; check for errors
0000C1r 1  F0 05        	beq no_err 												  	; if no error bits, are set, no erro	r
0000C3r 1  AD 00 C0     	lda RBR 												  	; otherwise, there was an error. Clear the error byt	e
0000C6r 1  38           	sec 															  	; set the carry flag to indicate erro	r
0000C7r 1  60           	rts
0000C8r 1               
0000C8r 1               no_err:
0000C8r 1  AD 05 C0     	lda ULSR 												; reload the line status register
0000CBr 1  29 01        	and #DATA_READY
0000CDr 1  F0 ED        	beq read_byte 											; if data ready is not set, loop
0000CFr 1  AD 00 C0     	lda RBR 												; otherwise, we have data! Load it.
0000D2r 1  18           	clc 													; clear the carry flag to indicate no error
0000D3r 1  60           	rts 													; return
0000D4r 1               
0000D4r 1               ;-----------------------------------------------------------------------------------------
0000D4r 1               ; Delay
0000D4r 1               delay:
0000D4r 1  A0 FF            ldy  #$ff   ; (2 cycles)
0000D6r 1  A2 FF            ldx  #$ff   ; (2 cycles)
0000D8r 1  CA           delay1: dex         ; (2 cycles)
0000D9r 1  D0 FD            bne  delay1 ; (3 cycles in loop, 2 cycles at end)
0000DBr 1  88               dey         ; (2 cycles)
0000DCr 1  D0 FA            bne  delay1 ; (3 cycles in loop, 2 cycles at end)
0000DEr 1  60           	rts
0000DFr 1               
0000DFr 1               ;/* ---------------------------------------------------------------------------------------
0000DFr 1               ;Write a byte in A to the UART.
0000DFr 1               ;Blocks until the UART is ready to send (transmitter holding register is empty)
0000DFr 1               ;*/
0000DFr 1               PrintChar:
0000DFr 1               write_byte:
0000DFr 1  48           	pha
0000E0r 1               wait_for_thr_empty:
0000E0r 1  AD 05 C0     	lda ULSR
0000E3r 1  29 20        	and #THR_EMPTY
0000E5r 1  F0 F9        	beq wait_for_thr_empty 									; loop while the THR is not empty
0000E7r 1  68           	pla
0000E8r 1  8D 00 C0     	sta THR 												; send the byte
0000EBr 1  60           	rts
0000ECr 1               
0000ECr 1               ;---------------------------------------------------------------------------------------
0000ECr 1               ;Initialize the UART
0000ECr 1               ;Uses 8n1 mode with no FIFO and 4800 baud @ 1MHz clock
0000ECr 1               ;
0000ECr 1               init_9600:
0000ECr 1  48               pha
0000EDr 1  A9 80            lda #DLAB
0000EFr 1  8D 03 C0         sta LCR                 ;set the divisor latch access bit (DLAB)
0000F2r 1  A9 0C            lda #DIV_9600_LO
0000F4r 1  8D 00 C0         sta DLL                 ;store divisor low byte (4800 baud @ 1 MHz clock)
0000F7r 1  A9 00            lda #DIV_9600_HI
0000F9r 1  8D 01 C0         sta DLM                 ;store divisor hi byte
0000FCr 1                                           ;set 8 data bits, 1 stop bit, no parity, disable DLAB
0000FCr 1  A9 07            lda #FIFO_ENABLE
0000FEr 1  8D 02 C0         sta FCR                 ;enable the UART FIFO
000101r 1  A9 00            lda #POLLED_MODE
000103r 1  8D 01 C0         sta IER                 ;disable all interrupts
000106r 1  A9 03            lda #LCR_8N1
000108r 1  8D 03 C0         sta LCR
00010Br 1  68               pla
00010Cr 1  60               rts
00010Dr 1               
00010Dr 1               ;Cpu reset address
00010Dr 1               .segment    "RESETVEC"
000000r 1               
000000r 1  00 0F                    .word   $0F00
000002r 1  rr rr                    .word   RESET
000004r 1  00 00                    .word   $0000
000004r 1               
