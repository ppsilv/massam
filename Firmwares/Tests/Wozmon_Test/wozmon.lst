ca65 V2.18 - Ubuntu 2.19-1
Main file   : wozmon.s
Current file: wozmon.s

000000r 1               .setcpu "65C02"
000000r 1               .segment "WOZMON"
000000r 1               
000000r 1                 ;.org $8000
000000r 1                 ;.org $FEE5
000000r 1               
000000r 1               XAML  = $24                            ; Last "opened" location Low
000000r 1               XAMH  = $25                            ; Last "opened" location High
000000r 1               STL   = $26                            ; Store address Low
000000r 1               STH   = $27                            ; Store address High
000000r 1               L     = $28                            ; Hex value parsing Low
000000r 1               H     = $29                            ; Hex value parsing High
000000r 1               YSAV  = $2A                            ; Used to see if hex value is given
000000r 1               MODE  = $2B                            ; $00=XAM, $7F=STOR, $AE=BLOCK XAM
000000r 1               
000000r 1               INITUART   = $DFFA
000000r 1               WRITE_BYTE = $E035
000000r 1               READ_BYTE  = $E01B
000000r 1               
000000r 1               
000000r 1               IN          = $0200                          ; Input buffer
000000r 1               
000000r 1               RESET:
000000r 1  78           	              SEI						; No interrupt
000001r 1  D8           	              CLD						; Set decimal
000002r 1  A2 FF        	              LDX #$ff				; Set stack pointer
000004r 1  9A           	              TXS
000005r 1               
000005r 1  20 FA DF                     JSR     INITUART
000008r 1               
000008r 1  A9 1B                        LDA     #$1B           ; Begin with escape.
00000Ar 1               
00000Ar 1               
00000Ar 1               NOTCR:
00000Ar 1  C9 08                        CMP     #$08           ; Backspace key?
00000Cr 1  F0 13                        BEQ     BACKSPACE      ; Yes.
00000Er 1  C9 1B                        CMP     #$1B           ; ESC?
000010r 1  F0 03                        BEQ     ESCAPE         ; Yes.
000012r 1  C8                           INY                    ; Advance text index.
000013r 1  10 0F                        BPL     NEXTCHAR       ; Auto ESC if line longer than 127.
000015r 1               
000015r 1               ESCAPE:
000015r 1  A9 5C                        LDA     #$5C           ; "\".
000017r 1  20 rr rr                     JSR     ECHO           ; Output it.
00001Ar 1               
00001Ar 1               GETLINE:
00001Ar 1  A9 0D                        LDA     #$0D           ; Send CR
00001Cr 1  20 rr rr                     JSR     ECHO
00001Fr 1               
00001Fr 1  A0 01                        LDY     #$01           ; Initialize text index.
000021r 1  88           BACKSPACE:      DEY                    ; Back up text index.
000022r 1  30 F6                        BMI     GETLINE        ; Beyond start of line, reinitialize.
000024r 1               
000024r 1               NEXTCHAR:       ;Get next character
000024r 1                               ;LDA     ACIA_STATUS    ; Check status.
000024r 1                               ;AND     #DATA_READY    ; Key ready?
000024r 1                               ;BEQ     NEXTCHAR       ; Loop until ready.
000024r 1                               ;LDA     ACIA_DATA      ; Load character. B7 will be '0'.
000024r 1               
000024r 1  20 1B E0                     JSR     READ_BYTE
000027r 1               
000027r 1  99 00 02                     STA     IN,Y           ; Add to text buffer.
00002Ar 1  20 rr rr                     JSR     ECHO           ; Display character.
00002Dr 1  C9 0D                        CMP     #$0D           ; CR?
00002Fr 1  D0 D9                        BNE     NOTCR          ; No.
000031r 1               
000031r 1  A0 FF                        LDY     #$FF           ; Reset text index.
000033r 1  A9 00                        LDA     #$00           ; For XAM mode.
000035r 1  AA                           TAX                    ; X=0.
000036r 1               SETBLOCK:
000036r 1  0A                           ASL
000037r 1               SETSTOR:
000037r 1  0A                           ASL                    ; Leaves $7B if setting STOR mode.
000038r 1  85 2B                        STA     MODE           ; $00 = XAM, $74 = STOR, $B8 = BLOK XAM.
00003Ar 1               BLSKIP:
00003Ar 1  C8                           INY                    ; Advance text index.
00003Br 1               NEXTITEM:
00003Br 1  B9 00 02                     LDA     IN,Y           ; Get character.
00003Er 1  C9 0D                        CMP     #$0D           ; CR?
000040r 1  F0 D8                        BEQ     GETLINE        ; Yes, done this line.
000042r 1  C9 2E                        CMP     #$2E           ; "."?
000044r 1  90 F4                        BCC     BLSKIP         ; Skip delimiter.
000046r 1  F0 EE                        BEQ     SETBLOCK       ; Set BLOCK XAM mode.
000048r 1  C9 3A                        CMP     #$3A           ; ":"?
00004Ar 1  F0 EB                        BEQ     SETSTOR        ; Yes, set STOR mode.
00004Cr 1  C9 52                        CMP     #$52           ; "R"?
00004Er 1  F0 3B                        BEQ     RUN            ; Yes, run user program.
000050r 1  86 28                        STX     L              ; $00 -> L.
000052r 1  86 29                        STX     H              ;    and H.
000054r 1  84 2A                        STY     YSAV           ; Save Y for comparison
000056r 1               
000056r 1               NEXTHEX:
000056r 1  B9 00 02                     LDA     IN,Y           ; Get character for hex test.
000059r 1  49 30                        EOR     #$30           ; Map digits to $0-9.
00005Br 1  C9 0A                        CMP     #$0A           ; Digit?
00005Dr 1  90 06                        BCC     DIG            ; Yes.
00005Fr 1  69 88                        ADC     #$88           ; Map letter "A"-"F" to $FA-FF.
000061r 1  C9 FA                        CMP     #$FA           ; Hex letter?
000063r 1  90 11                        BCC     NOTHEX         ; No, character not hex.
000065r 1               DIG:
000065r 1  0A                           ASL
000066r 1  0A                           ASL                    ; Hex digit to MSD of A.
000067r 1  0A                           ASL
000068r 1  0A                           ASL
000069r 1               
000069r 1  A2 04                        LDX     #$04           ; Shift count.
00006Br 1               HEXSHIFT:
00006Br 1  0A                           ASL                    ; Hex digit left, MSB to carry.
00006Cr 1  26 28                        ROL     L              ; Rotate into LSD.
00006Er 1  26 29                        ROL     H              ; Rotate into MSD's.
000070r 1  CA                           DEX                    ; Done 4 shifts?
000071r 1  D0 F8                        BNE     HEXSHIFT       ; No, loop.
000073r 1  C8                           INY                    ; Advance text index.
000074r 1  D0 E0                        BNE     NEXTHEX        ; Always taken. Check next character for hex.
000076r 1               
000076r 1               NOTHEX:
000076r 1  C4 2A                        CPY     YSAV           ; Check if L, H empty (no hex digits).
000078r 1  F0 9B                        BEQ     ESCAPE         ; Yes, generate ESC sequence.
00007Ar 1               
00007Ar 1  24 2B                        BIT     MODE           ; Test MODE byte.
00007Cr 1  50 10                        BVC     NOTSTOR        ; B6=0 is STOR, 1 is XAM and BLOCK XAM.
00007Er 1               
00007Er 1  A5 28                        LDA     L              ; LSD's of hex data.
000080r 1  81 26                        STA     (STL,X)        ; Store current 'store index'.
000082r 1  E6 26                        INC     STL            ; Increment store index.
000084r 1  D0 B5                        BNE     NEXTITEM       ; Get next item (no carry).
000086r 1  E6 27                        INC     STH            ; Add carry to 'store index' high order.
000088r 1  4C rr rr     TONEXTITEM:     JMP     NEXTITEM       ; Get next command item.
00008Br 1               
00008Br 1               RUN:
00008Br 1  6C 24 00                     JMP     (XAML)         ; Run at current XAM index.
00008Er 1               
00008Er 1               NOTSTOR:
00008Er 1  30 2B                        BMI     XAMNEXT        ; B7 = 0 for XAM, 1 for BLOCK XAM.
000090r 1               
000090r 1  A2 02                        LDX     #$02           ; Byte count.
000092r 1  B5 27        SETADR:         LDA     L-1,X          ; Copy hex data to
000094r 1  95 25                        STA     STL-1,X        ;  'store index'.
000096r 1  95 23                        STA     XAML-1,X       ; And to 'XAM index'.
000098r 1  CA                           DEX                    ; Next of 2 bytes.
000099r 1  D0 F7                        BNE     SETADR         ; Loop unless X = 0.
00009Br 1               
00009Br 1               NXTPRNT:
00009Br 1  D0 14                        BNE     PRDATA         ; NE means no address to print.
00009Dr 1  A9 0D                        LDA     #$0D           ; CR.
00009Fr 1  20 rr rr                     JSR     ECHO           ; Output it.
0000A2r 1  A5 25                        LDA     XAMH           ; 'Examine index' high-order byte.
0000A4r 1  20 rr rr                     JSR     PRBYTE         ; Output it in hex format.
0000A7r 1  A5 24                        LDA     XAML           ; Low-order 'examine index' byte.
0000A9r 1  20 rr rr                     JSR     PRBYTE         ; Output it in hex format.
0000ACr 1  A9 3A                        LDA     #$3A           ; ":".
0000AEr 1  20 rr rr                     JSR     ECHO           ; Output it.
0000B1r 1               
0000B1r 1               PRDATA:
0000B1r 1  A9 20                        LDA     #$20           ; Blank.
0000B3r 1  20 rr rr                     JSR     ECHO           ; Output it.
0000B6r 1  A1 24                        LDA     (XAML,X)       ; Get data byte at 'examine index'.
0000B8r 1  20 rr rr                     JSR     PRBYTE         ; Output it in hex format.
0000BBr 1  86 2B        XAMNEXT:        STX     MODE           ; 0 -> MODE (XAM mode).
0000BDr 1  A5 24                        LDA     XAML
0000BFr 1  C5 28                        CMP     L              ; Compare 'examine index' to hex data.
0000C1r 1  A5 25                        LDA     XAMH
0000C3r 1  E5 29                        SBC     H
0000C5r 1  B0 C1                        BCS     TONEXTITEM     ; Not less, so no more data to output.
0000C7r 1               
0000C7r 1  E6 24                        INC     XAML
0000C9r 1  D0 02                        BNE     MOD8CHK        ; Increment 'examine index'.
0000CBr 1  E6 25                        INC     XAMH
0000CDr 1               
0000CDr 1               MOD8CHK:
0000CDr 1  A5 24                        LDA     XAML           ; Check low-order 'examine index' byte
0000CFr 1  29 07                        AND     #$07           ; For MOD 8 = 0
0000D1r 1  10 C8                        BPL     NXTPRNT        ; Always taken.
0000D3r 1               
0000D3r 1               PRBYTE:
0000D3r 1  48                           PHA                    ; Save A for LSD.
0000D4r 1  4A                           LSR
0000D5r 1  4A                           LSR
0000D6r 1  4A                           LSR                    ; MSD to LSD position.
0000D7r 1  4A                           LSR
0000D8r 1  20 rr rr                     JSR     PRHEX          ; Output hex digit.
0000DBr 1  68                           PLA                    ; Restore A.
0000DCr 1               
0000DCr 1               PRHEX:
0000DCr 1  29 0F                        AND     #$0F           ; Mask LSD for hex print.
0000DEr 1  09 30                        ORA     #$30           ; Add "0".
0000E0r 1  C9 3A                        CMP     #$3A           ; Digit?
0000E2r 1  90 02                        BCC     ECHO           ; Yes, output it.
0000E4r 1  69 06                        ADC     #$06           ; Add offset for letter.
0000E6r 1               
0000E6r 1               ECHO:
0000E6r 1  48                           PHA                    ; Save A.
0000E7r 1               
0000E7r 1  20 35 E0                     JSR     WRITE_BYTE
0000EAr 1               
0000EAr 1  A9 FF                        LDA     #$FF           ; Initialize delay loop.
0000ECr 1  3A           TXDELAY:        DEC                    ; Decrement A.
0000EDr 1  D0 FD                        BNE     TXDELAY        ; Until A gets to 0.
0000EFr 1  68                           PLA                    ; Restore A.
0000F0r 1  60                           RTS                    ; Return.
0000F1r 1               
0000F1r 1               ;.include "ser16550.s"
0000F1r 1               
0000F1r 1                 ;.org $FFFA
0000F1r 1               .segment "RESETVEC"
000000r 1               
000000r 1  00 0F                        .word   $0F00          ; NMI vector
000002r 1  rr rr                        .word   RESET          ; RESET vector
000004r 1  00 00                        .word   $0000          ; IRQ vector
000004r 1               
